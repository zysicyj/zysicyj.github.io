<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>脚本一键生成通用接口，一分钟实现增删改查</title>
      <link href="/2023/08/14/%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E9%80%9A%E7%94%A8%E6%8E%A5%E5%8F%A3%EF%BC%8C%E4%B8%80%E5%88%86%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2023/08/14/%E8%84%9A%E6%9C%AC%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E9%80%9A%E7%94%A8%E6%8E%A5%E5%8F%A3%EF%BC%8C%E4%B8%80%E5%88%86%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>直接使用无需看此配置</p><p>快速生成通用接口业务配置 ： <a href="https://blog.zysicyj.top/2023/08/14/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%80%9A%E7%94%A8%E6%8E%A5%E5%8F%A3%E4%B8%9A%E5%8A%A1%E9%85%8D%E7%BD%AE">https://blog.zysicyj.top/2023/08/14/快速生成通用接口业务配置</a></p><h2 id="一、插件安装"><a href="#一、插件安装" class="headerlink" title="一、插件安装"></a>一、插件安装</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142150759.png"></p><h2 id="二、脚本"><a href="#二、脚本" class="headerlink" title="二、脚本"></a>二、脚本</h2><p>关注绿色聊天软件【程序员朱永胜】回复：1013 下载</p><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="拷贝到扩展目录下"><a href="#拷贝到扩展目录下" class="headerlink" title="拷贝到扩展目录下"></a>拷贝到扩展目录下</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151774.png"></p><h3 id="修改mybatisCodehelper-vm"><a href="#修改mybatisCodehelper-vm" class="headerlink" title="修改mybatisCodehelper.vm"></a>修改mybatisCodehelper.vm</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151263.png"></p><h3 id="修改init-vm"><a href="#修改init-vm" class="headerlink" title="修改init.vm"></a>修改init.vm</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151447.png"></p><h3 id="右键使用插件生成"><a href="#右键使用插件生成" class="headerlink" title="右键使用插件生成"></a>右键使用插件生成</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151908.png"></p><h3 id="这样配置并确定"><a href="#这样配置并确定" class="headerlink" title="这样配置并确定"></a>这样配置并确定</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151286.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速生成通用接口业务配置</title>
      <link href="/2023/08/14/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%80%9A%E7%94%A8%E6%8E%A5%E5%8F%A3%E4%B8%9A%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/08/14/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%80%9A%E7%94%A8%E6%8E%A5%E5%8F%A3%E4%B8%9A%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="这个是干什么的？"><a href="#这个是干什么的？" class="headerlink" title="这个是干什么的？"></a>这个是干什么的？</h2><p>简单介绍下：</p><p>作用：通过插件一键生成某个表对应的增删改查等基础或者说通用接口，这里面的代码是基础版的，后续改良后，很多业务的通用功能，比如流程的启动，自动下一步，通用导出，通用导入等等。</p><p>原理：核心就是<code>BasicControllerPostProcessor </code>，通过动态生成代理对象，完成逻辑实现。这里呢经过实践呢后续也有不少优化的，后续我总结后发一个新版的</p><h2 id="一、核心处理类"><a href="#一、核心处理类" class="headerlink" title="一、核心处理类"></a>一、核心处理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.ListUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.TimeInterval;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.CommonAnnotationBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载baseMapper，baseDao，baseService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicControllerPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">CommonAnnotationBeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">945664767382485314L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;NullableProblems&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> beanClass.getPackage().getName();</span><br><span class="line">        log.trace(<span class="string">&quot;beanName---&#123;&#125;,packageName:&#123;&#125;&quot;</span>, beanName, packageName);</span><br><span class="line">        List&lt;String&gt; per = ListUtil.of(<span class="string">&quot;com.nari.supervision.daily&quot;</span>);</span><br><span class="line">        List&lt;String&gt; tail = ListUtil.of(<span class="string">&quot;outbound&quot;</span>,<span class="string">&quot;personal&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (per.stream().anyMatch(packageName::contains)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tail.stream().map(v -&gt; v + <span class="string">&quot;.controller&quot;</span>).anyMatch(packageName::contains)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicService&quot;</span>, <span class="string">&quot;Controller&quot;</span>, <span class="string">&quot;Service&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tail.stream().map(v -&gt; v + <span class="string">&quot;.service&quot;</span>).anyMatch(packageName::contains)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicMapper&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;TransformImpl&quot;</span>);</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicDao&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;Mapper&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tail.stream().map(v -&gt; v + <span class="string">&quot;serviceImpl&quot;</span>).anyMatch(packageName::contains)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicMapper&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;TransformImpl&quot;</span>);</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicDao&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;Mapper&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateResourceName</span><span class="params">(Class&lt;?&gt; beanClass, String beanName, String destField, String searchString, String replaceString)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> beanClass.getSuperclass().getDeclaredField(destField);</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">basicMapper</span> <span class="operator">=</span> field.getAnnotation(Resource.class);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> Proxy.getInvocationHandler(basicMapper);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">memberValues</span> <span class="operator">=</span> invocationHandler.getClass().getDeclaredField(<span class="string">&quot;memberValues&quot;</span>);</span><br><span class="line">        memberValues.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) memberValues.get(invocationHandler);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, StringUtils.replace(beanName, searchString, replaceString));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、基础类"><a href="#二、基础类" class="headerlink" title="二、基础类"></a>二、基础类</h2><h3 id="BasicController"><a href="#BasicController" class="headerlink" title="BasicController"></a>BasicController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nari.core.annotation.OperationLog;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.groups.basic.InsertGroup;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.groups.basic.UpdateGroup;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.groups.query.PageQueryGroup;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.ApiResult;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.BaseParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageResult;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiSort;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础接口管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicController</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BasicModel</span>, Q <span class="keyword">extends</span> <span class="title class_">BaseParam</span>, V, D, M <span class="keyword">extends</span> <span class="title class_">BasicMapper</span>&lt;T, Q, D, V&gt;&gt; <span class="keyword">extends</span> <span class="title class_">com</span>.nari.core.web.BaseController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BasicService&lt;T, Q, V, D, M&gt; basicService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.1 添加&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;添加&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = InsertGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">insert</span><span class="params">(<span class="meta">@RequestBody</span> Q query)</span> &#123;</span><br><span class="line">        basicService.insert(query);</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.2 根据id删除&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id删除&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">del</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">        basicService.del(id);</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除-软删除，实际修改标识符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;/weak&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.3 根据id删除-软删除，实际修改标识符&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id删除-软删除，实际修改标识符&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">delWeak</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">        basicService.delWeak(id);</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.4 根据id更新信息&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id更新信息&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = UpdateGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;V&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Q query)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(basicService.update(query));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新信息-批量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;updateBatch&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.5 根据id更新信息-批量&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id更新信息-批量&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = UpdateGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">updateBatch</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Q&gt; query)</span> &#123;</span><br><span class="line">        basicService.updateBatch(query);</span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单个数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.6 查询单个数据&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;查询单个数据&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;V&gt; <span class="title function_">select</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(basicService.select(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.7 分页&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;分页&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = PageQueryGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;PageResult&lt;V&gt;&gt; <span class="title function_">listUser</span><span class="params">(Q query)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(basicService.page(query));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicDao"><a href="#BasicDao" class="headerlink" title="BasicDao"></a>BasicDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.BaseParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageParam;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BasicDao</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BasicModel</span>, D, Q <span class="keyword">extends</span> <span class="title class_">BaseParam</span>&gt; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;T&gt; &#123;</span><br><span class="line">    List&lt;D&gt; <span class="title function_">selectPageRel</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> PageParam&lt;D, Q&gt; page, <span class="meta">@Param(&quot;param&quot;)</span> Q param)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicEnum"><a href="#BasicEnum" class="headerlink" title="BasicEnum"></a>BasicEnum</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础枚举</span></span><br><span class="line"><span class="comment"> * 主要用来配合apijson实现枚举展示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/5/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BasicEnum</span> &#123;</span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">getValue</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicMapper"><a href="#BasicMapper" class="headerlink" title="BasicMapper"></a>BasicMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mapstruct.MappingTarget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BasicMapper</span>&lt;T, Q, D, V&gt; &#123;</span><br><span class="line">    T <span class="title function_">query2do</span><span class="params">(Q query)</span>;</span><br><span class="line"></span><br><span class="line">    V <span class="title function_">dto2View</span><span class="params">(D dto)</span>;</span><br><span class="line"></span><br><span class="line">    D <span class="title function_">do2dto</span><span class="params">(T role)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Q query, <span class="meta">@MappingTarget</span> T t)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;V&gt; <span class="title function_">dto2ViewPage</span><span class="params">(List&lt;D&gt; dto)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicModel"><a href="#BasicModel" class="headerlink" title="BasicModel"></a>BasicModel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用模型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/5/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicModel</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;删除标识&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String deleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicService"><a href="#BasicService" class="headerlink" title="BasicService"></a>BasicService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.IdUtil;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.BaseParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicService</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BasicModel</span>, Q <span class="keyword">extends</span> <span class="title class_">BaseParam</span>, V, D, M <span class="keyword">extends</span> <span class="title class_">BasicMapper</span>&lt;T, Q, D, V&gt;&gt; &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BasicDao&lt;T, D, Q&gt; basicDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BasicMapper&lt;T, Q, D, V&gt; basicMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="meta">@Valid</span> Q query)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> basicMapper.query2do(query);</span><br><span class="line">        t.setId(IdUtil.simpleUUID());</span><br><span class="line">        basicDao.insert(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(<span class="meta">@NotNull</span> String id)</span> &#123;</span><br><span class="line">        basicDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query @&#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">update</span><span class="params">(<span class="meta">@Valid</span> Q query)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">data</span> <span class="operator">=</span> basicMapper.query2do(query);</span><br><span class="line">        basicDao.updateById(data);</span><br><span class="line">        <span class="type">D</span> <span class="variable">d</span> <span class="operator">=</span> basicMapper.do2dto(data);</span><br><span class="line">        <span class="keyword">return</span> basicMapper.dto2View(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">select</span><span class="params">(<span class="meta">@NotNull</span> String id)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">data</span> <span class="operator">=</span> basicDao.selectById(id);</span><br><span class="line">        <span class="type">D</span> <span class="variable">d</span> <span class="operator">=</span> basicMapper.do2dto(data);</span><br><span class="line">        <span class="keyword">return</span> basicMapper.dto2View(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询多条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/2/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;V&gt; <span class="title function_">page</span><span class="params">(<span class="meta">@Valid</span> Q query)</span> &#123;</span><br><span class="line">        PageParam&lt;D, Q&gt; page = <span class="keyword">new</span> <span class="title class_">PageParam</span>&lt;&gt;(query);</span><br><span class="line">        page.setDefaultOrder(<span class="string">&quot;create_time desc&quot;</span>);</span><br><span class="line">        List&lt;D&gt; list = basicDao.selectPageRel(page, query);</span><br><span class="line"></span><br><span class="line">        List&lt;V&gt; vList = basicMapper.dto2ViewPage(list);</span><br><span class="line">        log.trace(<span class="string">&quot;&#123;&#125;&quot;</span>, list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(vList, page.getTotal());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 软删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/5/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delWeak</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> basicDao.selectById(id);</span><br><span class="line">        t.setDeleted(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        basicDao.updateById(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/6/6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBatch</span><span class="params">(List&lt;Q&gt; query)</span> &#123;</span><br><span class="line">        query.forEach(<span class="built_in">this</span>::update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="GenericSuperclassUtil"><a href="#GenericSuperclassUtil" class="headerlink" title="GenericSuperclassUtil"></a>GenericSuperclassUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericSuperclassUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取泛型类Class对象，不是泛型类则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getActualTypeArgument(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        Class&lt;?&gt; entitiClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (genericSuperclass <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass)</span><br><span class="line">                    .getActualTypeArguments();</span><br><span class="line">            <span class="keyword">if</span> (actualTypeArguments != <span class="literal">null</span> &amp;&amp; actualTypeArguments.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                entitiClass = (Class&lt;?&gt;) actualTypeArguments[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entitiClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取泛型类Class对象，不是泛型类则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; getActualTypeArgument(Class&lt;?&gt; clazz, Integer pos) &#123;</span><br><span class="line">        Class&lt;?&gt; entitiClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (genericSuperclass <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass)</span><br><span class="line">                    .getActualTypeArguments();</span><br><span class="line">            <span class="keyword">if</span> (actualTypeArguments != <span class="literal">null</span> &amp;&amp; actualTypeArguments.length &gt; pos) &#123;</span><br><span class="line">                entitiClass = (Class&lt;?&gt;) actualTypeArguments[pos];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entitiClass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、POM"><a href="#三、POM" class="headerlink" title="三、POM"></a>三、POM</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.5.5.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发规范（一）：Mysql篇</title>
      <link href="/2023/08/14/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AMysql%E7%AF%87/"/>
      <url>/2023/08/14/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AMysql%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-编码规范：保障代码质量的关键"><a href="#MySQL-编码规范：保障代码质量的关键" class="headerlink" title="MySQL 编码规范：保障代码质量的关键"></a>MySQL 编码规范：保障代码质量的关键</h1><h2 id="1-流程"><a href="#1-流程" class="headerlink" title="1. 流程"></a>1. 流程</h2><p>数据库表结构的修改需要相关人员和Leader一起评审，保证符合涉及规范。</p><p>不允许使用root账号，所有开发和测试应当分配指定账号，并授予最小数据库权限</p><h2 id="2-数据库与表规范"><a href="#2-数据库与表规范" class="headerlink" title="2. 数据库与表规范"></a>2. 数据库与表规范</h2><h3 id="表命名规范"><a href="#表命名规范" class="headerlink" title="表命名规范"></a>表命名规范</h3><ol><li>常规表表名以 t_开头，t 代表 table 的意思，命名规则即 <strong>t + 模块（包含模块含义的简写）+ 表（包含表含义的简写）</strong>，比如用户模块的教育信息表：t_user_eduinfo。</li><li>临时表（RD、QA 或 DBA 同学用于数据临时处理的表），命名规则：<strong>temp 前缀+模块+表+日期后缀</strong>：temp_user_eduinfo_20210719</li><li>备份表（用于保存和归档历史数据或者作为灾备恢复的数据）命名规则，<strong>bak 前缀+模块+表+日期后缀</strong>：bak_user_eduinfo_20210719</li><li>区分位: iz_* [String(1)] 1表示是 0表示否，（禁用 is_,代码生成实体有问题 )</li><li>状态位: *_status [String(1-2)] 状态字段必须加注释说明每个值代表含义</li><li>同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义</li><li>多个单词以下划线 _ 分隔</li><li>常规表表名尽量不超过 30 个字符，temp 表和 bak 表视情况而定，也尽量简短为宜，命名应使用小写</li></ol><h3 id="数据库对象设计规范"><a href="#数据库对象设计规范" class="headerlink" title="数据库对象设计规范"></a>数据库对象设计规范</h3><ol><li>字符集统一使用<code>utf8mb4</code>,排序<code>utf8mb4_general_ci</code></li><li>不允许使用视图、存储过程、触发器</li><li>数据库引擎统一<code>innodb</code></li><li>模块划分和代码中业务模块一致</li></ol><h3 id="表设计规范"><a href="#表设计规范" class="headerlink" title="表设计规范"></a>表设计规范</h3><ol><li>不要使用外键</li><li>表必须有主键，设置为varchar(64)，唯一</li><li>表必须有create_time(timestamp)字段</li><li>表必须有update_time(timestamp)字段</li><li>禁止使用复杂类型，json使用要看情况</li><li><strong>需要json连接的字段，类型必须一致，防止隐式转换</strong></li><li>严禁使用分区表</li><li>单表字段数不要太多，建议最多不要大于50个。过度的宽表对性能也是很大的影响。</li><li>MySQL在处理大表时，性能就开始明显降低，所以建议单表物理大小限制在16GB，表中数据行数控制在2000W内。^[业内的规则是超过2000W性能开始明显降低。但是这个值是灵活的，你可以根据实际情况进行测试来判断，比如阿里的标准就是500W，百度的确是2000W。实际上是否宽表，单行数据所占用的空间都有起到作用的。</li></ol><p>]<br>10. 表字段注释，每个字段必须设置注释说明;<br>11. 表字段注释，状态类型的字段必须说明取值规则（比如性别sex取值规则）</p><h2 id="3-字段规范"><a href="#3-字段规范" class="headerlink" title="3. 字段规范"></a>3. 字段规范</h2><h4 id="字段命名规范"><a href="#字段命名规范" class="headerlink" title="字段命名规范"></a>字段命名规范</h4><ol><li>字段命名需要表示其实际含义的英文单词或简写，<strong>单词之间用下划线 _ 进行连接</strong>，如 service_ip、service_port。</li><li><strong>各表之间相同意义的字段必须同名</strong>，比如 a 表和 b 表都有创建时间，应该统一为 create_time，不一致会很混乱。</li><li>多个单词以下划线 _ 分隔</li><li>字段名尽量不超过 30 个字符，<strong>命名应该使用小写</strong></li></ol><h4 id="字段设计规范"><a href="#字段设计规范" class="headerlink" title="字段设计规范"></a>字段设计规范</h4><ol><li><strong>对于精确浮点型数据存储，需要使用DECIMAL</strong>，严禁使用FLOAT和DOUBLE</li><li>禁止使用TEXT、BLOG字段，特殊情况除外</li><li><strong>字段使用NOT NULL属性</strong>，可用默认值代替NULL</li><li>区分、状态、类型字段，尽量用String类型，避免数字类型的一些问题</li><li>字段默认值（字段尽量不设置默认值，采用编码方式加默认值）</li><li>逻辑删除字段，del_flag [int(1)]，1表示删除 0表示未删除 ，可选择加</li><li>乐观锁字段， update_count[Integer]，可选择加</li></ol><h2 id="4-索引规范"><a href="#4-索引规范" class="headerlink" title="4. 索引规范"></a>4. 索引规范</h2><h4 id="索引命名规范"><a href="#索引命名规范" class="headerlink" title="索引命名规范"></a>索引命名规范</h4><ol><li>唯一索引使用<strong>uni + 字段名</strong> 来命名：create unique index uni_uid on t_user_basic(uid) 。</li><li>非唯一索引使用<strong>idx + 字段名</strong> 来命名：create index idx_uname_mobile on t_user_basic(uname,mobile) 。</li><li>多个单词以<strong>下划线 _ 分隔</strong>。</li><li>索引名尽量不超过50个字符，命名应该使用小写，组合索引的字段不宜太多，不然也不利于查询效率的提升。</li><li>多单词组成的列名，取尽可能代表意义的缩写，如 test_contact表member_id和friend_id上的组合索引：idx_mid_fid。</li><li><strong>理解组合索引最左前缀原则，避免重复建设索引</strong>，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。</li></ol><h4 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h4><ol><li>索引必须创建在索引选择性（区分度）较高的列上，选择性的计算方式为:  selecttivity &#x3D; count(distinct c_name)&#x2F;count(*) ; 如果区分度结果小于0.2，则不建议在此列上创建索引，否则大概率会拖慢SQL执行</li><li>单张表的索引数量理论上应<strong>控制在5个以内</strong>。经常有大批量插入、更新操作表，应尽量少建索引，索引建立的原则理论上是<strong>多读少写的场景</strong>。</li><li><strong>ORDER BY，GROUP BY，DISTINCT的字段需要添加在索引的后面，形成覆盖索引</strong></li><li>联合索引注意<strong>最左匹配原则</strong>：必须按照从左到右的顺序匹配，MySQL会一直向右匹配索引直到遇到范围查询(&gt;、&lt;、between、like)然后停止匹配。如：depno&#x3D;1 and empname&gt;’’ and job&#x3D;1 如果建立(depno,empname,job)顺序的索引，job是用不到索引的。</li><li>应需而取策略，查询记录的时候，<strong>不要一上来就使用</strong>*，只取需要的数据，可能的话尽量只利用索引覆盖，可以减少回表操作，提升效率。</li><li>避免索引失效的原则：<strong>禁止对索引字段使用函数、运算符操作，会使索引失效</strong>。</li><li><strong>避免非必要的类型转换</strong>，字符串字段使用数值进行比较的时候会导致索引无效。</li><li><strong>模糊查询’%value%’会使索引无效</strong>，变为全表扫描，因为无法判断扫描的区间，<strong>但是’value%’是可以有效利用索引</strong>。</li><li><strong>索引覆盖排序字段</strong>，这样可以减少排序步骤，提升查询效率</li><li><strong>尽量的扩展索引，非必要不新建索引</strong>。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li></ol><p>扩展下最左前缀</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这里创建一个索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> users (first_name, last_name);</span><br><span class="line"></span><br><span class="line"># 在这个索引中，first_name 是最左前缀。现在，当您执行类似以下的查询时，索引可以被有效地利用：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> first_name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span> <span class="keyword">AND</span> last_name <span class="operator">=</span> <span class="string">&#x27;Doe&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-SQL-查询编写规范"><a href="#5-SQL-查询编写规范" class="headerlink" title="5. SQL 查询编写规范"></a>5. SQL 查询编写规范</h2><ol><li>不允许使用<code>select *</code></li><li>查询必须加where条件，避免全表扫描</li><li>如果必须有TEXT对象，必须单独加表并关联</li><li>where条件中过滤字段严禁使用任何函数，包括数据类型转换函数</li><li>分页查询必须带排序条件</li><li>用in&#x2F;union替换or，并注意in个数小于300</li><li>如无必要不要使用%前缀进行模糊查询，避免全表查询</li><li>避免使用子查询，转为join连接</li></ol><p>子查询性能差原因</p><p><strong>「·」</strong> 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能 会受到一定的影响；</p><p><strong>「·」</strong> 特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大；</p><p><strong>「·」</strong> 由于子查询会产生大量的临时表也没有索引，所以会消耗过多的CPU和IO资源，产生大量的慢查询。</p><h2 id="6-事务管理和性能优化"><a href="#6-事务管理和性能优化" class="headerlink" title="6. 事务管理和性能优化"></a>6. 事务管理和性能优化</h2><ol><li>所有方法涉及到更新、删除、添加操作需要使用<code>@Transactional</code>注解</li><li>数据量大的情况下， 需要分批次操作</li></ol><h2 id="7-安全性考虑"><a href="#7-安全性考虑" class="headerlink" title="7. 安全性考虑"></a>7. 安全性考虑</h2><ul><li>数据库配置应当使用druid等框架对明文进行加密</li><li>避免拼接SQL</li><li>防止SQL注入</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 开发规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cmd部署HexoGithub443问题</title>
      <link href="/2023/08/13/Cmd%E9%83%A8%E7%BD%B2HexoGithub443%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/13/Cmd%E9%83%A8%E7%BD%B2HexoGithub443%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy “localhost:7890”</span><br></pre></td></tr></table></figure><p>配置下代理即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列（二）：深入解读Redis的两种持久化方式</title>
      <link href="/2023/08/13/Redis%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BBRedis%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/08/13/Redis%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BBRedis%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客地址：blog.zysicyj.top</p></blockquote><h1 id="Redis为什么要引入持久化机制"><a href="#Redis为什么要引入持久化机制" class="headerlink" title="Redis为什么要引入持久化机制"></a>Redis为什么要引入持久化机制</h1><p>Redis引入持久化机制是为了解决内存数据库的数据安全性和可靠性问题。虽然内存数据库具有高速读写的优势，但由于数据存储在内存中，一旦服务器停止或崩溃，所有数据将会丢失。持久化机制的引入旨在将内存中的数据持久化到磁盘上，从而在服务器重启后能够恢复数据，提供更好的数据保护和可靠性。</p><p>以下是持久化机制的几个主要原因：</p><p><strong>1. 数据安全和可靠性：</strong><br>通过将数据持久化到磁盘上，即使在服务器崩溃或异常停止的情况下，也可以保证数据不会丢失。持久化机制可以防止重要的数据在突发情况下遭受损失。</p><p><strong>2. 数据恢复：</strong><br>持久化机制允许在服务器重启后将数据重新加载到内存中，从而实现数据的恢复。这对于业务的连续性和可用性非常重要。</p><p><strong>3. 数据灾难恢复：</strong><br>持久化机制对于灾难恢复也很有帮助。在不幸发生硬件故障、电力中断等情况下，持久化机制可以帮助恢复数据。</p><p><strong>4. 数据迁移：</strong><br>持久化机制也有助于将数据从一个服务器迁移到另一个服务器。你可以通过备份持久化文件并在另一台服务器上进行恢复来完成数据迁移。</p><p>虽然持久化机制带来了磁盘IO和性能开销，但它为Redis提供了更强大的数据保护能力。根据应用的需求，可以根据数据的重要性和数据丢失的容忍度来选择适当的持久化方式，或者结合两种方式以提供更高的数据保护级别。</p><h1 id="Redis提供了哪些持久化机制"><a href="#Redis提供了哪些持久化机制" class="headerlink" title="Redis提供了哪些持久化机制"></a>Redis提供了哪些持久化机制</h1><p>Redis提供了两种主要的持久化机制，分别是RDB快照（Snapshotting）和AOF日志（Append-Only File）。这两种机制可以根据不同的需求和场景来选择使用。</p><p><strong>1. RDB快照（Snapshotting）：</strong><br>RDB快照是一种全量持久化方式，它会周期性地将内存中的数据以二进制格式保存到磁盘上的RDB文件。RDB文件是一个经过压缩的二进制文件，包含了数据库在某个时间点的数据快照。RDB快照有助于实现紧凑的数据存储，适合用于备份和恢复。</p><p><strong>优点：</strong></p><ul><li>RDB快照在恢复大数据集时速度较快，因为它是全量的数据快照。</li><li>由于RDB文件是压缩的二进制文件，它在磁盘上的存储空间相对较小。</li><li>适用于数据备份和灾难恢复。</li></ul><p><strong>缺点：</strong></p><ul><li>RDB快照是周期性的全量持久化，可能导致某个时间点之后的数据丢失。</li><li>在保存快照时，Redis服务器会阻塞，可能对系统性能造成影响。</li></ul><p><strong>2. AOF日志（Append-Only File）：</strong><br>AOF日志是一种追加式持久化方式，它记录了每个写操作命令，以追加的方式将命令写入AOF文件。通过重新执行AOF文件中的命令，可以重建出数据在内存中的状态。AOF日志提供了更精确的持久化，适用于需要更高数据安全性和实时性的场景。</p><p><strong>优点：</strong></p><ul><li>AOF日志可以实现更精确的数据持久化，每个写操作都会被记录。</li><li>在AOF文件中，数据可以更好地恢复，因为它保存了所有的写操作历史。</li><li>AOF日志适用于需要实时恢复数据的场景，如秒级数据恢复要求。</li></ul><p><strong>缺点：</strong></p><ul><li>AOF日志相对于RDB快照来说，可能会占用更多的磁盘空间，因为它是记录每个写操作的文本文件。</li><li>AOF日志在恢复大数据集时可能会比RDB快照慢，因为需要逐条执行写操作。</li></ul><p>根据不同的需求，可以选择RDB快照、AOF日志或两者结合使用。你可以根据数据的重要性、恢复速度要求以及磁盘空间限制来选择合适的持久化方式。有时候，也可以通过同时使用两种方式来提供更高的数据保护级别。</p><h1 id="AOF日志是如何实现的"><a href="#AOF日志是如何实现的" class="headerlink" title="AOF日志是如何实现的"></a>AOF日志是如何实现的</h1><p>首先，大家要知道，AOF是写后日志，“写后”的意思是Redis先执行命令，把数据写入内存，然后才记录日志，如下图所示：<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131424275.png" alt="Redis AOF操作过程"></p><h2 id="AOF-为什么要先执行命令再记日志呢"><a href="#AOF-为什么要先执行命令再记日志呢" class="headerlink" title="AOF 为什么要先执行命令再记日志呢"></a>AOF 为什么要先执行命令再记日志呢</h2><p>AOF（Append-Only File）持久化机制中，为什么要先执行命令再记录日志，而不是相反，这涉及到数据的一致性和持久性。</p><p>AOF的设计目标之一是保证数据的持久性，即在服务器重启后能够恢复出与重启前一致的数据状态。为了实现这个目标，AOF的操作顺序非常重要。</p><p><strong>先执行命令再记录日志的原因：</strong></p><ol><li><p><strong>数据一致性：</strong> 如果先记录日志再执行命令，假设记录日志成功而执行命令失败（例如服务器崩溃），那么日志中记录的操作实际上没有被应用，会导致数据在重启后与预期不一致。</p></li><li><p><strong>可恢复性：</strong> 先执行命令再记录日志可以保证在服务器重启后，即使在崩溃前未能将操作记录到日志中，也可以通过重新执行AOF日志中的命令，将数据恢复到正确的状态。</p></li><li><p><strong>避免日志丢失：</strong> 如果先记录日志再执行命令，如果在记录日志之前发生了服务器崩溃，会导致操作丢失，而这些操作可能已经影响了数据的一致性。</p></li></ol><p>当然，这里面还有一个非常重要的原因，<strong>它是在命令执行后才记录日志，所以不会阻塞当前的写操作</strong>。</p><p>因此，为了确保数据的持久性和一致性，Redis选择了先执行命令再记录日志的方式。这样可以保证只有在操作真正成功执行后，才会将操作记录到AOF日志中，从而在服务器重启后能够准确地重放这些操作，保持数据的正确性。</p><h2 id="AOF日志里面记录了什么内容呢"><a href="#AOF日志里面记录了什么内容呢" class="headerlink" title="AOF日志里面记录了什么内容呢"></a>AOF日志里面记录了什么内容呢</h2><p>AOF（Append-Only File）日志记录了每个写操作命令，以追加的方式将命令写入AOF文件。这些写操作命令被以一种协议格式（通常是RESP协议）写入AOF文件，以文本形式保存。下面是AOF日志中记录的内容示例：</p><p>假设执行了以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET key1 value1</span><br><span class="line">INCR key2</span><br><span class="line">LPUSH list1 item1</span><br></pre></td></tr></table></figure><p>对应的AOF日志内容可能是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*3\r\n$3\r\nSET\r\n$4\r\nkey1\r\n$6\r\nvalue1\r\n</span><br><span class="line">*2\r\n$4\r\nINCR\r\n$4\r\nkey2\r\n</span><br><span class="line">*3\r\n$5\r\nLPUSH\r\n$5\r\nlist1\r\n$5\r\nitem1\r\n</span><br></pre></td></tr></table></figure><p>在这个示例中，每个写操作都以RESP协议格式记录在AOF文件中，以一系列字节数组来表示命令和参数。每个写操作的记录由多行组成，以\r\n分隔。</p><ul><li><code>*3</code>：表示命令参数的个数为3。</li><li><code>$3\r\nSET\r\n</code>：表示第一个参数为长度为3的字符串 “SET”。</li><li><code>$4\r\nkey1\r\n</code>：表示第二个参数为长度为4的字符串 “key1”。</li><li><code>$6\r\nvalue1\r\n</code>：表示第三个参数为长度为6的字符串 “value1”。</li></ul><p>这样的记录方式允许在AOF文件中按照操作的顺序逐条重放写操作命令，从而实现数据在服务器重启后的恢复。由于AOF记录的是写操作命令本身，所以在执行AOF文件中的命令时，可以完全还原数据的状态。</p><h2 id="AOF日志潜在的问题"><a href="#AOF日志潜在的问题" class="headerlink" title="AOF日志潜在的问题"></a>AOF日志潜在的问题</h2><p>AOF（Append-Only File）写日志是Redis的持久化机制之一，它记录了每个写操作命令，以追加的方式将命令写入AOF文件。尽管AOF具有许多优点，但也存在一些风险和潜在的问题，需要注意和管理：</p><p><strong>1. 磁盘IO开销：</strong><br>AOF日志以追加写入方式工作，每次写入操作都会直接追加到AOF文件末尾。这意味着频繁的写入操作可能会导致磁盘IO开销增加，可能会影响系统的性能和响应时间。</p><p><strong>2. 磁盘空间占用：</strong><br>AOF日志记录的是每个写操作命令本身，相比于RDB快照，AOF文件可能会更大。如果写入操作频繁，AOF文件可能会不断增大，占用过多的磁盘空间。</p><p><strong>3. 数据一致性：</strong><br>尽管AOF的先执行命令再记录日志的机制保证了数据一致性，但如果在记录日志前发生服务器崩溃，尚未记录的操作可能会丢失，可能导致数据一致性问题。</p><p><strong>4. AOF文件损坏：</strong><br>由于AOF文件是以文本格式记录的命令，如果AOF文件在写入或存储过程中受到损坏，可能导致数据恢复时出现问题，甚至无法正确恢复数据。</p><p><strong>5. AOF重写耗时：</strong><br>AOF重写是为了减小AOF文件的大小，但它是一个耗时的操作，可能会对系统性能产生影响，尤其是在大数据集的情况下。</p><p><strong>6. AOF重写可能引发的问题：</strong><br>AOF重写过程中可能会因为各种原因导致数据丢失，例如中断的重写过程、文件系统问题等。在执行AOF重写时，需要谨慎对待，确保数据的完整性。</p><p><strong>7. AOF文件合并：</strong><br>在一些场景下，可能需要将多个AOF文件合并成一个，这样的操作需要小心处理，以避免数据丢失或错误。</p><p><strong>8. 硬件故障：</strong><br>虽然AOF可以提供持久性保证，但硬件故障（例如磁盘故障）可能会导致AOF文件丢失或损坏，需要适当的备份和恢复策略。</p><p>为了减轻AOF写日志带来的风险，可以采取一些措施，如选择适当的AOF同步策略、定期备份AOF文件、监控AOF文件的大小和状态、定期执行AOF重写、备份数据等。这些策略可以帮助减少潜在的问题，并提高系统的可靠性。</p><h2 id="AOF日志三种写回策略"><a href="#AOF日志三种写回策略" class="headerlink" title="AOF日志三种写回策略"></a>AOF日志三种写回策略</h2><p>AOF（Append-Only File）持久化机制在Redis中有三种不同的写回（sync）策略，用于控制何时将AOF缓冲区中的写入操作刷新到磁盘上的AOF文件。这些策略决定了AOF日志的同步频率，影响了数据的持久性和性能。以下是这三种写回策略：</p><p><strong>1. always（始终同步）：</strong><br>在这个策略下，每次执行写入操作之后，Redis都会立即将写入操作刷新到磁盘，确保写入操作已经持久化。虽然这种方式能够提供最高的数据保证，但也是性能开销最大的一种方式，因为每次写入操作都会引起磁盘IO。</p><p><strong>优点：</strong></p><ul><li>最高的数据保证，即使系统崩溃，也只会丢失上一个写入操作。</li></ul><p><strong>缺点：</strong></p><ul><li>性能开销较大，频繁的磁盘IO可能影响系统的性能和响应时间。</li></ul><p><strong>2. everysec（每秒同步）：</strong><br>在这个策略下，Redis会每秒一次将AOF缓冲区中的写入操作批量刷新到磁盘上的AOF文件。这样可以在一定程度上平衡数据保证和性能。</p><p><strong>优点：</strong></p><ul><li>较高的数据保证，每秒一次的同步保证了不会丢失过多的写入操作。</li><li>性能开销相对较低，因为是每秒一次的批量刷新。</li></ul><p><strong>缺点：</strong></p><ul><li>在一秒内的操作可能会丢失。</li></ul><p><strong>3. no（不同步）：</strong><br>这个策略下，Redis不会主动将AOF缓冲区中的写入操作刷新到磁盘，而是由操作系统来决定何时将数据写入磁盘。这是性能开销最小的方式，但数据持久性相对较低。</p><p><strong>优点：</strong></p><ul><li>最小的性能开销，几乎不会影响系统的响应时间。</li><li>最高的性能表现，写入操作不会导致频繁的磁盘IO。</li></ul><p><strong>缺点：</strong></p><ul><li>数据持久性较低，如果系统崩溃，可能会丢失多个写入操作。</li></ul><p>选择合适的AOF写回策略取决于数据的重要性和性能需求。如果数据安全性最为重要，可以选择<code>always</code>策略。如果在数据一致性和性能之间需要平衡，可以选择<code>everysec</code>策略。如果对性能要求较高，而可以接受一定程度的数据丢失，可以选择<code>no</code>策略。根据实际情况，可以根据需求来配置AOF的写回策略。</p><p>这里呢给大家总结一下各种配置的优缺点<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131434405.png"></p><h2 id="日志文件太大了怎么办"><a href="#日志文件太大了怎么办" class="headerlink" title="日志文件太大了怎么办"></a>日志文件太大了怎么办</h2><p>AOF（Append-Only File）重写是为了减小AOF文件的大小，避免AOF文件不断增大导致的磁盘空间占用问题。AOF重写是一种以全量的方式生成新的AOF文件，其中记录的是一个数据集的写入操作，这个数据集的大小通常比原始AOF文件小很多。</p><p>AOF重写的工作原理如下：</p><ol><li><p><strong>触发重写：</strong><br>AOF重写可以手动触发，也可以根据配置自动触发。当满足一定条件（例如AOF文件大小超过指定百分比或最小大小）时，Redis会启动AOF重写过程。</p></li><li><p><strong>后台进程启动：</strong><br>当AOF重写触发时，Redis会启动一个子进程，这个子进程会负责执行AOF重写操作。</p></li><li><p><strong>创建数据集快照：</strong><br>在子进程中，Redis会创建一个数据集的内存快照，即内存中数据在某个时间点的快照。</p></li><li><p><strong>遍历数据集：</strong><br>子进程开始遍历数据集中的键，并将写操作转换成命令序列。</p></li><li><p><strong>生成新AOF文件：</strong><br>子进程会将遍历期间生成的命令序列追加到新的AOF文件中，这个新文件是紧凑的，只包含了数据集在某个时间点的写入操作。</p></li><li><p><strong>替换原AOF文件：</strong><br>当新的AOF文件生成完成后，子进程会将原始的AOF文件替换为新的AOF文件。这一步通常很快，因为新的AOF文件相对较小。</p></li><li><p><strong>主线程继续服务：</strong><br>在AOF重写过程中，主线程仍然可以继续处理客户端请求，响应读取操作等，不会被阻塞。</p></li></ol><p>AOF重写的优势在于它可以生成一个更小、更紧凑的AOF文件，避免了不断增大的AOF文件所带来的磁盘空间和读写开销。此外，新的AOF文件只包含了写入操作，没有之前的读操作，因此它在恢复数据时不需要考虑之前的读操作。</p><p>AOF重写可以通过多种方式触发：</p><ul><li>手动触发：可以使用<code>BGREWRITEAOF</code>命令手动触发AOF重写。</li><li>自动触发：可以通过设置<code>auto-aof-rewrite-percentage</code>和<code>auto-aof-rewrite-min-size</code>来自动触发AOF重写。当AOF文件大小达到指定的百分比或最小大小时，Redis会自动启动AOF重写。</li></ul><p>需要注意的是，AOF重写是一个资源密集型操作，可能会影响系统的性能，特别是在大数据集的情况下。因此，在进行AOF重写时，应该考虑其对系统性能的影响，并确保系统具备足够的资源来执行重写操作。<br>下面举例说明一下：<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131436435.png" alt="AOF重写减少文件大小"><br>这里大家能看到，经过优化后，AOF日志文件会缩小很多，但是，要把整个数据库的最新数据的操作日志都写回磁盘，仍然是一个非常耗时的过程。这时，我们就要继续关注另一个问题了。</p><h2 id="重写会不会阻塞主线程？"><a href="#重写会不会阻塞主线程？" class="headerlink" title="重写会不会阻塞主线程？"></a>重写会不会阻塞主线程？</h2><p>AOF重写不会阻塞Redis的主线程。Redis的AOF重写是作为一个后台进程（子进程）来执行的，不会影响主要的服务线程。</p><p>AOF重写过程中，Redis会创建一个子进程来遍历数据集，将写操作转换为命令序列，并生成新的AOF文件。主线程仍然可以继续处理客户端请求，响应读取操作等。</p><p>这种设计使得Redis能够在不中断服务的情况下执行AOF重写，从而减少对系统的影响。但需要注意的是，虽然AOF重写不会阻塞主线程，但它仍然是一个资源密集型操作，可能会占用较多的CPU和内存资源，因此在进行AOF重写时，需要考虑系统的资源情况，避免影响其他业务操作。</p><h1 id="RDB快照是如何实现的？"><a href="#RDB快照是如何实现的？" class="headerlink" title="RDB快照是如何实现的？"></a>RDB快照是如何实现的？</h1><p>RDB（Redis DataBase）是Redis的一种持久化机制，用于将数据从内存中保存到磁盘上，以便在服务器重启时恢复数据。RDB通过创建一个快照（Snapshot）来保存数据库在某个时间点的数据状态，然后将这个快照保存到磁盘上的一个二进制文件中。</p><p><strong>RDB的实现过程：</strong></p><ol><li><p><strong>创建快照：</strong><br>当RDB持久化被触发时（可以手动触发或根据配置自动触发），Redis会生成一个数据集的内存快照。这个快照包含了数据库在某个时间点的所有键值对以及相关的数据结构信息。</p></li><li><p><strong>快照数据序列化：</strong><br>在创建快照后，Redis会将快照中的数据进行序列化，将键、值、过期时间等信息按照一定的格式编码成二进制数据。</p></li><li><p><strong>保存到文件：</strong><br>将序列化后的数据保存到磁盘上的RDB文件中。RDB文件的扩展名通常为<code>.rdb</code>。</p></li><li><p><strong>持久化完成：</strong><br>一旦RDB文件保存完成，持久化过程结束。这个RDB文件包含了数据库在快照时间点的完整数据状态。</p></li></ol><p><strong>RDB的优缺点：</strong></p><p><strong>优点：</strong></p><ul><li><strong>紧凑的数据格式：</strong> RDB文件是一个二进制文件，采用了紧凑的编码格式，因此在磁盘上占用的空间相对较小。</li><li><strong>快速恢复：</strong> 在恢复数据时，通过加载RDB文件，可以快速地将数据恢复到指定时间点的状态。</li><li><strong>适用于备份和恢复：</strong> RDB文件适用于进行数据备份、迁移和灾难恢复，可以方便地复制到其他服务器上。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>数据丢失：</strong> 由于RDB是周期性的全量持久化，可能会导致某个时间点之后的数据丢失。</li><li><strong>IO开销：</strong> RDB持久化时，需要将整个数据集写入磁盘，可能在大数据集上引起IO开销，影响性能。</li><li><strong>耗时：</strong> 在生成RDB快照的过程中，如果数据集很大，可能会占用较多的CPU资源，导致短时间内的性能下降。</li></ul><p>总的来说，RDB持久化适用于需要紧凑的备份和数据迁移，以及在服务器重启时需要快速恢复数据的场景。但需要注意的是，RDB的全量持久化可能会导致某些数据的丢失，因此在选择持久化方式时需要权衡数据的重要性和性能需求。</p><h2 id="给哪些内存数据做快照？"><a href="#给哪些内存数据做快照？" class="headerlink" title="给哪些内存数据做快照？"></a>给哪些内存数据做快照？</h2><p>在RDB持久化中，Redis会对内存中的各种数据进行快照，将数据保存到RDB文件中。这些内存数据包括：</p><ol><li><p><strong>字符串类型数据：</strong> 包括使用<code>SET</code>命令设置的字符串键值对。</p></li><li><p><strong>哈希表（Hash）：</strong> 包括使用<code>HSET</code>、<code>HMSET</code>等命令设置的哈希键值对。</p></li><li><p><strong>列表（List）：</strong> 包括使用<code>LPUSH</code>、<code>RPUSH</code>等命令添加的列表元素。</p></li><li><p><strong>集合（Set）：</strong> 包括使用<code>SADD</code>等命令添加的集合元素。</p></li><li><p><strong>有序集合（Sorted Set）：</strong> 包括使用<code>ZADD</code>等命令添加的有序集合元素。</p></li><li><p><strong>Bitmaps、HyperLogLogs、Streams：</strong> 包括这些特殊数据类型的内容。</p></li><li><p><strong>过期时间：</strong> 快照会记录每个键的过期时间，以便在恢复数据时进行过期判断。</p></li><li><p><strong>数据库配置：</strong> 包括数据库的配置信息，如数据库编号、键空间的选项等。</p></li><li><p><strong>服务器信息：</strong> 包括服务器的信息，如版本号、运行模式等。</p></li><li><p><strong>客户端连接信息：</strong> 包括客户端连接的信息。</p></li></ol><p>需要注意的是，RDB持久化是一种全量持久化机制，它会在某个时间点生成一个数据库的快照，将所有内存中的数据保存到RDB文件中。这种方式有一些优点，如紧凑的数据格式和快速恢复，但也有缺点，如可能造成数据丢失和IO开销。在选择使用RDB持久化时，需要权衡这些优缺点，根据业务需求来确定是否适合使用。</p><h2 id="哪些命令能生成RDB文件？"><a href="#哪些命令能生成RDB文件？" class="headerlink" title="哪些命令能生成RDB文件？"></a>哪些命令能生成RDB文件？</h2><p>RDB文件是通过执行持久化操作来生成的，而不是通过特定的命令来生成。在Redis中，可以手动触发RDB持久化操作，也可以根据配置自动触发。以下是生成RDB文件的方式：</p><ol><li><p><strong>手动触发：</strong><br>使用<code>SAVE</code>命令可以手动触发RDB持久化操作，该命令会<strong>阻塞服务器</strong>的主线程，直到RDB文件生成完成为止。这个命令适合用于测试或紧急情况下的数据备份。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>后台触发：</strong><br>使用<code>BGSAVE</code>命令可以在后台触发RDB持久化操作，这个命令会派生一个子进程来执行RDB持久化，<strong>不会阻塞服务器</strong>的主线程。这是比较常用的生成RDB文件的方式。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BGSAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>自动触发：</strong><br>可以通过配置文件中的参数来自动触发RDB持久化操作。在配置文件（redis.conf）中可以设置<code>save</code>参数，用于指定在何时执行RDB持久化操作，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>这表示当900秒内至少发生1次写操作、300秒内至少发生10次写操作、60秒内至少发生10000次写操作时，自动触发BGSAVE命令。</p></li></ol><p>无论是手动触发还是后台触发，RDB持久化操作都会生成一个RDB文件，其中包含了内存中的数据快照。需要注意的是，RDB持久化是一个资源密集型操作，可能会影响服务器的性能，特别是在数据集较大的情况下。因此，在选择何时执行RDB持久化时，需要根据业务需求和性能要求做出权衡。</p><h2 id="快照时数据能修改吗？"><a href="#快照时数据能修改吗？" class="headerlink" title="快照时数据能修改吗？"></a>快照时数据能修改吗？</h2><p>这里大家可能会想到<code>bgsave</code>命令避免阻塞。这里大家可能会有误区，<strong>避免阻塞和正常处理读写请求并不是一回事</strong>。此时，主线程确实没有阻塞，可以正常接收请求，但是，为了保证快照完整性，它只能处理读操作，因为不能修改正在执行快照的数据。<br>那么Redis是如何解决这个问题的呢？<br>实际上，Redis 6.0 版本引入了<strong>写时复制（Copy-On-Write，COW）技术</strong>来保证在执行快照（RDB）时数据是可修改的。这个特性被称为 “RDB快照时复制”（RDB Snapshotting）。</p><p>在 Redis 6.0 中，当进行 RDB 快照持久化时，Redis 会执行以下步骤来确保数据可修改：</p><ol><li>Redis 创建一个子进程。</li><li>在子进程中，将内存中的数据进行写时复制，创建出一个副本，而不会影响主进程的数据。</li><li>子进程将副本数据写入 RDB 文件，这个过程是在子进程的上下文中执行的，不会影响主进程。</li></ol><blockquote><p>这个操作在实际执行过程中，是子进程复制了主线程的页表，所以通过页表映射，能读到主线程的原始数据，而当有新数据写入或数据修改时，主线程会把新数据或修改后的数据写到一个新的物理内存地址上，并修改主线程自己的页表映射。所以，子进程读到的类似于原始数据的一个副本，而主线程也可以正常进行修改。</p></blockquote><p>因此，RDB 快照时，主进程仍然可以继续处理写操作，而子进程则负责将数据写入 RDB 文件。这样，写时复制技术确保了在生成 RDB 快照期间，数据是可修改的，同时保持了数据的一致性。</p><p>需要注意的是，这种特性仅适用于 Redis 6.0 及以上版本，并且在 RDB 快照时起作用。在生成 AOF 文件时，Redis 仍然会阻塞主线程以确保数据一致性。<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131501799.png" alt="写时复制机制保证快照期间数据可修改"></p><h2 id="可以每秒做一次快照吗"><a href="#可以每秒做一次快照吗" class="headerlink" title="可以每秒做一次快照吗"></a>可以每秒做一次快照吗</h2><p>虽然理论上可以每秒钟做一次快照（RDB持久化），但实际上这样做可能会对Redis服务器的性能产生显著的影响，特别是在负载较重的情况下。</p><p>每秒钟生成快照会引起以下一些问题：</p><ol><li><p><strong>性能开销：</strong> 快照操作需要遍历内存中的所有数据，并将数据序列化到磁盘中。频繁的快照操作会占用大量的CPU和内存资源，影响服务器的性能，导致响应时间变长。</p></li><li><p><strong>IO压力：</strong> 每秒钟生成的快照会导致频繁的磁盘写入，增加了磁盘IO的负担，可能影响其他应用程序和操作系统的正常运行。</p></li><li><p><strong>数据丢失：</strong> 每秒钟生成的快照可能会导致数据丢失，因为生成快照的操作需要一定的时间，如果在两次快照之间发生了写操作，那么这段时间内的数据会丢失。</p></li></ol><p>通常情况下，每秒钟生成快照并<strong>不是一个推荐的做法</strong>。更合理的做法是根据业务需求和系统资源来选择合适的持久化频率。如果数据的一致性要求很高，可以考虑使用AOF持久化机制，它可以在不同程度上提供数据的保护和持久性，而且可以通过设置不同的写回策略来平衡性能和数据保护。如果数据的一致性要求相对较低，可以选择适当的RDB持久化频率，避免频繁的IO和性能开销。</p><h1 id="为什么推荐AOF和RDB混合使用"><a href="#为什么推荐AOF和RDB混合使用" class="headerlink" title="为什么推荐AOF和RDB混合使用"></a>为什么推荐AOF和RDB混合使用</h1><p>推荐在Redis中同时使用AOF（Append-Only File）持久化和RDB（Redis DataBase）持久化的原因是，这两种持久化机制可以相互补充，提供更好的数据保护、恢复能力和性能优化。</p><p>以下是推荐同时使用AOF和快照的主要原因：</p><ol><li><p><strong>数据恢复能力：</strong> AOF持久化记录了所有写操作的日志，这使得在发生意外情况时（如服务器崩溃）可以精确地恢复数据到崩溃前的状态。而RDB持久化通过全量快照提供了快速的数据恢复能力。结合使用两者，可以在AOF日志的基础上，通过加载最近的RDB快照来加速恢复。</p></li><li><p><strong>数据安全性：</strong> AOF持久化记录了每个写操作，可以确保每个写操作都被持久化到日志中。RDB持久化则提供了一个点对点的数据备份。同时使用这两种持久化机制可以提供更高的数据安全性。</p></li><li><p><strong>性能优化：</strong> AOF持久化对于读操作的性能影响较小，因为读操作不涉及AOF文件的写入。而RDB持久化对于快速的全量数据恢复很有帮助。通过结合使用AOF和RDB，可以在一定程度上平衡数据保护和性能要求。</p></li><li><p><strong>多层次的备份：</strong> 使用AOF和RDB，您可以获得多层次的数据备份。AOF日志可以提供精确的操作日志，RDB快照可以提供全量备份。这样，即使其中一个持久化机制出现问题，另一个仍然可以提供数据保护。</p></li></ol><p>综上所述，使用AOF和RDB两种持久化机制的组合，能够提供更全面的数据保护、灾难恢复和性能优化。在配置Redis持久化时，根据业务需求和性能要求，结合使用这两种机制，可以实现更好的数据管理和保护。</p><h2 id="如何配置呢"><a href="#如何配置呢" class="headerlink" title="如何配置呢"></a>如何配置呢</h2><p>在 Redis 中，同时使用 AOF 持久化和 RDB 持久化的配置是很常见的，这样可以兼顾数据的持久性和恢复性能。以下是一个将 AOF 持久化和 RDB 持久化混合使用的示例配置：</p><ol><li><p>打开 Redis 配置文件，通常是 <code>redis.conf</code>。</p></li><li><p>启用 AOF 持久化：<br>找到以下行并确保其被设置为以下值，以启用 AOF 持久化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>设置 AOF 重写策略（可选）：<br>可以设置 AOF 重写的触发条件，以便控制 AOF 文件的大小和写入频率。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure></li><li><p>启用 RDB 持久化：<br>默认情况下，Redis 会使用 RDB 持久化，但要确保以下行没有被注释掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li><li><p>设置 RDB 快照文件名（可选）：<br>如果希望为 RDB 快照指定特定的文件名，可以添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><p>这会将 RDB 快照文件命名为 <code>dump.rdb</code>。</p></li><li><p>设置 RDB 快照保存路径（可选）：<br>如果希望将 RDB 快照保存到特定的路径，可以添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /path/to/rdb/directory</span><br></pre></td></tr></table></figure><p>这会将 RDB 快照保存到指定的目录。</p></li><li><p>重启 Redis 服务器：<br>在对配置文件进行更改后，需要重新启动 Redis 服务器，以使配置生效。</p></li></ol><p>使用以上配置，Redis 将同时使用 AOF 持久化和 RDB 持久化，提供了多层次的数据保护和恢复机制。AOF 持久化记录写操作，提供操作日志用于数据恢复。RDB 持久化提供了全量备份，用于快速恢复整个数据集。混合使用这两种机制可以充分利用它们各自的优点，提供更全面的数据持久性和保护。</p><h1 id="关于AOF和RDB的选择，三点建议"><a href="#关于AOF和RDB的选择，三点建议" class="headerlink" title="关于AOF和RDB的选择，三点建议"></a>关于AOF和RDB的选择，三点建议</h1><ul><li>数据不能丢失时，内存快照和 AOF 的混合使用是一个很好的选择；</li><li>如果允许分钟级别的数据丢失，可以只使用 RDB；</li><li>如果只用 AOF，优先使用 everysec 的配置选项，因为它在可靠性和性能之间取了一个平衡。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RDB </tag>
            
            <tag> AOF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列（一）：深入了解Redis数据类型和底层数据结构</title>
      <link href="/2023/08/12/Redis%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/08/12/Redis%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Redis有以下几种常用的数据类型：</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/image.png"></p><h2 id="redis数据是如何组织的"><a href="#redis数据是如何组织的" class="headerlink" title="redis数据是如何组织的"></a>redis数据是如何组织的</h2><p>为了实现从键到值的快速访问，Redis 使用了一个哈希表来保存所有键值对。</p><p>Redis全局哈希表（Global Hash Table）是指在Redis数据库内部用于存储所有键值对的主要数据结构。它的实现原理涉及到哈希表、字典、渐进式rehash等技术，以下是Redis全局哈希表的实现原理和查询流程：</p><p><strong>实现原理：</strong></p><ol><li><p><strong>哈希表（Hash Table）：</strong></p><p> Redis的全局哈希表是由多个哈希表构成的，每个哈希表称为一个数据库（DB）。数据库的数量可以通过配置进行设置，默认是16个。每个数据库都是一个独立的哈希表，负责存储键值对。</p></li><li><p><strong>字典（Dictionary）：</strong></p><p> 每个数据库都使用字典（Dictionary）来实现键值对的存储。字典是一种高效的键值对存储结构，它使用哈希表来支持快速的查找、插入和删除操作。</p></li><li><p><strong>渐进式rehash：</strong></p><p> 当数据库的键值对数量较多时，为了保持查询性能，Redis会在不中断服务的情况下，逐步将旧的数据库哈希表中的数据迁移到新的数据库哈希表中，这个过程叫做渐进式rehash。这样，Redis能够平滑地将数据从旧的哈希表迁移到新的哈希表，避免大规模的数据迁移对性能造成影响。</p></li></ol><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121104358.png"></p><p><strong>查询流程：</strong></p><ol><li>客户端发送查询命令，指定要查询的键。</li><li>Redis会根据键通过哈希函数计算哈希槽（hash slot）的索引，确定键在哪个数据库中。</li><li>Redis根据数据库的哈希表，找到对应的字典。</li><li>在字典中，Redis使用键进行查找，通过哈希表查找对应的值。如果找到了值，则将其返回给客户端。</li><li>如果键在当前数据库没有找到对应的值，Redis可以根据需要进行跳转到其他数据库（例如在Redis集群中）。</li></ol><p>整个查询流程涉及到多次哈希计算和哈希表查找，这使得Redis能够在平均时间复杂度为O(1)的情况下，高效地进行键值对的查询操作。由于Redis的全局哈希表是一个核心组件，其优化和设计对于保障Redis的性能和可用性非常重要。</p><p>如果你只是了解了哈希表的 O(1) 复杂度和快速查找特性，那么，当你往 Redis 中写入大量数据后，就可能发现操作有时候会突然变慢了。这其实是因为你忽略了一个潜在的风险点，那就是哈希表的冲突问题和 rehash 可能带来的操作阻塞。</p><p><strong>为什么哈希表操作变慢了？</strong></p><p>Redis 解决哈希冲突的方式，就是链式哈希。链式哈希也很容易理解，就是指同一个哈希桶中的多个元素用一个链表来保存，它们之间依次用指针连接。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121106905.png"></p><p>哈希冲突是指在使用哈希函数将键映射到哈希表中的索引时，两个或多个键被映射到相同的索引位置。在Redis中，哈希表是通过哈希函数将键映射到一个固定数量的桶（bucket）中的。</p><p>Redis使用MurmurHash2算法作为默认的哈希函数，它是一种快速且低碰撞率的哈希函数。然而，即使使用了高质量的哈希函数，仍然存在哈希冲突的可能性。</p><p>当发生哈希冲突时，Redis使用链地址法（chaining）来解决。具体来说，每个桶中存储的是一个链表，链表中的每个节点都包含了键值对。当多个键被映射到同一个桶时，它们会被添加到链表中，形成一个键值对的集合。</p><p>当执行哈希表的读取操作时，Redis会遍历链表，直到找到匹配的键值对或者链表结束。这个过程的时间复杂度取决于链表的长度，因此，如果哈希冲突较多，链表会变得很长，导致读取操作的性能下降。</p><p><strong>为了减少哈希冲突的发生，可以采取以下措施：</strong></p><ol><li>使用更好的哈希函数：选择一个更具随机性和低碰撞率的哈希函数，可以减少哈希冲突的概率。</li><li>扩大哈希表的大小：增加哈希表的桶数量，可以分散键的分布，减少哈希冲突的可能性。</li><li>使用一致性哈希算法：一致性哈希算法可以将键均匀地映射到多个节点上，减少单个节点上的哈希冲突。</li></ol><p>哈希冲突是不可避免的，但可以通过选择合适的哈希函数和调整哈希表的大小来减少其发生的概率，并且Redis的链地址法能够有效地解决哈希冲突带来的问题。</p><p>但是，这里依然存在一个问题，哈希冲突链上的元素只能通过指针逐一查找再操作。如果哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。对于追求“快”的 Redis 来说，这是不太能接受的。</p><p>所以，Redis 会对哈希表做 rehash 操作。rehash 也就是增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。</p><p><strong>那具体怎么做rehash呢？</strong></p><p>Redis的rehash是指在哈希表扩容或缩小时，重新计算并重新分配所有键值对的过程。rehash的目的是为了保持哈希表的负载因子在一个合理的范围内，以提高哈希表的性能。</p><p>在Redis中，rehash是一个渐进式的过程，它不会一次性地将所有键值对重新分配到新的哈希表中，而是分多次进行，每次处理一小部分键值对。这种渐进式的rehash过程可以保证在rehash期间，Redis仍然可以正常处理读取和写入操作，不会阻塞客户端请求。</p><p><strong>具体的rehash过程</strong>如下：</p><ol><li>Redis会创建一个新的空哈希表，大小是当前哈希表的两倍（或更小，如果是缩小操作）。</li><li>Redis会将当前哈希表的rehashidx属性设置为0，表示rehash的起始位置。</li><li>在每次执行读取或写入操作时，Redis会同时对当前哈希表和新哈希表进行操作。</li><li>对于读取操作，Redis首先在当前哈希表中查找键值对，如果找不到，则继续在新哈希表中查找。</li><li>对于写入操作，Redis会将新的键值对添加到新哈希表中，同时保留当前哈希表中的键值对。</li><li>在每次执行完一定数量的操作后，Redis会逐步将当前哈希表中的键值对迁移到新哈希表中，直到迁移完成。</li><li>最后，Redis会将新哈希表设置为当前哈希表，并释放旧的哈希表的内存空间。</li></ol><p>通过<strong>渐进式的rehash过程</strong>，Redis可以平滑地将键值对从旧哈希表迁移到新哈希表，避免了一次性的大规模迁移带来的性能问题。同时，由于读取操作可以同时在两个哈希表中进行，所以即使在rehash过程中，Redis仍然可以提供正常的读取服务。</p><p>需要注意的是，rehash过程是一个相对耗时的操作，特别是在哈希表中存储了大量键值对的情况下。因此，在进行rehash时，应该避免对Redis进行大量的写入操作，以免影响性能。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121115732.png"></p><h2 id="底层实现复杂度总结"><a href="#底层实现复杂度总结" class="headerlink" title="底层实现复杂度总结"></a>底层实现复杂度总结</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121119851.png"></p><h2 id="一、字符串（String）"><a href="#一、字符串（String）" class="headerlink" title="一、字符串（String）"></a>一、字符串（String）</h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>字符串（String）类型在Redis中是最常用的数据类型之一，适用于以下场景：</p><ol><li>缓存：字符串类型可以用于缓存数据，例如缓存数据库查询结果、计算结果等。由于Redis的高性能和快速读写能力，使用字符串类型作为缓存可以大大提高系统的响应速度。</li><li>计数器：字符串类型可以用于实现计数器功能，例如统计网站的访问次数、用户的点赞数等。通过使用字符串类型的自增命令，可以方便地对计数器进行增加或减少操作。</li><li>分布式锁：字符串类型可以用于实现分布式锁，保证在分布式环境下的数据一致性和并发控制。通过设置一个唯一的字符串作为锁的值，并利用Redis的原子性操作，可以实现简单而高效的分布式锁机制。</li><li>会话管理：字符串类型可以用于存储用户的会话信息，例如用户登录状态、购物车内容等。通过将会话信息存储在字符串类型中，可以方便地进行读写操作，并且可以设置过期时间来自动清理过期的会话数据。</li><li>消息队列：字符串类型可以用于实现简单的消息队列，例如将消息内容作为字符串存储在Redis中，然后使用列表类型的命令进行消息的发布和订阅。</li><li>分布式缓存：字符串类型可以用于实现分布式缓存，例如将经过序列化的对象存储在字符串类型中，然后通过缓存命中来提高系统的性能和扩展性。</li></ol><h3 id="底层实现是什么"><a href="#底层实现是什么" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>当我们在Redis中存储字符串时，Redis使用了一种称为简单动态字符串（Simple Dynamic String，SDS）的数据结构来表示字符串。</p><p>SDS是Redis自己实现的一种字符串表示方式，相比于传统的C语言字符串，SDS具有许多优势和特点。</p><ol><li>动态调整大小：SDS可以根据字符串的长度动态调整内存大小。这意味着当我们向SDS中添加更多的字符时，SDS会自动分配更多的内存空间来容纳新的字符，而不需要手动管理内存分配和释放。这样可以避免频繁的内存重新分配操作，提高了性能。</li><li>O(1)时间复杂度的长度获取：SDS在内部维护了字符串的长度信息。因此，无论字符串的长度是多少，我们都可以在常数时间内获取字符串的长度，而不需要遍历整个字符串。这使得获取字符串长度的操作非常高效。</li><li>二进制安全：SDS可以存储任意二进制数据，而不仅仅局限于文本字符串。这意味着我们可以在SDS中存储包含空字符（’\0’）在内的任意二进制数据，而不会导致字符串的截断或错误解析。</li><li>缓冲区溢出保护：SDS在内部维护了字符串的长度信息，这使得Redis能够有效地防止缓冲区溢出的问题。当我们向SDS中添加新的字符时，Redis会检查是否有足够的空间来容纳新的字符，如果没有足够的空间，Redis会自动分配更多的内存空间，以避免溢出。</li><li>兼容C字符串：SDS可以通过转换函数与C字符串进行互相转换。这意味着我们可以在Redis中使用SDS来存储字符串，然后将其转换为C字符串，以便与现有的C代码进行交互。反之，我们也可以将C字符串转换为SDS，以便在Redis中使用更多的字符串操作功能。</li></ol><p>SDS的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> len;        <span class="comment">// 字符串的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">free</span>;       <span class="comment">// 未使用的字节长度</span></span><br><span class="line">    <span class="type">char</span> buf[];     <span class="comment">// 字符串的实际内容</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，<code>len</code>表示字符串的长度，<code>free</code>表示未使用的字节长度，<code>buf</code>是一个柔性数组，用于存储字符串的实际内容。</p><p>通过使用简单动态字符串作为底层数据结构，Redis能够高效地处理字符串操作，并提供了丰富的字符串操作命令和功能。这使得Redis成为一个强大的键值存储系统，可以用于各种不同的应用场景。作为新手，了解SDS的特点和结构将有助于你更好地理解和使用Redis中的字符串数据类型。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>要在Redis中使用字符串类型，你可以使用以下命令：</p><ol><li>设置字符串值：使用<code>SET</code>命令可以设置一个字符串键的值。例如，<code>SET key value</code>将键<code>key</code>的值设置为<code>value</code>。</li><li>获取字符串值：使用<code>GET</code>命令可以获取一个字符串键的值。例如，<code>GET key</code>将返回键<code>key</code>的值。</li><li>自增&#x2F;自减操作：使用<code>INCR</code>命令可以将一个字符串键的值自增1，使用<code>DECR</code>命令可以将一个字符串键的值自减1。例如，<code>INCR key</code>将键<code>key</code>的值增加1。</li><li>设置过期时间：使用<code>EXPIRE</code>命令可以为一个字符串键设置过期时间，单位为秒。例如，<code>EXPIRE key seconds</code>将键<code>key</code>的过期时间设置为<code>seconds</code>秒。</li><li>批量操作：使用<code>MSET</code>命令可以同时设置多个字符串键的值，使用<code>MGET</code>命令可以同时获取多个字符串键的值。</li><li>字符串拼接：使用<code>APPEND</code>命令可以将指定字符串追加到一个字符串键的值的末尾。</li><li>其他操作：Redis还提供了许多其他的字符串操作命令，如获取子字符串、获取字符串长度、设置指定位置的字符等。</li></ol><p>以下是一些示例命令的用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET name <span class="string">&quot;John&quot;</span>          // 设置键为name的值为<span class="string">&quot;John&quot;</span></span><br><span class="line">GET name                 // 获取键为name的值</span><br><span class="line">INCR counter             // 将键为counter的值自增1</span><br><span class="line">EXPIRE key 60            // 设置键为key的过期时间为60秒</span><br><span class="line">MSET key1 value1 key2 value2   // 同时设置多个键值对</span><br><span class="line">MGET key1 key2           // 同时获取多个键的值</span><br><span class="line">APPEND greeting <span class="string">&quot;, welcome!&quot;</span>   // 将<span class="string">&quot;, welcome!&quot;</span>追加到键greeting的值的末尾</span><br></pre></td></tr></table></figure><p>通过使用这些命令，你可以在Redis中灵活地操作字符串类型，实现各种功能和应用场景。记得在使用字符串类型时，根据具体需求选择合适的命令和参数，并注意处理异常情况和错误返回值。 </p><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的字符串类型时，有一些需要注意的地方：</p><ol><li>字符串长度限制：Redis的字符串类型最大可以存储512MB的数据。如果需要存储更大的数据，可以考虑使用Redis的其他数据类型或将数据分片存储。</li><li>数据类型转换：当使用字符串类型时，需要注意数据类型的转换。Redis的字符串类型是二进制安全的，可以存储任意二进制数据，但在使用时需要根据具体情况进行数据的序列化和反序列化。</li><li>过期时间设置：通过使用<code>EXPIRE</code>命令可以为字符串键设置过期时间，但需要注意过期时间的合理设置。过期时间过短可能导致频繁的数据失效和重新加载，过期时间过长可能导致数据过期不及时。</li><li>内存使用：由于Redis是内存数据库，使用字符串类型时需要注意内存的使用情况。特别是在存储大量字符串数据时，需要合理控制内存的分配和释放，避免出现内存溢出的问题。</li><li>并发操作：在多线程或多进程环境下使用字符串类型时，需要注意并发操作的问题。Redis提供了原子性操作命令，如自增、自减等，可以保证操作的原子性，但需要注意并发操作可能导致的数据竞争和一致性问题。</li><li>键的命名规范：为了避免键的冲突和混淆，建议在命名字符串键时使用有意义的、具有一定规范的命名方式，以便更好地管理和维护数据。</li><li>数据备份和持久化：Redis提供了数据持久化的机制，可以将数据保存到磁盘上，以防止数据丢失。在使用字符串类型时，可以考虑定期进行数据备份和持久化操作，以保证数据的安全性和可恢复性。</li></ol><p>总之，在使用Redis的字符串类型时，需要根据具体的应用场景和需求，合理选择命令和参数，并注意处理异常情况和错误返回值。同时，合理规划和管理数据，注意内存使用和并发操作，可以更好地利用Redis的字符串类型，提高系统的性能和可靠性。</p><h2 id="二、列表（List）"><a href="#二、列表（List）" class="headerlink" title="二、列表（List）"></a>二、列表（List）</h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><p>列表（List）类型在Redis中是一种非常常用的数据类型，适用于以下场景：</p><ol><li>消息队列：列表类型可以用于实现简单的消息队列。生产者可以使用<code>LPUSH</code>命令将消息添加到列表的头部，消费者可以使用<code>RPOP</code>命令从列表的尾部获取消息。这种方式可以实现先进先出（FIFO）的消息处理。</li><li>实时排行榜：列表类型可以用于实现实时排行榜。例如，可以使用<code>LPUSH</code>命令将用户的得分添加到列表中，然后使用<code>LPOP</code>命令获取排行榜的前几名。</li><li>任务队列：列表类型可以用于实现任务队列。生产者可以使用<code>LPUSH</code>命令将任务添加到列表的尾部，消费者可以使用<code>RPOP</code>命令从列表的头部获取任务。这种方式可以实现任务的分发和处理。</li><li>消息发布与订阅：列表类型可以用于实现简单的消息发布与订阅。生产者可以使用<code>LPUSH</code>命令将消息添加到列表的头部，订阅者可以使用<code>BLPOP</code>命令阻塞地从列表中获取消息。</li><li>历史记录：列表类型可以用于存储历史记录。例如，可以使用<code>LPUSH</code>命令将用户的浏览记录添加到列表中，然后使用<code>LRANGE</code>命令获取最近的浏览记录。</li></ol><h3 id="底层实现是什么-1"><a href="#底层实现是什么-1" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>当涉及到Redis中列表类型的底层实现时，有两种可能的数据结构：压缩列表（Ziplist）和双向链表（Doubly Linked List）。</p><ol><li><p>压缩列表（Ziplist）：</p><p> 压缩列表是一种紧凑的数据结构，用于存储较小的列表。它将多个列表元素紧密地存储在一起，以减少内存的使用。压缩列表的结构如下：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;zlbytes&gt;&lt;zltail&gt;&lt;zllen&gt;&lt;entry&gt;&lt;entry&gt;...&lt;entry&gt;&lt;zlend&gt;</span></span><br></pre></td></tr></table></figure><pre><code>- `&lt;zlbytes&gt;`：表示压缩列表的总字节数。- `&lt;zltail&gt;`：指向压缩列表的最后一个节点。- `&lt;zllen&gt;`：表示压缩列表中的元素数量。- `&lt;entry&gt;`：表示每个列表元素的存储形式，包括元素长度和元素内容。- `&lt;zlend&gt;`：表示压缩列表的结束标志。压缩列表的优势在于它可以在一定程度上减少内存的使用，并且对于较小的列表，它的性能比双向链表更好。但是，当列表的长度或元素的大小超过一定限制时，Redis会自动将压缩列表转换为双向链表。</code></pre><ol start="2"><li><p>双向链表（Doubly Linked List）：</p><p> 双向链表是一种常见的数据结构，用于存储列表元素。每个节点都包含一个指向前一个节点和后一个节点的指针。双向链表的结构如下：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;prev&gt;&lt;entry&gt;&lt;next&gt;</span></span><br></pre></td></tr></table></figure><pre><code>- `&lt;prev&gt;`：指向前一个节点的指针。- `&lt;entry&gt;`：表示节点中存储的列表元素。- `&lt;next&gt;`：指向后一个节点的指针。双向链表的优势在于它可以高效地进行插入、删除和遍历操作。通过指针，可以快速地在链表中移动，并且在任意位置插入或删除节点的开销较小。</code></pre><p>Redis在选择使用压缩列表还是双向链表作为列表的底层实现时，会根据以下两个因素进行判断：</p><ul><li>列表的长度：当列表的长度超过一定限制（默认为512个元素）时，Redis会将压缩列表转换为双向链表，以便更好地处理大型列表。</li><li>列表元素的大小：当列表中的元素大小超过一定限制（默认为64字节）时，Redis会将压缩列表转换为双向链表，以便更好地处理大型元素。</li></ul><p>转换时机是在执行插入或删除操作时进行检查的。如果列表满足转换条件，Redis会自动将压缩列表转换为双向链表，并将数据从压缩列表复制到新的双向链表中。这个转换过程可能会导致一些额外的内存开销，但它使得Redis能够更好地处理大型列表和大型元素。</p><p>通过使用压缩列表和双向链表作为底层实现，Redis的列表类型可以在不同的场景下提供高效的性能和灵活性。</p><h3 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h3><p>在Redis中，可以使用列表（List）类型进行以下操作：</p><ol><li>添加元素：<ul><li>使用<code>LPUSH key value</code>命令将一个或多个元素添加到列表的头部。</li><li>使用<code>RPUSH key value</code>命令将一个或多个元素添加到列表的尾部。</li></ul></li><li>弹出元素：<ul><li>使用<code>LPOP key</code>命令从列表的头部弹出并返回一个元素。</li><li>使用<code>RPOP key</code>命令从列表的尾部弹出并返回一个元素。</li></ul></li><li>获取元素：<ul><li>使用<code>LINDEX key index</code>命令获取列表中指定位置的元素。索引从0开始，负数表示从尾部开始计数。</li><li>使用<code>LRANGE key start stop</code>命令获取列表中指定范围的元素。范围包括起始位置和结束位置，负数表示从尾部开始计数。</li></ul></li><li>获取列表长度：<ul><li>使用<code>LLEN key</code>命令获取列表的长度。</li></ul></li><li>在指定元素前或后插入元素：<ul><li>使用<code>LINSERT key BEFORE|AFTER pivot value</code>命令在列表中指定元素的前或后插入一个元素。</li></ul></li><li>移除指定数量的元素：<ul><li>使用<code>LREM key count value</code>命令从列表中移除指定数量的匹配元素。</li></ul></li><li>获取并设置指定位置的元素：<ul><li>使用<code>LSET key index value</code>命令将列表中指定位置的元素设置为新的值，并返回旧的值。</li></ul></li><li>获取并移动元素：<ul><li>使用<code>RPOPLPUSH source destination</code>命令从一个列表的尾部弹出一个元素，并将它添加到另一个列表的头部。</li></ul></li><li>阻塞弹出元素：<ul><li>使用<code>BLPOP key1 key2 ... timeout</code>命令阻塞地从多个列表中弹出元素，直到有元素可弹出或超时。</li></ul></li></ol><p>这些是列表类型的一些常用操作，可以根据具体的需求选择适合的命令来操作列表。列表类型在Redis中非常灵活和多用途，适用于各种场景，包括消息队列、排行榜、任务队列、消息发布与订阅、历史记录等。</p><h3 id="需要注意的地方-1"><a href="#需要注意的地方-1" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis中的列表数据类型时，有一些注意事项和最佳实践，特别是对于新手来说。以下是一些使用Redis列表时需要注意的地方：</p><ol><li><p><strong>插入顺序和重复：</strong></p><p> 列表是有序的数据结构，插入的元素按照插入的顺序排列。允许插入重复的元素，因此列表可以作为一个简单的数据结构来实现队列或栈。</p></li><li><p><strong>左右插入操作：</strong></p><p> Redis提供了 <code>LPUSH</code> 和 <code>RPUSH</code> 命令来在列表的左侧和右侧插入元素。左侧插入类似于栈的操作，右侧插入类似于队列的操作。</p></li><li><p><strong>范围操作：</strong></p><p> 使用 <code>LRANGE</code> 命令可以获取列表中的一定范围的元素。这对于分页显示、获取最近的数据等场景非常有用。</p></li><li><p><strong>修剪列表：</strong></p><p> 使用 <code>LTRIM</code> 命令可以修剪列表，只保留指定范围的元素，其余的元素会被删除。</p></li><li><p><strong>列表长度：</strong></p><p> 使用 <code>LLEN</code> 命令可以获取列表的长度。</p></li><li><p><strong>弹出元素：</strong></p><p> 使用 <code>LPOP</code> 和 <code>RPOP</code> 命令可以从列表的左侧和右侧弹出一个元素。这可以用于实现队列和栈的行为。</p></li><li><p><strong>阻塞操作：</strong></p><p> Redis还提供了阻塞版本的弹出操作，例如 <code>BLPOP</code> 和 <code>BRPOP</code>，这些命令可以在列表为空时阻塞等待新元素的到来。</p></li><li><p><strong>遍历操作：</strong></p><p> Redis并没有直接提供像迭代器一样的遍历机制，因此如果需要遍历列表，需要自己实现。</p></li><li><p><strong>内存注意：</strong></p><p> 列表虽然很方便，但随着元素的增加，内存占用也会增加。在插入大量元素时要注意内存消耗。</p></li><li><p><strong>不适合大型列表：</strong></p><p>Redis的列表是基于链表实现的，对于大型列表的随机访问效率较低，如果需要频繁的随机访问，请考虑其他数据结构。</p></li><li><p><strong>避免滥用：</strong></p><p>列表适用于有序插入和删除的场景，但不适合用作集合数据的存储。如果需要集合操作，可以考虑使用集合（Set）数据类型。</p></li></ol><p>总之，使用Redis列表时需要根据具体的业务需求和场景来选择。了解Redis列表的特点和限制，可以帮助你更好地规划和使用这一数据类型。</p><h2 id="三、集合（Set）"><a href="#三、集合（Set）" class="headerlink" title="三、集合（Set）"></a>三、集合（Set）</h2><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><p>Redis的Set数据类型是一个无序的字符串集合，它可以存储多个不重复的元素。Set在Redis中有许多实际的使用场景，以下是一些常见的使用场景：</p><ol><li><p><strong>唯一性数据存储：</strong></p><p> 最基本的使用场景就是用来存储不重复的数据。你可以使用Set来存储用户ID、IP地址、邮箱地址等，确保数据的唯一性。</p></li><li><p><strong>标签和标记系统：</strong></p><p> Set可以用于创建标签或标记系统。例如，你可以为文章、商品或其他实体创建一个包含相关标签的Set，以便后续快速检索。</p></li><li><p><strong>关注和粉丝系统：</strong></p><p> 在社交媒体或用户关系管理中，Set可以用来实现关注和粉丝系统。每个用户可以有一个Set，其中包含他们关注的其他用户或粉丝。</p></li><li><p><strong>在线用户：</strong></p><p> Set可以用于跟踪在线用户。将用户ID添加到一个Set中，表示用户当前在线。通过检查Set中的成员，可以快速查找在线用户。</p></li><li><p><strong>投票系统：</strong></p><p> Set可以用于实现投票系统。每个投票项目可以表示为一个Set，用户投票时将其ID添加到相应的Set中，确保每个用户只能投一次。</p></li><li><p><strong>集合运算：</strong></p><p> Redis提供了多种Set运算，如交集、并集和差集。这些运算可以用于计算多个集合之间的共同元素、合并元素等。</p></li><li><p><strong>排行榜和排名：</strong></p><p> Set可以用于创建排行榜系统。例如，每个元素代表一个玩家，分数作为元素的权重。可以通过有序集合操作获取排名和排行。</p></li><li><p><strong>地理位置标记：</strong></p><p> Set可以用于存储地理位置数据，例如存储用户的经纬度坐标，然后利用Set运算来查找附近的位置。</p></li><li><p><strong>过滤重复事件：</strong></p><p> 如果你需要记录一系列事件，并且要确保事件不重复记录，可以使用Set来存储已经发生的事件，防止重复记录。</p></li></ol><p>总的来说，Redis的Set数据类型非常适合需要存储不重复数据、进行集合运算以及需要高效查找元素的场景。无论是在社交网络、实时分析、排行榜、地理位置服务等领域，Set都有着广泛的应用。</p><h3 id="底层实现是什么-2"><a href="#底层实现是什么-2" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>在Redis中，集合（Set）类型的底层实现有两种：哈希表（Hash Table）和跳跃表（Skip List）。</p><ol><li>哈希表（Hash Table）：哈希表是一种使用哈希函数将元素映射到桶（bucket）的数据结构。在Redis中，集合的每个元素都被存储在哈希表的一个桶中。哈希表提供了快速的插入、删除和查找操作，平均情况下的时间复杂度为O(1)。哈希表适用于存储大量元素的集合，并且对于查找操作的性能要求较高。</li><li>跳跃表（Skip List）：跳跃表是一种有序的数据结构，它通过多层链表的方式来提供快速的查找操作。每个节点都包含一个指向下一层和右侧节点的指针。在Redis中，集合的元素按照从小到大的顺序存储在跳跃表中。跳跃表提供了快速的插入、删除和范围查找操作，平均情况下的时间复杂度为O(log n)。跳跃表适用于有序集合的场景，或者对于范围查找操作的性能要求较高。</li></ol><p>在Redis中，当集合的元素数量较少时，底层实现会使用哈希表。当集合的元素数量增加到一定阈值时，Redis会自动将哈希表转换为跳跃表，以提供更好的性能和空间效率。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121117928.png"></p><p>Redis中的有序集合（Sorted Set）使用的是跳跃表（Skip List）数据结构来实现的。跳跃表是一种用于有序元素存储和检索的数据结构，它的设计使得有序集合的插入、删除和查找操作都能在平均情况下达到 O(log n) 的时间复杂度。</p><p><strong>跳跃表（Skip List）实现原理：</strong></p><ol><li><p><strong>多级索引：</strong></p><p> 跳跃表的核心思想是使用多级索引来加速查找操作。除了底层的链表结构，跳跃表还有多个级别的索引，每一级索引都是一个较小的有序链表，其中的节点包含指向下一级索引节点的指针。</p></li><li><p><strong>底层链表：</strong></p><p> 跳跃表的底层是一个有序链表，节点按照键的大小顺序排列。每个节点包含一个键和对应的值。</p></li><li><p><strong>多级索引节点：</strong></p><p> 跳跃表的多级索引节点也是有序链表，但是它的节点数目比底层链表少。每个多级索引节点都存储了指向底层链表中对应范围节点的指针。不同级别的索引通过链式连接在一起。</p></li><li><p><strong>节点的分布：</strong></p><p> 节点在不同级别的索引中以一定概率分布，使得跳跃表在查询时能够快速跳过一些不必要的节点，从而达到快速查找的效果。</p></li></ol><p><strong>跳跃表查询流程：</strong></p><ol><li>客户端发送查询命令，指定要查询的成员。</li><li>Redis会从顶级索引（最高级别）开始，逐级向右移动，查找每一级索引中的节点。</li><li>在每一级索引中，Redis会沿着链表移动，比较节点的键与要查找的成员的大小。</li><li>当找到第一个大于等于要查找成员的节点时，如果节点的键等于要查找的成员，查找成功；如果节点的键大于要查找的成员，就会进入下一级索引继续查找。</li><li>如果最底层链表中没有找到匹配的节点，那么查询失败，返回结果为空。</li></ol><p>跳跃表的设计使得它在有序集合中实现高效的查找、插入和删除操作，特别是对于范围查询等操作。通过多级索引和有序链表的结合，Redis的有序集合能够在平均情况下达到 O(log n) 的时间复杂度，从而保证了高性能的数据操作。</p><h3 id="如何使用-2"><a href="#如何使用-2" class="headerlink" title="如何使用"></a>如何使用</h3><p>Redis的Set是一种无序、不重复元素的数据结构，类似于数学上的集合。它支持添加、删除和查询元素，并且能够对多个集合进行交集、并集、差集等操作。下面是关于Redis Set的基本使用方法：</p><p><strong>1. 添加元素：</strong></p><p>使用 <code>SADD</code> 命令可以向一个Set中添加一个或多个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SADD myset value1 value2 value3</span><br></pre></td></tr></table></figure><p><strong>2. 删除元素：</strong></p><p>使用 <code>SREM</code> 命令可以从一个Set中删除一个或多个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SREM myset value1 value2</span><br></pre></td></tr></table></figure><p><strong>3. 判断元素是否存在：</strong></p><p>使用 <code>SISMEMBER</code> 命令可以判断一个元素是否存在于Set中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SISMEMBER myset value</span><br></pre></td></tr></table></figure><p><strong>4. 获取集合中的元素数量：</strong></p><p>使用 <code>SCARD</code> 命令可以获取一个Set中元素的数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCARD myset</span><br></pre></td></tr></table></figure><p><strong>5. 获取集合中的所有元素：</strong></p><p>使用 <code>SMEMBERS</code> 命令可以获取一个Set中的所有元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SMEMBERS myset</span><br></pre></td></tr></table></figure><p><strong>6. 集合操作：</strong></p><ul><li>并集：使用 <code>SUNION</code> 命令可以对多个Set进行并集操作。</li><li>交集：使用 <code>SINTER</code> 命令可以对多个Set进行交集操作。</li><li>差集：使用 <code>SDIFF</code> 命令可以对多个Set进行差集操作。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SUNION destination_set set1 set2</span><br><span class="line">SINTER destination_set set1 set2</span><br><span class="line">SDIFF destination_set set1 set2</span><br></pre></td></tr></table></figure><h3 id="需要注意的地方-2"><a href="#需要注意的地方-2" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的Set数据类型时，有一些注意事项和最佳实践可以帮助你更好地利用它。以下是使用Redis Set时需要注意的几个方面：</p><p><strong>1. 唯一性：</strong></p><p>Set是无序、不重复元素的集合。确保你向Set中添加的元素是唯一的，因为Set不会存储重复的值。</p><p><strong>2. 数据量：</strong></p><p>虽然Redis可以处理大量的数据，但仍需谨慎处理数据量较大的Set。当Set中的元素数量变得很大时，查询、插入和删除等操作的性能可能会受到影响。</p><p><strong>3. 考虑使用过期时间：</strong></p><p>可以为Set设置过期时间，让不再需要的数据自动过期，以释放内存资源。</p><p><strong>4. 避免大量的成员操作：</strong></p><p>在某些情况下，如果需要对Set中的大量成员进行操作（如删除），可能会影响性能。如果需要频繁进行大规模操作，可以考虑使用多个小规模的Set，而不是一个包含大量成员的Set。</p><p><strong>5. 集合操作注意事项：</strong></p><p>集合操作（如并集、交集、差集）可能会对性能产生一定影响，特别是在Set的成员数量较大时。在执行集合操作时，应该考虑其对性能的影响，并根据实际情况进行优化。</p><p><strong>6. 避免全量遍历：</strong></p><p>避免使用<code>SMEMBERS</code>等命令获取所有成员，因为在大数据集下会产生性能问题。如果需要遍历成员，可以考虑使用<code>SSCAN</code>命令进行分页式的遍历。</p><p><strong>7. 使用有序集合代替：</strong></p><p>如果你需要有序的集合，可以考虑使用有序集合（Sorted Set）数据类型，它可以同时提供有序性和唯一性，适用于排行榜、计分系统等场景。</p><p><strong>8. 持久化和备份：</strong></p><p>在重要的生产环境中，始终要考虑持久化和备份策略，以确保数据不会因为意外情况而丢失。</p><p>总之，在使用Redis的Set数据类型时，需要根据应用需求和数据量合理规划和优化。了解你的数据模型、数据量以及操作需求，可以帮助你更好地利用Redis的Set功能，并确保系统的性能和稳定性。</p><h2 id="四、有序集合（Sorted-Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。"><a href="#四、有序集合（Sorted-Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。" class="headerlink" title="四、有序集合（Sorted Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。"></a>四、有序集合（Sorted Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。</h2><h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h3><p>有序集合（Sorted Set）是Redis中的一种特殊数据类型，它在有序性和唯一性的基础上，为存储一组成员（元素）分配了一个分数（score）。这种数据结构使得有序集合在许多应用场景中非常有用。以下是一些适用场景：</p><p><strong>1. 排行榜和计分系统：</strong><br>有序集合非常适合实现排行榜和计分系统。成员的分数可以表示玩家的得分、评分、积分等。你可以通过分数对成员进行排序，快速地获取前几名的排名。</p><p><strong>2. 时间序列数据：</strong><br>如果你需要存储带有时间戳的数据，有序集合可以根据时间戳（作为分数）进行排序，然后按时间范围快速查询数据。</p><p><strong>3. 最新消息：</strong><br>有序集合可以用来存储最新的消息，每个消息的分数可以是消息的时间戳，这样可以方便地获取最新的消息。</p><p><strong>4. 带权重的标签&#x2F;标签云：</strong><br>在社交网络或标签系统中，你可以使用有序集合来存储标签，成员是标签，分数可以表示标签的热度、权重等。这可以用来实现标签云、热门标签等功能。</p><p><strong>5. 范围查询：</strong><br>有序集合允许根据分数范围进行查询，从而可以快速地获取在某个分数范围内的成员。</p><p><strong>6. 唯一性：</strong><br>有序集合保持了成员的唯一性，这意味着你可以方便地存储和查询不重复的元素。</p><p><strong>7. 高级集合运算：</strong><br>Redis提供了对有序集合的集合运算（交集、并集、差集）操作，这可以用来实现多个数据集的交叉分析、数据筛选等。</p><p><strong>8. 范围分页：</strong><br>使用<code>ZRANGE</code>等命令，可以对有序集合进行分页查询，获取指定范围内的成员。</p><p>总之，有序集合适用于需要保持元素有序性、需要快速进行范围查询、具有权重或分数的情况。它在多个场景中都提供了高效的数据存储和操作，使得Redis成为了解决这些问题的有力工具。</p><h3 id="底层实现是什么-3"><a href="#底层实现是什么-3" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>Redis的有序集合（Sorted Set）底层的实现采用了跳跃表（Skip List）和哈希表（Hash Table）的结合。这种设计使得有序集合既能在保持有序性的同时，也能够高效地执行添加、删除、查询等操作。</p><p><strong>跳跃表（Skip List）：</strong><br>跳跃表是用来维护有序集合中的成员的。在有序集合中，每个成员都有一个分数（score），而跳跃表则根据这个分数来排序成员。跳跃表通过多级索引，可以在平均情况下实现 O(log n) 的插入、删除和查询操作。</p><p><strong>哈希表（Hash Table）：</strong><br>有序集合在存储成员和分数之间的映射关系时，使用了哈希表。每个成员都会在哈希表中对应一个键值对，其中键是成员，值是分数。通过哈希表，Redis可以在 O(1) 时间内查找某个成员的分数。</p><p><strong>结合使用的方式：</strong><br>有序集合的每个元素在底层的哈希表中存储着成员和分数的映射关系，同时在跳跃表中存储了成员的排序信息。通过这种方式，Redis可以在跳跃表中按照成员的分数顺序快速地进行范围查询，而在哈希表中通过成员快速查找分数。</p><p>这种底层实现结合了跳跃表和哈希表的优点，使得Redis有序集合能够同时满足有序性和高效性的需求。这种设计让有序集合在插入、删除、查询和范围操作等场景下都能表现出色。</p><h3 id="如何使用-3"><a href="#如何使用-3" class="headerlink" title="如何使用"></a>如何使用</h3><p>  使用Redis的有序集合（Sorted Set）需要掌握一些基本命令和操作。以下是一些常见的有序集合操作示例：</p><p>  <strong>1. 添加成员：</strong></p><p>  使用 <code>ZADD</code> 命令可以向有序集合中添加成员，同时指定成员的分数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZADD myset 10 member1</span><br><span class="line">ZADD myset 20 member2</span><br></pre></td></tr></table></figure><p>  <strong>2. 获取成员分数：</strong></p><p>  使用 <code>ZSCORE</code> 命令可以获取指定成员的分数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSCORE myset member1</span><br></pre></td></tr></table></figure><p>  <strong>3. 获取成员排名：</strong></p><p>  使用 <code>ZRANK</code> 命令可以获取指定成员在有序集合中的排名（从0开始）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANK myset member2</span><br></pre></td></tr></table></figure><p>  <strong>4. 获取分数范围内的成员：</strong></p><p>  使用 <code>ZRANGEBYSCORE</code> 命令可以获取指定分数范围内的成员列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE myset 15 25</span><br></pre></td></tr></table></figure><p>  <strong>5. 获取排名范围内的成员：</strong></p><p>  使用 <code>ZRANGE</code> 命令可以获取指定排名范围内的成员列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGE myset 0 2</span><br></pre></td></tr></table></figure><p>  <strong>6. 删除成员：</strong></p><p>  使用 <code>ZREM</code> 命令可以从有序集合中删除一个或多个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREM myset member1</span><br></pre></td></tr></table></figure><p>  <strong>7. 获取成员数量：</strong></p><p>  使用 <code>ZCARD</code> 命令可以获取有序集合中成员的数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZCARD myset</span><br></pre></td></tr></table></figure><p>  <strong>8. 集合操作：</strong></p><ul><li>并集：使用 <code>ZUNIONSTORE</code> 命令可以对多个有序集合进行并集操作。</li><li>交集：使用 <code>ZINTERSTORE</code> 命令可以对多个有序集合进行交集操作。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZUNIONSTORE destination_set 2 set1 set2 WEIGHTS 1 2</span><br><span class="line">ZINTERSTORE destination_set 2 set1 set2 WEIGHTS 0.5 0.5</span><br></pre></td></tr></table></figure><p>  这只是有序集合的基本操作，你还可以使用其他命令进行更复杂的操作，如获取成员排名、计算分数之差等。使用有序集合时，要根据实际需求选择合适的命令和操作，以充分利用其有序性和高效性。</p><h3 id="需要注意的地方-3"><a href="#需要注意的地方-3" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的有序集合（Sorted Set）时，有一些注意事项可以帮助你避免一些常见的问题，以及优化性能和数据管理。以下是一些需要注意的地方：</p><p><strong>1. 成员的唯一性：</strong><br>有序集合的成员是唯一的，重复的成员不会被插入。确保你向有序集合中添加的成员是唯一的，以免出现预期之外的数据情况。</p><p><strong>2. 分数的重复性：</strong><br>虽然成员是唯一的，但是不同成员之间的分数可以是重复的。这在一些场景中是正常的，但需要根据具体需求处理。</p><p><strong>3. 数据量：</strong><br>尽管有序集合可以处理大量的数据，但仍需谨慎处理数据量较大的有序集合。大数据集合可能会影响性能和内存使用。</p><p><strong>4. 分数范围：</strong><br>在进行范围查询时，确保分数范围是合理的。大范围查询可能会消耗较多的计算资源。</p><p><strong>5. 数据结构选择：</strong><br>有序集合适用于需要有序性的场景，但不适合用于仅仅需要存储唯一性成员的情况。对于仅需要唯一性的数据，使用集合（Set）数据类型更合适。</p><p><strong>6. 集合操作的影响：</strong><br>在执行集合操作（并集、交集、差集）时，考虑其对性能的影响。集合操作可能会消耗更多的计算资源，特别是在有大量成员的情况下。</p><p><strong>7. 选择适当的分数类型：</strong><br>分数可以是整数或浮点数。根据实际需求，选择适合的分数类型。</p><p><strong>8. 性能和内存优化：</strong><br>合理使用Redis的配置参数，考虑分片、持久化、内存管理等策略，以优化性能和内存使用。</p><p><strong>9. 避免全量遍历：</strong><br>避免使用<code>ZRANGE</code>等命令获取所有成员，特别是在大数据集合中。考虑使用<code>ZSCAN</code>进行分页式遍历。</p><p><strong>10. 持久化和备份：</strong><br>在重要的生产环境中，考虑持久化和备份策略，以防止数据丢失。</p><p><strong>11. 内存占用：</strong><br>有序集合会占用一定的内存，要注意监控和管理内存使用，防止内存溢出。</p><p>总之，使用Redis的有序集合时，要根据实际需求合理规划和优化，以保证系统的性能和稳定性。</p><h2 id="五、哈希表（Hash）"><a href="#五、哈希表（Hash）" class="headerlink" title="五、哈希表（Hash）"></a>五、哈希表（Hash）</h2><h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h3><p>Redis的哈希表（Hash）是一种存储键值对的数据结构，其中的键是唯一的，而值则可以是字符串、整数、浮点数等。哈希表适用于许多场景，特别是需要存储和查询多个字段的情况。以下是一些适用场景：</p><p><strong>1. 存储对象信息：</strong><br>如果你需要存储一个对象的多个字段信息，例如用户信息（用户名、年龄、邮箱等），可以使用哈希表来存储每个用户的字段信息。</p><p><strong>2. 缓存数据：</strong><br>哈希表适用于缓存大量的键值对数据，例如缓存数据库查询结果，以减少数据库的访问频率。</p><p><strong>3. 存储配置信息：</strong><br>将配置信息存储在哈希表中，可以方便地获取和修改配置项，而无需在内存中存储多个单独的键。</p><p><strong>4. 计数器：</strong><br>可以使用哈希表来实现计数器功能，每个字段存储一个计数，比如网站的点赞数、阅读数等。</p><p><strong>5. 存储多种属性：</strong><br>如果你需要为一组对象存储多种属性，例如商品的名称、价格、库存等，可以使用哈希表来存储每个商品的多个属性。</p><p><strong>6. 联合索引：</strong><br>在关系型数据库中，联合索引常用于加速多字段的查询。在Redis中，可以使用哈希表来存储多个字段，并通过一个字段作为主键，实现类似的联合索引效果。</p><p><strong>7. 实时统计：</strong><br>哈希表可以用于实时统计信息，例如统计用户每天的登录次数、订单数等。</p><p><strong>8. 用户会话：</strong><br>可以使用哈希表来存储用户会话信息，每个字段存储一个会话属性，如用户ID、登录时间、过期时间等。</p><p><strong>9. 图数据结构：</strong><br>如果需要实现图数据结构，例如社交网络关系图，可以使用哈希表来表示节点和边。</p><p><strong>10. 多字段查询：</strong><br>哈希表适用于存储多个字段，可以更快速地查询和更新多个字段的值。</p><p>总之，哈希表适用于需要存储多个字段信息的情况，可以在一次查询中获取和更新多个字段，从而提高了数据的访问效率。它在多种应用场景中都能发挥作用，特别是需要存储和操作多个属性的数据。</p><h3 id="底层实现是什么-4"><a href="#底层实现是什么-4" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>Redis的哈希表（Hash）数据类型在底层的实现上是使用哈希表（Hash Table）来存储键值对的。哈希表是一种非常高效的数据结构，它能够在平均情况下以 O(1) 的时间复杂度进行插入、删除和查询操作。下面是Redis哈希表底层实现的一些细节：</p><p><strong>1. 散列函数（Hash Function）：</strong><br>在哈希表中，键通过散列函数计算得到一个哈希值（hash），这个哈希值被用作数组（桶）的索引。Redis使用MurmurHash2等散列函数来均匀地将键分散到不同的桶中。</p><p><strong>2. 桶数组：</strong><br>哈希表底层维护了一个桶数组，每个桶中存储了一个或多个键值对。这个数组的大小通常会动态调整，以保证桶的填充因子不会过高。</p><p><strong>3. 冲突处理：</strong><br>由于不同的键可能会经过散列函数映射到同一个桶中，这就产生了冲突。Redis使用链式解决冲突的方法，每个桶中可以存储一个链表，当有多个键映射到同一个桶时，它们会按照插入顺序形成链表。</p><p><strong>4. 动态扩容：</strong><br>当哈希表中的元素数量逐渐增加时，Redis会根据负载因子动态扩容桶数组，以保持桶的填充因子在一个合适的范围内。这可以保证插入、删除和查询操作的高效性。</p><p><strong>5. 迁移：</strong><br>在扩容时，Redis会将原有的键值对重新散列到新的桶数组中。这个过程称为“迁移”，它会在后台进行，以免影响正常的读写操作。</p><p><strong>6. 哈希表的嵌套：</strong><br>在Redis的源码中，哈希表本身也可以被嵌套使用，这种嵌套的哈希表常常用于实现数据类型的复杂结构，例如用于存储集合和有序集合等。</p><p>综上所述，Redis的哈希表底层是通过散列函数、桶数组、链式解决冲突等机制来实现的。这种设计使得Redis能够高效地存储和查询键值对数据，哈希表在Redis中扮演着非常重要的角色。</p><h3 id="如何使用-4"><a href="#如何使用-4" class="headerlink" title="如何使用"></a>如何使用</h3><p>使用Redis的哈希表（Hash）数据类型涉及一系列命令，这些命令可以帮助你对哈希表中的键值对进行添加、查询、删除等操作。以下是一些常见的哈希表操作示例：</p><p><strong>1. 添加键值对：</strong></p><p>使用 <code>HSET</code> 命令可以向哈希表中添加一个键值对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HSET user:id123 name <span class="string">&quot;John&quot;</span> age 30</span><br></pre></td></tr></table></figure><p><strong>2. 获取单个键的值：</strong></p><p>使用 <code>HGET</code> 命令可以获取指定键的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGET user:id123 name</span><br></pre></td></tr></table></figure><p><strong>3. 获取多个键的值：</strong></p><p>使用 <code>HMGET</code> 命令可以同时获取多个键的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMGET user:id123 name age</span><br></pre></td></tr></table></figure><p><strong>4. 获取所有键值对：</strong></p><p>使用 <code>HGETALL</code> 命令可以获取哈希表中所有的键值对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGETALL user:id123</span><br></pre></td></tr></table></figure><p><strong>5. 增加或更新键的值：</strong></p><p>使用 <code>HINCRBY</code> 命令可以为键的值增加一个整数。如果键不存在，会创建一个新的键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HINCRBY user:id123 age 1</span><br></pre></td></tr></table></figure><p><strong>6. 删除键值对：</strong></p><p>使用 <code>HDEL</code> 命令可以从哈希表中删除一个或多个键值对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HDEL user:id123 age</span><br></pre></td></tr></table></figure><p><strong>7. 获取所有键或值：</strong></p><p>使用 <code>HKEYS</code> 命令可以获取哈希表中所有的键，使用 <code>HVALS</code> 命令可以获取哈希表中所有的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKEYS user:id123</span><br><span class="line">HVALS user:id123</span><br></pre></td></tr></table></figure><p><strong>8. 获取键值对数量：</strong></p><p>使用 <code>HLEN</code> 命令可以获取哈希表中键值对的数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HLEN user:id123</span><br></pre></td></tr></table></figure><p><strong>9. 检查键是否存在：</strong></p><p>使用 <code>HEXISTS</code> 命令可以检查指定键是否存在于哈希表中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEXISTS user:id123 name</span><br></pre></td></tr></table></figure><p>这些只是哈希表的基本操作，你还可以使用其他命令来进行更高级的操作，如迭代、批量添加、获取字段数量等。在使用哈希表时，要根据实际需求选择合适的命令和操作，以充分利用其灵活性和高效性。</p><h3 id="需要注意的地方-4"><a href="#需要注意的地方-4" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的哈希表（Hash）数据类型时，有一些注意事项可以帮助你避免常见问题，优化性能，以及更好地管理数据。以下是一些需要注意的地方：</p><p><strong>1. 键的命名：</strong><br>选择有意义的键名，以便更好地区分不同的哈希表。避免过长或者冗余的键名，以减少内存占用。</p><p><strong>2. 数据量：</strong><br>虽然Redis可以处理大量的数据，但仍需谨慎处理大数据量的哈希表。大数据量可能会影响性能和内存使用。</p><p><strong>3. 单个哈希表的字段数量：</strong><br>虽然Redis能够高效地处理多个字段，但是如果单个哈希表中的字段数量非常多，可能会影响性能。如果需要存储大量的字段，考虑拆分成多个哈希表或其他数据结构。</p><p><strong>4. 复杂度：</strong><br>在哈希表中的字段数量不宜过多，以保持读写操作的高效性。过多的字段可能会增加内存消耗和操作复杂度。</p><p><strong>5. 适用场景：</strong><br>哈希表适用于存储和查询多个字段的情况。如果只需要存储单一的值或者简单的数据，考虑使用字符串（String）数据类型。</p><p><strong>6. 批量操作：</strong><br>如果需要一次操作多个键值对，使用批量操作命令如 <code>HMSET</code>，而不是多次使用单个键的操作命令。</p><p><strong>7. 缓存失效：</strong><br>设置适当的缓存失效时间，避免过期的键值对占用内存。</p><p><strong>8. 键值大小：</strong><br>如果哈希表中的字段值较大，考虑其对内存的影响。大字段值可能会增加内存占用。</p><p><strong>9. 深度嵌套：</strong><br>避免在哈希表中使用太多嵌套的键值对，这可能会增加查找和维护的复杂度。</p><p><strong>10. 数据持久化：</strong><br>对于重要的数据，考虑开启持久化以防止数据丢失。</p><p><strong>11. 数据备份：</strong><br>定期备份数据，以防止意外数据丢失。</p><p>总之，使用哈希表时，要根据实际需求合理规划和优化，以确保系统的性能和稳定性。考虑数据模型、数据量、操作频率等因素，以及根据需要选择合适的Redis配置和命令来使用哈希表。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 跳表 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 有序集合 </tag>
            
            <tag> Set </tag>
            
            <tag> List </tag>
            
            <tag> Hash </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyCode自动生成脚本</title>
      <link href="/2023/08/11/EasyCode%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/08/11/EasyCode%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>配合优化的项目架构，能够自动生成基础CURUD，实现10秒钟开发新业务接口</p><p><a href="https://brucege.com/doc/#/generateByTemplate">https://brucege.com/doc/#/generateByTemplate</a></p><p>EasyCode自动生成脚本是一个与优化项目架构配合的工具，能够快速生成基础CURUD操作，帮助开发人员在10秒钟内创建新的业务接口。本文介绍了如何使用EasyCode自动生成脚本，并展示了生成的Controller和Mapper类的示例代码。</p><h2 id="自动生成以下类，还有一个xml没截取到"><a href="#自动生成以下类，还有一个xml没截取到" class="headerlink" title="自动生成以下类，还有一个xml没截取到"></a>自动生成以下类，还有一个xml没截取到</h2><p><img src="C:/Users/Administrator/Downloads/b730d785-bbf2-4ef6-9a3f-b5aaccb981a6" alt="img"></p><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/b730d785-bbf2-4ef6-9a3f-b5aaccb981a6" alt="img"></p><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/b730d785-bbf2-4ef6-9a3f-b5aaccb981a6" title="image"></p><h2 id="生成的controller"><a href="#生成的controller" class="headerlink" title="生成的controller"></a>生成的controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.supervision.daily.outbound.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nari.core.basic.BasicController;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.model.IdLibraryChecklist;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.param.IdLibraryChecklistParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.view.IdLibraryChecklistView;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.transform.IdLibraryChecklistTransform;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.dto.IdLibraryChecklistDto;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.service.IdLibraryChecklistService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证照清单-路由管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt; 朱永胜 &lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-05-26 17:08:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;idLibraryChecklist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdLibraryChecklistController</span> <span class="keyword">extends</span> <span class="title class_">BasicController</span>&lt;IdLibraryChecklist, IdLibraryChecklistParam, IdLibraryChecklistView, IdLibraryChecklistDto, IdLibraryChecklistTransform&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成的mapper"><a href="#生成的mapper" class="headerlink" title="生成的mapper"></a>生成的mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.supervision.daily.outbound.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.model.IdLibraryChecklist;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.param.IdLibraryChecklistParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.dto.IdLibraryChecklistDto;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.basic.BasicDao;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageParam;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证照清单-SQL处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt; 朱永胜 &lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-05-26 17:08:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IdLibraryChecklistMapper</span> <span class="keyword">extends</span> <span class="title class_">BasicDao</span>&lt;IdLibraryChecklist, IdLibraryChecklistDto, IdLibraryChecklistParam&gt; &#123;</span><br><span class="line">    List&lt;IdLibraryChecklistDto&gt; <span class="title function_">selectPageRel</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> PageParam&lt;IdLibraryChecklistDto, IdLibraryChecklistParam&gt; page, <span class="meta">@Param(&quot;param&quot;)</span> IdLibraryChecklistParam param)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="一、将项目拷贝到该位置"><a href="#一、将项目拷贝到该位置" class="headerlink" title="一、将项目拷贝到该位置"></a>一、将项目拷贝到该位置</h3><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/4ea2b22d-414e-4bf6-9236-0a6468cacf6e" alt="image" title="image"></p><p>我们需要使用的是第三个模板</p><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/2c89ad74-2e9c-4f53-aa57-0f9e70f09d96" alt="image" title="image"></p><h3 id="二、安装插件"><a href="#二、安装插件" class="headerlink" title="二、安装插件"></a>二、安装插件</h3><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/2fc5d35f-b20b-45c8-b4ed-87508b866e26" alt="image" title="image"></p><h3 id="三、右键表，按照图示点击"><a href="#三、右键表，按照图示点击" class="headerlink" title="三、右键表，按照图示点击"></a>三、右键表，按照图示点击</h3><blockquote><p>如果你的idea没有配置db，请自行百度配置下</p></blockquote><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/14f8dab8-8520-4965-903d-a57e9c2b8dcb" alt="image" title="image"></p><h3 id="四、按照图示勾选即可"><a href="#四、按照图示勾选即可" class="headerlink" title="四、按照图示勾选即可"></a>四、按照图示勾选即可</h3><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/020af128-fded-441f-a5fa-e58b683cdced" alt="image" title="image"></p><p>总结： EasyCode自动生成脚本是一个强大的工具，可以极大地提高开发效率。通过简单的配置和几个简单的步骤，开发人员可以快速生成基础CURUD操作的代码，从而节省大量的开发时间和精力。生成的Controller和Mapper类示例代码展示了EasyCode的功能和灵活性，使开发人员能够轻松创建和管理业务接口。如果您想要提高开发效率并减少重复劳动，EasyCode自动生成脚本绝对是一个值得尝试的工具。</p>]]></content>
      
      
      
        <tags>
            
            <tag> EasyCode </tag>
            
            <tag> Idea </tag>
            
            <tag> 插件 </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java根据表名导出与导入Sql</title>
      <link href="/2023/08/10/%E4%BD%BF%E7%94%A8Java%E6%A0%B9%E6%8D%AE%E8%A1%A8%E5%90%8D%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5Sql/"/>
      <url>/2023/08/10/%E4%BD%BF%E7%94%A8Java%E6%A0%B9%E6%8D%AE%E8%A1%A8%E5%90%8D%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5Sql/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很粗糙啊，有很多可以优化的地方，而且也不安全，但是临时用还是OK的，我这个是公司里面的单机软件，不联网。</p><p>嗨！我是一名社交媒体增长黑客，很高兴能帮助您优化和丰富关于批量作业导出和导入的文章。这个主题相当技术性，但我会将其分解为易于理解的部分。让我们开始吧！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在当今快节奏的数字世界中，高效地导出和导入批量作业对于企业至关重要。批量作业操作涉及处理大量数据，拥有流畅的流程可以节省时间和精力。在本文中，我们将探讨一种基于Java的解决方案，可以让您无缝地导出和导入批量作业。</p><h2 id="导出批量作业"><a href="#导出批量作业" class="headerlink" title="导出批量作业"></a>导出批量作业</h2><p>提供的代码片段演示了如何使用基于Java的解决方案导出批量作业。以下是代码的详细说明：</p><ol><li><p><code>exportBatchJobs</code> 方法负责导出批量作业。它使用 <code>StringBuilder</code> 构建每个表的 SQL 语句。</p></li><li><p><code>getTableNames</code> 方法使用 <code>SHOW TABLES</code> SQL 查询检索所有表名。</p></li><li><p>对于每个表，都会调用 <code>downloadTable</code> 方法。它查询表数据并为每一行生成 SQL 插入语句。</p></li><li><p>生成的 SQL 语句会追加到 <code>sqlBuilder</code> 中。</p></li><li><p>最后，<code>sqlBuilder</code> 的内容会写入 HTTP 响应，允许用户下载 SQL 文件。</p></li></ol><p>为了优化这段代码，您可以考虑以下改进：</p><ul><li><p>使用 <code>ExecutorService</code> 和 <code>Future</code> 类实现多线程，以并行化导出过程。这可以显著提高性能，特别是在处理大量表时。</p></li><li><p>探索优化 SQL 生成过程的方法。例如，可以使用批量插入而不是单个插入语句来提高效率。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出批次作业</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】 &lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/exportBatchJobs&quot;)</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportBatchJobs</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sqlBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(getTableNames().size());</span><br><span class="line">            List&lt;Future&lt;?&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String tableName : getTableNames()) &#123;</span><br><span class="line">                Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        downloadTable(tableName, sqlBuilder);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                futures.add(future);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Wait for all threads to finish</span></span><br><span class="line">            <span class="keyword">for</span> (Future&lt;?&gt; future : futures) &#123;</span><br><span class="line">                future.get();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set response headers for file download</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=&quot;</span> + format(DateUtil.now(), <span class="string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>) + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(sqlBuilder.toString());</span><br><span class="line"></span><br><span class="line">            executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有表名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】  &lt;/a &gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTableNames</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.queryForList(<span class="string">&quot;SHOW TABLES&quot;</span>, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出指定表SQL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">     *         表明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlBuilder</span></span><br><span class="line"><span class="comment">     *         拼接sql</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】 &lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadTable</span><span class="params">(String tableName, StringBuilder sqlBuilder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 查询表数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM ??&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; tableData = jdbcTemplate.queryForList(sql, tableName);</span><br><span class="line">        <span class="comment">// 拼接SQL插入语句</span></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; row : tableData) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">valuesBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">columnsBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : row.entrySet()) &#123;</span><br><span class="line">                columnsBuilder.append(entry.getKey()).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() <span class="keyword">instanceof</span> <span class="type">byte</span>[]) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] binaryData = (<span class="type">byte</span>[]) entry.getValue();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> bytesToHexString(binaryData);</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;0x&quot;</span>).append(hexString).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;&#x27;&quot;</span>).append(entry.getValue()).append(<span class="string">&quot;&#x27;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">columns</span> <span class="operator">=</span> columnsBuilder.substring(<span class="number">0</span>, columnsBuilder.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> valuesBuilder.substring(<span class="number">0</span>, valuesBuilder.length() - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            sqlBuilder.append(<span class="string">&quot;INSERT INTO &quot;</span>).append(tableName).append(<span class="string">&quot; (&quot;</span>).append(columns).append(<span class="string">&quot;) VALUES (&quot;</span>)</span><br><span class="line">                    .append(values).append(<span class="string">&quot;);\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>导出来的就是这种格式的文件</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308102210122.png" alt="image-20230810221022867"></p><h2 id="导入批量作业"><a href="#导入批量作业" class="headerlink" title="导入批量作业"></a>导入批量作业</h2><p>提供的代码片段演示了如何导入包含批量作业数据的 SQL 文件。以下是代码的详细说明：</p><ol><li><p><code>executeSqlFile</code> 方法处理导入过程。它接受一个 SQL 文件作为 <code>MultipartFile</code> 并读取其内容。</p></li><li><p>使用分号（<code>;</code>）分隔符将 SQL 文件内容拆分为单个语句。</p></li><li><p>使用参数化查询执行每个语句，确保安全性并防止 SQL 注入攻击。</p></li><li><p>如果 SQL 文件成功执行，则方法返回成功消息。否则，它会记录导入过程中出现的任何错误。</p></li></ol><p>为了优化这段代码，您可以考虑以下改进：</p><ul><li><p>实现错误处理，并提供更详细的错误消息，以帮助用户排除导入过程中可能出现的任何问题。</p></li><li><p>考虑在执行语句之前验证 SQL 文件内容。这可以帮助防止由格式错误或不兼容的 SQL 语句引起的潜在错误。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入SQL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.nari.common.core.domain.AjaxResult</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】 &lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importBatchJobs&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> AjaxResult <span class="title function_">executeSqlFile</span><span class="params">(<span class="meta">@RequestParam(&quot;filePath&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        List&lt;String&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Read the SQL file content</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(file.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Split the SQL file content into individual statements</span></span><br><span class="line">            String[] statements = sql.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Execute each statement using parameterized queries</span></span><br><span class="line">            <span class="keyword">for</span> (String statement : statements) &#123;</span><br><span class="line">                <span class="comment">// Skip empty statements</span></span><br><span class="line">                <span class="keyword">if</span> (statement.trim().isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Execute the statement using parameterized queries</span></span><br><span class="line">                jdbcTemplate.update(statement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> AjaxResult.success(<span class="string">&quot;SQL file executed successfully&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            results.add(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;导入失败的SQL数量:&#123;&#125;,&#123;&#125;&quot;</span>, results.size(), results);</span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，本文探讨了一种基于Java的解决方案，用于导出和导入批量作业。导出过程检索表数据并生成 SQL 插入语句，允许用户下载 SQL 文件。导入过程读取 SQL 文件，将其拆分为单个语句，并使用参数化查询执行这些语句。通过优化代码并实现错误处理，您可以提高批量作业导出和导入功能的效率和可靠性。</p><p>希望这篇优化和丰富的文章能帮助您为读者提供有价值的见解。如果您有任何进一步的问题或需要额外的帮助，请随时提问！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot生成表结构和表数据sql</title>
      <link href="/2023/08/08/springboot%E7%94%9F%E6%88%90%E8%A1%A8%E7%BB%93%E6%9E%84%E5%92%8C%E8%A1%A8%E6%95%B0%E6%8D%AEsql/"/>
      <url>/2023/08/08/springboot%E7%94%9F%E6%88%90%E8%A1%A8%E7%BB%93%E6%9E%84%E5%92%8C%E8%A1%A8%E6%95%B0%E6%8D%AEsql/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>业务背景是需要某单机程序需要把正在进行的任务导出，然后另一台电脑上单机继续运行，我这里选择的方案是同步SQL形式，并保证ID随机，多个数据库不会重复。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.</span><br><span class="line">![](image.png)</span><br><span class="line">web.controller.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.InputStreamResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二进制转成十六进制</span></span><br><span class="line"><span class="comment">     * 这里主要是处理图片数据，因为数据库存了图片Base64</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">bytesToHexString</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">0xff</span> &amp; b);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出指定表SQL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/table/&#123;tableName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadTable</span><span class="params">(<span class="meta">@PathVariable</span> String tableName, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 查询表数据</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; tableData = jdbcTemplate.queryForList(<span class="string">&quot;SELECT * FROM &quot;</span> + tableName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询表结构</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; tableStructure = jdbcTemplate.queryForList(<span class="string">&quot;SHOW CREATE TABLE &quot;</span> + tableName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接SQL插入语句</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sqlBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sqlBuilder.append(tableStructure.get(<span class="number">0</span>).get(<span class="string">&quot;Create Table&quot;</span>)).append(<span class="string">&quot;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; row : tableData) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">valuesBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">columnsBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : row.entrySet()) &#123;</span><br><span class="line">                columnsBuilder.append(entry.getKey()).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() <span class="keyword">instanceof</span> <span class="type">byte</span>[]) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] binaryData = (<span class="type">byte</span>[]) entry.getValue();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> bytesToHexString(binaryData);</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;0x&quot;</span>).append(hexString).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;&#x27;&quot;</span>).append(entry.getValue()).append(<span class="string">&quot;&#x27;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">columns</span> <span class="operator">=</span> columnsBuilder.substring(<span class="number">0</span>, columnsBuilder.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> valuesBuilder.substring(<span class="number">0</span>, valuesBuilder.length() - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            sqlBuilder.append(<span class="string">&quot;INSERT INTO &quot;</span>).append(tableName).append(<span class="string">&quot; (&quot;</span>).append(columns).append(<span class="string">&quot;) VALUES (&quot;</span>).append(values).append(<span class="string">&quot;);\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建响应</span></span><br><span class="line">        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=&quot;</span> + tableName+<span class="string">&quot;.sql&quot;</span>);</span><br><span class="line">        response.getWriter().write(sqlBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>能看到这边图片已经正常导出了</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308082133731.png" alt="image-20230808213359441"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> mysql </tag>
            
            <tag> jdbc </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化差不多了</title>
      <link href="/2023/08/07/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E5%B7%AE%E4%B8%8D%E5%A4%9A%E4%BA%86/"/>
      <url>/2023/08/07/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E5%B7%AE%E4%B8%8D%E5%A4%9A%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>博客地址：<a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p>这篇文章不是教学博客，后续考虑看是否出教学</p><p>具体优化视频可以观看B站视频</p><p><a href="https://space.bilibili.com/258577429">https://space.bilibili.com/258577429</a></p><p>这个博客是Hexo+Github Pages搭建的，如何搭建可以看我之前的文章，主题是Butterfly，图床是腾讯云COS，老文章使用的是阿里云OOS，换成COS主要是出于成本，腾讯的便宜太多了，而且有很多免费额度<img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072341119.png" alt="image-20230807234107815"></p><p>阿里云已经开始扣费了，价格是0.5元&#x2F;G流量，不包括存储费用，上个月扣了几块钱了。。看了下，最低的流量包是100G。。腾讯是10G好像，价格上也贵不少</p><p>总感觉流量扣的不对，没办法，开始上防盗链了。。。COS和OSS都上了。。后续有时间再把OSS文档迁移到COS吧，╮(╯▽╰)╭</p><h2 id="新增搜索功能"><a href="#新增搜索功能" class="headerlink" title="新增搜索功能"></a>新增搜索功能</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072348757.png" alt="image-20230807234835404"></p><h2 id="新增评论系统"><a href="#新增评论系统" class="headerlink" title="新增评论系统"></a>新增评论系统</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072337879.png" alt="image-20230807233701749"></p><h2 id="新增在线聊天系统"><a href="#新增在线聊天系统" class="headerlink" title="新增在线聊天系统"></a>新增在线聊天系统</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072337780.png" alt="image-20230807233728451"></p><h2 id="语言改为中文"><a href="#语言改为中文" class="headerlink" title="语言改为中文"></a>语言改为中文</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072338122.png" alt="image-20230807233812817"></p><h2 id="去掉了默认那个大图，直接展示文章"><a href="#去掉了默认那个大图，直接展示文章" class="headerlink" title="去掉了默认那个大图，直接展示文章"></a>去掉了默认那个大图，直接展示文章</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072347459.png" alt="image-20230807234701110"></p><h2 id="新增友链"><a href="#新增友链" class="headerlink" title="新增友链"></a>新增友链</h2><p>这个友链也需要完善，时间上不够啊，有时间再弄吧</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072349572.png" alt="image-20230807234921266"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly安装文档(三)主题配置-1</title>
      <link href="/2023/08/07/Butterfly%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3-%E4%B8%89-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-1/"/>
      <url>/2023/08/07/Butterfly%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3-%E4%B8%89-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-1/</url>
      
        <content type="html"><![CDATA[<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>修改站点配置文件 _config.yml</p><p>默认语言是 en</p><p>主题支持三种语言</p><ul><li>default(en)</li><li>zh-CN (简体中文)</li><li>zh-TW (繁体中文)</li></ul><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的_config.yml</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072057104.png" alt="img"></p><h2 id="导航栏设置-Navigation-bar-settings"><a href="#导航栏设置-Navigation-bar-settings" class="headerlink" title="导航栏设置 (Navigation bar settings)"></a>导航栏设置 (Navigation bar settings)</h2><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="comment">#image</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># fixed navigation bar</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072058163.png" alt="image-20230807205821105"></p><h3 id="菜单-目录"><a href="#菜单-目录" class="headerlink" title="菜单&#x2F;目录"></a>菜单&#x2F;目录</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"><span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line"><span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line"><span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>必须是 &#x2F;xxx&#x2F;，后面||分开，然后写图标名。</p><p>如果不希望显示图标，图标名可不写。</p><p>默认子目录是展开的，如果你想要隐藏，在子目录里添加 hide 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">List||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br></pre></td></tr></table></figure><p>注意： 导航的文字可自行更改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">清单||fa</span> <span class="attr">fa-heartbeat:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/Gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072059133.png" alt="img"></p><h2 id="代码-Code-Blocks"><a href="#代码-Code-Blocks" class="headerlink" title="代码 (Code Blocks)"></a>代码 (Code Blocks)</h2><blockquote><p>代码块中的所有功能只适用于 Hexo 自带的代码渲染</p><p>如果使用第三方的渲染器，不一定会有效</p></blockquote><h3 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h3><p>Butterfly 支持6种代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><p>修改 主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><blockquote><p>darker</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072100889.png" alt="img"></p><blockquote><p>pale night</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072100334.png" alt="img"></p><blockquote><p>light</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072100700.png" alt="img"></p><blockquote><p>ocean</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101386.png" alt="img"></p><blockquote><p>mac</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101737.png" alt="img"></p><blockquote><p>mac light</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101442.png" alt="image-20200731175026827"></p><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101594.png" alt="img"></p><h3 id="代码框展开-关闭"><a href="#代码框展开-关闭" class="headerlink" title="代码框展开&#x2F;关闭"></a>代码框展开&#x2F;关闭</h3><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击&gt;可展开代码</p><ul><li>true 全部代码框不展开，需点击&gt;打开</li><li>false 代码框展开，有&gt;点击按钮</li><li>none 不显示&gt;按钮</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure><blockquote><p>你也可以在post&#x2F;page页对应的markdown文件front-matter添加highlight_shrink来独立配置。</p><p>当主题配置文件中的 highlight_shrink 设为true时，可在front-matter添加highlight_shrink: false来单独配置文章展开代码框。</p><p>当主题配置文件中的 highlight_shrink 设为false时，可在front-matter添加highlight_shrink: true来单独配置文章收缩代码框。</p></blockquote><p><code>highlight_shrink: true</code></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072102616.png" alt="img"></p><p><code>highlight_shrink: false</code></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072103552.png" alt="img"></p><p><code>highlight_shrink: none</code></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072103366.png" alt="img"></p><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><p>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你是使用 highlight 渲染，需要找到你站点的 Hexo 配置文件_config.yml，将line_number改成false:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><p>如果你是使用 prismjs 渲染，需要找到你站点的 Hexo 配置文件_config.yml，将line_number改成false:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>设置code_word_wrap之前:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072104470.png" alt="img"></p><p>设置code_word_wrap之后:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072104153.png" alt="img"></p><h3 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h3><blockquote><p>3.7.0 及以上支持</p></blockquote><p>可配置代码高度限制，超出的部分会隐藏，并显示展开按钮。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>单位是 px，直接添加数字，如 200</li><li>实际限制高度为 highlight_height_limit + 30 px ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。</li><li>不适用于隐藏后的代码块（ css 设置 display: none）</li></ol><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105585.gif" alt="hexo-theme-butterfly-docs-highlight-heigh-limit"></p><h2 id="社交图标-Social-Settings"><a href="#社交图标-Social-Settings" class="headerlink" title="社交图标 (Social Settings)"></a>社交图标 (Social Settings)</h2><p>Butterfly支持 font-awesome v6 图标.</p><p>书写格式 图标名：url || 描述性文字 || color</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span> <span class="string">||</span> <span class="string">&quot;#hdhfbb&quot;</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span> <span class="string">||</span> <span class="string">&quot;#000000&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105121.png" alt="img"></p><p>PC:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105313.png" alt="img"></p><p>Mobile:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105225.png" alt="1560603353743"></p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像会一直转圈</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072106042.png" alt="img"></p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><blockquote><p>如果不要显示顶部图，可直接配置 disable_top_img: true</p></blockquote><blockquote><p>顶部图的获取顺序，如果都没有配置，则不显示顶部图。</p><ol><li><p>页面顶部图的获取顺序：</p><p>各自配置的 top_img &gt; 配置文件的 default_top_img</p></li><li><p>文章页顶部图的获取顺序：</p><p>各自配置的 top_img &gt; cover &gt; 配置文件的 default_top_img</p></li></ol></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072106295.png" alt="image-20230807210647228"></p><p>其它页面 （tags&#x2F;categories&#x2F;自建页面）和 文章页 的 top_img ，请到对应的 md 页面设置front-matter中的top_img</p><p>以上所有的 top_img 可配置以下值</p><blockquote><p> 3.2.0 以下版本的配置只支持</p><ul><li>留空，true 和 false - 显示默认的顔色</li><li>img链接 - 显示所配置的图片</li></ul></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072107929.png" alt="image-20230807210721862"></p><p>tag_per_img 和 category_per_img 是 3.2.0 新增的内容，可对 tag 和 category 进行单独的配置</p><p>并不推荐为每个 tag 和每个 category 都配置不同的顶部图，因为配置太多会拖慢生成速度</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tag_per_img：</span></span><br><span class="line">  <span class="attr">aplayer:</span> <span class="string">https://xxxxxx.png</span></span><br><span class="line">  <span class="attr">android:</span> <span class="string">ddddddd.png</span></span><br><span class="line">  </span><br><span class="line"><span class="string">category_per_img：</span></span><br><span class="line">  <span class="string">随想:</span> <span class="string">hdhdh.png</span></span><br><span class="line">  <span class="string">推荐:</span> <span class="string">ddjdjdjd.png</span></span><br></pre></td></tr></table></figure><blockquote><p>top_img: false</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072107443.png" alt="image-20200924224536013"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072107817.png" alt="image-20201027210949089"></p><blockquote><p>top_img: orange</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072108160.png" alt="image-20200924225024153"></p><blockquote><p>top_img: ‘linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)’</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072108023.png" alt="image-20200924225300934"></p><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><p>文章的 markdown 文档上,在 Front-matter 添加 cover ,并填上要显示的图片地址。</p><p>如果不配置 cover,可以设置显示默认的 cover。</p><p>如果不想在首页显示 cover, 可以设置为 false。</p><blockquote><p>文章封面的获取顺序 Front-matter 的 cover &gt; 配置文件的 default_cover &gt; false</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110069.png" alt="image-20230807211011003"></p><p>当配置多张图片时,会随机选择一张作为cover.此时写法应为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110869.png" alt="img"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110295.png" alt="img"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110971.png" alt="img"></p><blockquote><p>left</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110677.png" alt="img"></p><blockquote><p>right</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072111478.png" alt="img"></p><blockquote><p>both</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072111182.png" alt="img"></p><h2 id="页面-meta-显示"><a href="#页面-meta-显示" class="headerlink" title="页面 meta 显示"></a>页面 meta 显示</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure><blockquote><p>主页</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072111713.png" alt="img"></p><blockquote><p>文章页</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072112598.png" alt="img"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072112995.png" alt="img"></p><p>date_format 是 3.2.0 新增的内容，配置时间显示明确时间还是相对时间</p><h2 id="主页文章节选-自动节选和文章页description"><a href="#主页文章节选-自动节选和文章页description" class="headerlink" title="主页文章节选(自动节选和文章页description)"></a>主页文章节选(自动节选和文章页description)</h2><p>因为主题UI的关係，主页文章节选只支持自动节选和文章页description。</p><p>在butterfly里，有四种可供选择</p><ol><li>description： 只显示description</li><li>both： 优先选择description，如果没有配置description，则显示自动节选的内容</li><li>auto_excerpt：只显示自动节选</li><li>false： 不显示文章内容</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><p>description在front-matter里添加</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072113793.png" alt="img"></p><h2 id="页面锚点"><a href="#页面锚点" class="headerlink" title="页面锚点"></a>页面锚点</h2><p>开启页面锚点后，当你在进行滚动时，页面链接会根据标题ID进行替换<br>(注意: 每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post , the url will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="attr">button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">always_show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="comment"># the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">auto_update:</span> <span class="literal">false</span> <span class="comment"># when you scroll in post, the URL will update according to header id.</span></span><br></pre></td></tr></table></figure><h2 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h2><p>可开启图片Figcaption描述文字显示</p><p>优先显示图片的 title 属性，然后是 alt 属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072114836.png" alt="img"></p><h2 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h2><p>可配置网站是否可以复制、复制的内容是否添加版权信息</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># copy settings</span></span><br><span class="line"><span class="section"># copyright: Add the copyright information after copied content (复制的内容后面加上版权信息)</span></span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line"><span class="code">    enable: true</span></span><br><span class="line"><span class="code">    limit_count: 50</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072114926.png" alt="image-20230807211429858"></p><blockquote><p>添加版权信息后</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, test link consectetur adipiscing elit. Strong text pellentesque ligula commodo viverra vehicula. Italic text at ullamcorper enim. Morbi a euismod nibh. Underline text non elit nisl. Deleted text tristique, sem id condimentum tempus, metus lectus venenatis mauris, sit amet semper lorem felis a eros. Fusce egestas nibh at sagittis auctor. Sed ultricies ac arcu quis molestie. Donec dapibus nunc in nibh egestas, vitae volutpat sem iaculis. Curabitur sem tellus, elementum nec quam id, fermentum laoreet mi. Ut mollis ullamcorper turpis, vitae facilisis velit ultricies sit amet. Etiam laoreet dui odio, id tempus justo tincidunt id. Phasellus scelerisque nunc sed nunc ultricies accumsan.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">作者: Jerry</span><br><span class="line">连结: http://localhost:4000/posts/bd3c650b/<span class="params">#</span>Paragraph</span><br><span class="line">来源: Butterfly</span><br><span class="line">着作权归作者所有。商业转载请联络作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h2><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072115931.png" alt="image-20210130161913121"></p><h3 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072116217.png" alt="image-20230807211609151"></p><h3 id="为特定的文章配置"><a href="#为特定的文章配置" class="headerlink" title="为特定的文章配置"></a>为特定的文章配置</h3><p>在你的文章md文件的头部，加入toc_number和toc，并配置true或者false即可。</p><p>主题会优先判断文章Markdown的Front-matter是否有配置，如有，则以Front-matter的配置为准。否则，以主题配置文件中的配置为准</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><blockquote><p>当文章封面设置为 false 时，或者没有获取到封面配置，相关文章背景将会显示主题色。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure><h3 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Displays outdated notice for a post (文章过期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span> <span class="comment"># When will it be shown</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span></span><br></pre></td></tr></table></figure><p>limit_day： 距离更新时间多少天才显示文章过期提醒</p><p>message_prev ： 天数之前的文字</p><p>message_next：天数之后的文字</p><h4 id="文章编辑按钮"><a href="#文章编辑按钮" class="headerlink" title="文章编辑按钮"></a>文章编辑按钮</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post edit</span></span><br><span class="line"><span class="comment"># Easily browse and edit blog source code online.</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/</span></span><br><span class="line">  <span class="comment"># For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span></span><br><span class="line">  <span class="attr">url:</span></span><br></pre></td></tr></table></figure><h3 id="文章分页按钮"><a href="#文章分页按钮" class="headerlink" title="文章分页按钮"></a>文章分页按钮</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分页)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072117788.png" alt="image-20230807211745729"></p><h2 id="Footer-设置"><a href="#Footer-设置" class="headerlink" title="Footer 设置"></a>Footer 设置</h2><h3 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure><h2 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span></span><br></pre></td></tr></table></figure><h3 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a>ICP</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;icp链接&quot;&gt;&lt;img</span> <span class="string">class=&quot;icp-icon&quot;</span> <span class="string">src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏设置-aside"><a href="#侧边栏设置-aside" class="headerlink" title="侧边栏设置 (aside)"></a>侧边栏设置 (aside)</h2><h3 id="侧边排版"><a href="#侧边排版" class="headerlink" title="侧边排版"></a>侧边排版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/xxxxxx</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># Order of tags, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="访问人数-busuanzi-UV-和-PV"><a href="#访问人数-busuanzi-UV-和-PV" class="headerlink" title="访问人数 busuanzi (UV 和 PV)"></a>访问人数 busuanzi (UV 和 PV)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果需要修改 busuanzi 的 CDN 链接，可通过 主题配置文件 的 CDN 中的 option 进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">  <span class="attr">busuanzi:</span> <span class="string">xxxxxxxxx</span></span><br></pre></td></tr></table></figure><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">6</span><span class="string">/7/2018</span> <span class="number">00</span><span class="string">:00:00</span>  </span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure><h3 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072120491.png" alt="image-20230807212012418"></p><h3 id="自定义添加栏目"><a href="#自定义添加栏目" class="headerlink" title="自定义添加栏目"></a>自定义添加栏目</h3><p><a href="https://butterfly.js.org/posts/ea33ab97/">https://butterfly.js.org/posts/ea33ab97/</a></p><h2 id="右下角按钮-Bottom-right-button"><a href="#右下角按钮-Bottom-right-button" class="headerlink" title="右下角按钮 (Bottom right button)"></a>右下角按钮 (Bottom right button)</h2><h3 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&quot;繁&quot;</span></span><br><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&quot;简&quot;</span></span><br></pre></td></tr></table></figure><h3 id="閲读模式"><a href="#閲读模式" class="headerlink" title="閲读模式"></a>閲读模式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072121962.png" alt="image-20230807212134887"></p><h3 id="滚动状态百分比"><a href="#滚动状态百分比" class="headerlink" title="滚动状态百分比"></a>滚动状态百分比</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show scroll percent in scroll-to-top button</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="按钮排序"><a href="#按钮排序" class="headerlink" title="按钮排序"></a>按钮排序</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )</span></span><br><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat 不要重复</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="comment"># readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">show:</span> <span class="comment"># toc,chat,comment</span></span><br></pre></td></tr></table></figure><h3 id="标签外挂（Tag-Plugins）"><a href="#标签外挂（Tag-Plugins）" class="headerlink" title="标签外挂（Tag Plugins）"></a>标签外挂（Tag Plugins）</h3><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89</a></p><h2 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB">https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 安装文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly 安装文档(一) 快速开始</title>
      <link href="/2023/08/07/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
      <url>/2023/08/07/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在你的Hexo根目录里面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h2 id="升级建议"><a href="#升级建议" class="headerlink" title="升级建议"></a>升级建议</h2><blockquote><p>升级完成后，请到 Github 的 Releases 界面 或者 文档七 查看新版的更新内容。</p><p>里面有标注 _config 文件的变更内容（如有），请根据实际情况更新你的配置内容。</p></blockquote><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做）。</p><p>在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。( 注意: 复制的是主题的 _config.yml ，而不是 hexo 的 _config.yml)</p><blockquote><p>注意： 不要把主题目录的 _config.yml 删掉</p></blockquote><blockquote><p>注意： 以后只需要在 _config.butterfly.yml 进行配置就行。<br>        如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</p></blockquote><p>Hexo会自动合併主题中的 _config.yml 和 _config.butterfly.yml 里的配置，如果存在同名配置，会使用 _config.butterfly.yml 的配置，其优先度较高。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072043458.png" alt="image-20200805191531090"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 安装文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Picgo图床之COS、OSS、Github图床</title>
      <link href="/2023/08/07/%E9%85%8D%E7%BD%AEPicgo%E5%9B%BE%E5%BA%8A%E4%B9%8BCOS%E3%80%81OSS%E3%80%81Github%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/08/07/%E9%85%8D%E7%BD%AEPicgo%E5%9B%BE%E5%BA%8A%E4%B9%8BCOS%E3%80%81OSS%E3%80%81Github%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PicGo是一款开源的图片上传和管理工具，它提供了简单易用的界面和丰富的功能，方便用户上传、管理和分享图片。</p><p>以下是PicGo的一些主要特点和功能：</p><ol><li><p>图片上传：PicGo支持将本地图片快速上传到云存储服务，如七牛云、腾讯云、阿里云等。你可以选择自己喜欢的云存储服务，并通过PicGo将图片批量上传到云端。</p></li><li><p>图片压缩：PicGo内置了图片压缩功能，可以帮助你在上传图片之前对图片进行压缩，减小图片文件大小，提高网页加载速度。</p></li><li><p>图片编辑：PicGo提供了简单的图片编辑功能，包括裁剪、旋转、调整亮度、对比度等。你可以在上传图片之前对图片进行一些基本的编辑操作。</p></li><li><p>图片管理：PicGo可以帮助你管理上传的图片，包括查看上传记录、复制图片链接、删除图片等。你可以方便地管理自己上传的图片，并在需要时获取图片链接进行分享。</p></li><li><p>自定义配置：PicGo支持自定义配置，你可以根据自己的需求设置上传的命名规则、存储路径、图片样式等。这样可以更好地满足个性化的需求。</p></li></ol><p>总的来说，PicGo是一款功能强大且易于使用的图片上传和管理工具，适用于个人用户、开发者和博主等多种场景。它可以帮助你更高效地上传、管理和分享图片。</p><h2 id="准备PicGo"><a href="#准备PicGo" class="headerlink" title="准备PicGo"></a>准备PicGo</h2><p>官网下载地址：<a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p><p>关注【程序员朱永胜】回复【1012】获取安装包，免费高速下载</p><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><h3 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072004107.png" alt="image-20230807200430847"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072005596.png"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072005838.png"></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>随便创建一个仓库即可，我创建的是<code>pic</code>仓库</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072007898.png" alt="image-20230807200705649"></p><h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072007590.png"></p><h2 id="配置腾讯云COS"><a href="#配置腾讯云COS" class="headerlink" title="配置腾讯云COS"></a>配置腾讯云COS</h2><h3 id="获取Token-1"><a href="#获取Token-1" class="headerlink" title="获取Token"></a>获取Token</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072008733.png" alt="image-20230807200848497"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072009686.png" alt="image-20230807200924438"></p><h3 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072010800.png"></p><p>设置为公有读私有写</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072011353.png" alt="image-20230807201130106"></p><p>参考下面模版填写</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072011921.png" alt="image-20230807201157858"></p><h2 id="设置阿里云OSS"><a href="#设置阿里云OSS" class="headerlink" title="设置阿里云OSS"></a>设置阿里云OSS</h2><h3 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072013528.png" alt="image-20230807201312297"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072013156.png" alt="image-20230807201333924"></p><h3 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072014937.png" alt="image-20230807201403715"></p><h3 id="参考下面模版"><a href="#参考下面模版" class="headerlink" title="参考下面模版"></a>参考下面模版</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072014966.png" alt="image-20230807201422903"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072015802.png" alt="image-20230807201500562"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
            <tag> Github </tag>
            
            <tag> COS </tag>
            
            <tag> OSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jrebel与Xrebel激活</title>
      <link href="/2023/08/06/Jrebel%E4%B8%8EXrebel%E6%BF%80%E6%B4%BB/"/>
      <url>/2023/08/06/Jrebel%E4%B8%8EXrebel%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JRebel和XRebel是两个非常有用的工具，可以显著提升Java开发人员的生产力和应用程序性能。</p><p>JRebel是一个强大的Java开发工具，它允许开发人员在不重新启动应用程序的情况下进行代码修改和调试。传统上，每次修改Java代码都需要重新编译和重新启动应用程序，这会浪费大量的时间。但是，使用JRebel，你可以即时看到你的代码修改的效果，无需重新启动应用程序。这种即时反馈的能力极大地提高了开发效率，缩短了开发周期。</p><p>JRebel通过在运行时重新加载修改的类文件，使得代码修改能够立即生效。它支持各种Java框架和服务器，包括Spring、Hibernate、Tomcat等。此外，JRebel还提供了与常见IDE（如Eclipse、IntelliJ IDEA）的集成，使得使用JRebel变得更加方便。</p><p>XRebel是另一个强大的工具，专注于Java应用程序的性能监控和优化。它可以实时监测和分析应用程序的性能瓶颈，帮助开发人员快速定位和解决性能问题。XRebel提供了一个直观的用户界面，显示了应用程序的请求和响应时间、数据库查询、HTTP会话等关键指标。它还能够检测潜在的性能问题，如慢查询、内存泄漏等，并提供相应的建议和解决方案。</p><p>XRebel支持各种Java应用程序，包括Web应用程序、企业应用程序等。它可以与常见的Java开发工具和服务器集成，如Eclipse、IntelliJ IDEA、Tomcat等。</p><p>综上所述，JRebel和XRebel是两个非常有用的工具，可以极大地提升Java开发人员的生产力和应用程序性能。JRebel允许即时查看代码修改的效果，而XRebel帮助开发人员实时监测和优化应用程序的性能。这两个工具的结合将为你的Java开发带来更高效和优化的体验。</p><h2 id="下载代理软件"><a href="#下载代理软件" class="headerlink" title="下载代理软件"></a>下载代理软件</h2><p>请关注某绿色软件【程序员朱永胜】回复<code>1011</code>获取</p><h2 id="双击打开"><a href="#双击打开" class="headerlink" title="双击打开"></a>双击打开</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072033983.png" alt="image-20230806204843304"></h2><h2 id="获取UUID"><a href="#获取UUID" class="headerlink" title="获取UUID"></a>获取UUID</h2><p>打开<a href="https://www.guidgen.com/%EF%BC%8C%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAUUID">https://www.guidgen.com/，生成一个UUID</a></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308062049509.png" alt="image-20230806204943298"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>拷贝UUID到这里即可激活</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308062051024.png" alt="image-20230806205133975"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308062052295.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JRebel </tag>
            
            <tag> XRebel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 2023.2 最新变化</title>
      <link href="/2023/08/05/%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/"/>
      <url>/2023/08/05/%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>IntelliJ IDEA 2023.2 引入 AI Assistant，通过一组由 AI 提供支持的功能助力开发。 升级的 IntelliJ 分析器现在提供编辑器内提示，使分析进程更加直观详尽。 此版本还包括有助于简化开发工作流的 GitLab 集成，以及其他多项值得关注的更新和改进，如下所述：</p><h1 id="主要更新"><a href="#主要更新" class="headerlink" title="主要更新"></a>主要更新</h1><p> <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959533.png">  </p><h3 id="AI-Assistant"><a href="#AI-Assistant" class="headerlink" title="AI Assistant"></a>AI Assistant</h3><p>限定访问 Ultimate 在此版本中，我们为 IntelliJ IDEA 引入了一项重要补充 – AI Assistant。 AI Assistant 当前具备一组由 AI 提供支持的初始功能，提供集成式 AI 聊天，可以完成一些任务，例如自动编写文档注释、建议名称、生成提交消息等。 JetBrains AI 服务为 AI Assistant 提供技术支持，此服务目前可以连接到 OpenAI，后续还将包含其他语言模型提供商。 要访问 Assistant 的 AI 功能，您需要安装 AI Assistant 插件并使用 JetBrains Account 登录 JetBrains AI 服务。 JetBrains AI 服务的初始可用性可能受限。 有关 AI Assistant 的更多信息以及访问说明，请查阅<a href="https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/">这篇博文</a>。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959642.png"></p><h3 id="编辑器内性能提示"><a href="#编辑器内性能提示" class="headerlink" title="编辑器内性能提示"></a>编辑器内性能提示</h3><p>Ultimate 在 IntelliJ IDEA 2023.2 中，我们增强了 IntelliJ 分析器，为应用程序性能提供更有价值且易于理解的洞察。 新的编辑器内提示可供快速逐行分析代码性能，帮助您更快识别和解决问题。 编辑器装订区域中的颜色编码注解可以高亮显示关键方法，让您专注于性能瓶颈。 因此，您不再需要使用 _Flame Graph_（火焰图）和 _Call Tree_（调用树）视图执行彻底、耗时的分析。 在这篇<a href="https://blog.jetbrains.com/idea/2023/05/intellij-idea-2023-2-eap/#In-editorperformancehints">博文</a>中了解详情。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959607.png"> </p><h3 id="GitLab-集成"><a href="#GitLab-集成" class="headerlink" title="GitLab 集成"></a>GitLab 集成</h3><p> IntelliJ IDEA 2023.2 引入了与 GitLab 的集成，帮助简化您的开发工作流。 现在，您可以直接在 IDE 中使用 _Merge Requests_（合并请求）功能：查看请求列表、检查更改、留下评论，以及导航到相关视图。 <a href="https://blog.jetbrains.com/2023/07/25/gitlab-support-in-jetbrains-ides/">了解详情</a>。 </p><h1 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959553.png"> </p><h3 id="Search-Everywhere-（随处搜索）中的文本搜索"><a href="#Search-Everywhere-（随处搜索）中的文本搜索" class="headerlink" title="Search Everywhere_（随处搜索）中的文本搜索"></a>Search Everywhere_（随处搜索）中的文本搜索</h3><p>Search Everywhere_（随处搜索）（按两次 Shift）主要用于搜索文件、类、方法、操作和设置。 在此更新后，它将包含类似于 _Find in Files_（在文件中查找）的文本搜索功能。 现在，当给定查询的其他搜索结果很少或没有时，将显示文本搜索结果。 此功能默认启用，可以在 _Settings&#x2F;Preferences | Advanced Settings | Search Everywhere_（设置&#x2F;偏好设置 | 高级设置 | 随处搜索）中管理。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959581.png"> </p><h3 id="新-UI-中的彩色项目标题"><a href="#新-UI-中的彩色项目标题" class="headerlink" title="新 UI 中的彩色项目标题"></a>新 UI 中的彩色项目标题</h3><p>IntelliJ IDEA 2023.2 引入了彩色标题，可以简化多个打开的项目之间的导航。 现在，您可以为每个项目分配唯一的颜色和图标，使其在工作区中更易区分。 标题现在默认带有预定义的颜色，但您也可以自定义。 要为项目设置新的颜色，首先右键点击标题，然后访问上下文菜单。 然后，选择 _Change Project Color_（更改项目颜色）选项，并从建议的列表中选择所需颜色，或者浏览调色盘。 如果您想禁用此功能，只需在上下文菜单中取消选择 _Show Project Gradient_（显示项目渐变）选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959569.png"> </p><h3 id="在-Windows-和-Linux-上的主工具栏中重做了汉堡包菜单"><a href="#在-Windows-和-Linux-上的主工具栏中重做了汉堡包菜单" class="headerlink" title="在 Windows 和 Linux 上的主工具栏中重做了汉堡包菜单"></a>在 Windows 和 Linux 上的主工具栏中重做了汉堡包菜单</h3><p>我们改进了 Windows 和 Linux 上新 UI 中主工具栏汉堡包菜单的行为。 点击菜单图标后，元素现在水平显示在工具栏上方。 此外，现在还有一个选项可以将此菜单转换为单独的工具栏，此选项的路径为 _View | Appearance | Main menu as a Separate Toolbar_（视图 | 外观 | 主菜单作为单独的工具栏）。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959104.png"> </p><h3 id="在-Project-（项目）视图中按修改时间对文件进行排序"><a href="#在-Project-（项目）视图中按修改时间对文件进行排序" class="headerlink" title="在 _Project_（项目）视图中按修改时间对文件进行排序"></a>在 _Project_（项目）视图中按修改时间对文件进行排序</h3><p>IntelliJ IDEA 2023.2 添加了备受期待的功能，让您可以根据修改时间在 _Project_（项目）视图中排列文件。 每当项目中有更改被保存时，这个新功能就会自动重排文件。 要启用此功能，首先打开 _Project_（项目）视图中的竖三点菜单，然后选择 _Tree Appearance | Sort by Modification Time_（树外观 | 按修改时间排序）。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959174.png"> </p><h3 id="新-UI-中带有浅色标题的浅色主题"><a href="#新-UI-中带有浅色标题的浅色主题" class="headerlink" title="新 UI 中带有浅色标题的浅色主题"></a>新 UI 中带有浅色标题的浅色主题</h3><p>在 v2023.2 中，我们通过引入替代的 _Light with Light Header_（带有浅色标题的浅色主题）选项提升了_浅色_主题的用户体验，该选项可为窗口标题、工具提示和通知气球提供匹配的浅色。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959161.png"> </p><h3 id="更新了-macOS-上的窗口控件"><a href="#更新了-macOS-上的窗口控件" class="headerlink" title="更新了 macOS 上的窗口控件"></a>更新了 macOS 上的窗口控件</h3><p>在 macOS 上以全屏模式使用新 UI 时，窗口控件现在将在主工具栏上显示，而不是像以前一样在浮动栏上显示。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959213.png"> </p><h3 id="在新-UI-中移除了-Linux-上的标题栏"><a href="#在新-UI-中移除了-Linux-上的标题栏" class="headerlink" title="在新 UI 中移除了 Linux 上的标题栏"></a>在新 UI 中移除了 Linux 上的标题栏</h3><p>为了方便 Linux 用户，新 UI 中移除了操作系统的原生标题，使界面更加整洁。 默认将显示 IDE 的自定义标题，该标题提供了一系列工作区自定义选项。 如果您希望将标题还原为之前的外观，请取消选择 _Settings | Appearance &amp; Behavior | Appearance | UI Options_（设置 | 外观与行为 | 外观 | UI 选项）中的 <em>Merge main menu with window title</em> （将主菜单与窗口标题合并）选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959154.png"></p><h3 id="检查描述中的语法高亮显示"><a href="#检查描述中的语法高亮显示" class="headerlink" title="检查描述中的语法高亮显示"></a>检查描述中的语法高亮显示</h3><p>在 _Settings &#x2F; Preferences | Editor | Inspections_（设置&#x2F;偏好设置 | 编辑器 | 检查）中，代码示例现在将包含语法高亮显示，让您可以更容易理解是什么触发了检查并决定使其处于活跃状态还是停用状态。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959183.png"> </p><h3 id="在项目目录之间单击导航"><a href="#在项目目录之间单击导航" class="headerlink" title="在项目目录之间单击导航"></a>在项目目录之间单击导航</h3><p>在 _Project_（项目）视图中，新增了 _Open Directories with Single Click_（单击打开目录）选项，可以更快展开和收起项目文件夹，更快响应。 点击竖三点菜单后，可以从下拉菜单中选择该选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959630.png"> </p><h3 id="改进了主工具栏自定义"><a href="#改进了主工具栏自定义" class="headerlink" title="改进了主工具栏自定义"></a>改进了主工具栏自定义</h3><p>我们扩展了新 UI 主工具栏的自定义选项。 现在，您可以使用下拉菜单快速选择要添加到工具栏的操作。 右键点击任意微件，选择 _Add to Main Toolbar_（添加到主工具栏），然后浏览可用选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959584.png"> </p><h3 id="Settings-Preferences-（设置-偏好设置）中的推荐插件"><a href="#Settings-Preferences-（设置-偏好设置）中的推荐插件" class="headerlink" title="Settings&#x2F;Preferences_（设置&#x2F;偏好设置）中的推荐插件"></a>Settings&#x2F;Preferences_（设置&#x2F;偏好设置）中的推荐插件</h3><p>为了让您可以更轻松地为特定项目配置 IDE 以及通过插件扩展其功能，我们更新了 _Settings&#x2F;Preferences | Plugins_（设置&#x2F;偏好设置 | 插件）部分的 UI。 它现在包含一组推荐插件，根据您的项目具体情况自动定义，并在列表顶部显示。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959577.png"> </p><h3 id="更新了Services（服务）工具窗口中-Run-Debug-（运行-调试）"><a href="#更新了Services（服务）工具窗口中-Run-Debug-（运行-调试）" class="headerlink" title="更新了Services（服务）工具窗口中 _Run&#x2F;Debug_（运行&#x2F;调试）"></a>更新了Services（服务）工具窗口中 _Run&#x2F;Debug_（运行&#x2F;调试）</h3><p>微件的 UI 我们重做了 _Services_（服务）工具窗口中运行和调试操作的 UI，使工具栏外观与主 _Run&#x2F;Debug_（运行&#x2F;调试）微件一致。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959619.png"> </p><h3 id="在-Run-（运行）微件中固定运行配置"><a href="#在-Run-（运行）微件中固定运行配置" class="headerlink" title="在 _Run_（运行）微件中固定运行配置"></a>在 _Run_（运行）微件中固定运行配置</h3><p>为了简化多个运行配置的管理，我们在 _Run_（运行）微件中实现了固定首选配置的选项。 要将运行配置添加到 _Pinned_（固定）部分，首先打开其名称旁边的竖三点菜单，然后选择 _Pin_（固定）。 如果有多个固定的配置，在列表中拖放即可轻松排列。<br>#Java </p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959626.png"> </p><h3 id="新检查和其他代码分析改进"><a href="#新检查和其他代码分析改进" class="headerlink" title="新检查和其他代码分析改进"></a>新检查和其他代码分析改进</h3><p>我们改进并扩展了 Java 检查，帮助您维护优质代码并更有效地检测潜在问题。 当模式引用与实参不匹配时，新的 _Incorrect ‘MessageFormat’ pattern_（’MessageFormat’ 模式不正确）检查会发出警告，并且它还会检测 <code>MessageFormat</code> 模式中引号和大括号的错误用法。 此外，IDE 现在将报告带有显式 <code>ChronoField</code> 或 <code>ChronoUnit</code> 实参的调用，并建议将其替换为更具体的方法的调用，从而简化代码。 在这篇<a href="https://blog.jetbrains.com/idea/2023/05/intellij-idea-2023-2-eap-2/#Newinspectionsandothercodeanalysisimprovementss_and_other_improvements">博文</a>中详细了解 IntelliJ IDEA 2023.2 中的新检查和其他代码分析改进。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959640.png"> </p><h3 id="格式字符串的代码高亮显示和导航"><a href="#格式字符串的代码高亮显示和导航" class="headerlink" title="格式字符串的代码高亮显示和导航"></a>格式字符串的代码高亮显示和导航</h3><p>现在，将文本光标置于格式说明符上后，IDE 将高亮显示相应实参和指向它的其他说明符。 此外，您现在可以使用 _Go To Declaration_（转到声明）(Ctrl+B) 跳转到特定格式字符串占位符的关联代码位置。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959020.png"> </p><h3 id="改进了对-Javadoc-注释中-snippet-标记的支持"><a href="#改进了对-Javadoc-注释中-snippet-标记的支持" class="headerlink" title="改进了对 Javadoc 注释中 @snippet 标记的支持"></a>改进了对 Javadoc 注释中 <code>@snippet</code> 标记的支持</h3><p>IntelliJ IDEA 改进了 Javadoc 注释中的 <code>@snippet</code> 标记功能。 它允许在 <code>@snippet</code> 标记内添加标记注释，并在文档中正确呈现。 代码区域已得到支持，您可以指定要在 Javadoc 注释中引用的代码部分。 此外，IDE 现在还支持在 <code>@snippet</code> 标记内包含外部代码段，这将允许您引用存储在单独文件或源中的代码段，并将其包含在 Javadoc 文档中。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959078.png"> </p><h3 id="扩展了多个选定成员的重构选项"><a href="#扩展了多个选定成员的重构选项" class="headerlink" title="扩展了多个选定成员的重构选项"></a>扩展了多个选定成员的重构选项</h3><p>我们添加了新方式，可供同时将特定重构应用于多个成员。 现在，您可以在 _Project_（项目）或 _Structure_（结构）工具窗口中直接选择多个成员，同时对其调用 _Extract Delegate_（提取委托）、_Extract Interface_（提取接口）、_Extract Superclass_（提取超类）、_Pull Members Up_（向上拉取成员）和 _Push Members Down_（向下推送成员）。 此外，IntelliJ IDEA 现在支持以多文本光标选择进行扩展范围的重构，包括 _Encapsulate Fields_（封装字段）、_Move Static Members_（移动 static 成员）、_Extract Delegate_（提取委托）、_Extract Interface_（提取接口）和 _Extract Superclass_（提取超类）。 要利用此功能，请将文本光标放置在您希望应用重构的各成员中，IDE 将自动在重构对话框中预选并检查这些成员。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959060.png"> </p><h3 id="改进了堆栈跟踪分析的导航"><a href="#改进了堆栈跟踪分析的导航" class="headerlink" title="改进了堆栈跟踪分析的导航"></a>改进了堆栈跟踪分析的导航</h3><p>为了改进堆栈跟踪分析并更快地解决 bug，IntelliJ IDEA 现在可以准确猜测报告中方法的位置，即使行号不可用或已偏离。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959089.png"> </p><h3 id="增强了动态-SQL-查询的污点分析"><a href="#增强了动态-SQL-查询的污点分析" class="headerlink" title="增强了动态 SQL 查询的污点分析"></a>增强了动态 SQL 查询的污点分析</h3><p>Ultimate IntelliJ IDEA 现在可以更好地分析 Java 和 Kotlin 中 SQL 的串联和内插，检测潜在的不安全查询，使代码避免可能的 SQL 注入漏洞。 </p><h1 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959113.png"> </p><h3 id="更出色的-Scala-3-支持"><a href="#更出色的-Scala-3-支持" class="headerlink" title="更出色的 Scala 3 支持"></a>更出色的 Scala 3 支持</h3><p>IntelliJ IDEA 2023.2 增强了 Scala 3 支持，专注于简化开发体验。 值得注意的改进包括对 Scala 3 枚举高亮显示的修正、枚举定义导航，以及多种上下文中枚举 case 的正确解析。 TASTy 反编译器得到显著增强，确保对 Akka、Cats、Play、ZIO 等流行 Scala 库进行准确的反编译。 此外，调试器中的 <code>scala-expression-compiler</code> 集成也将为 Scala 开发者提供更好的调试体验。 其他改进包括 Scala 3 通用应用方法的增强补全提示、对 IArray 的编辑器内支持，以及对“更少大括号”语法的改进支持。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959170.png"> </p><h3 id="更好的-sbt-支持"><a href="#更好的-sbt-支持" class="headerlink" title="更好的 sbt 支持"></a>更好的 sbt 支持</h3><p>此版本对 IntelliJ IDEA 的 sbt 支持进行了许多改进。 重新打开项目后，为 sbt 设置的环境变量将被保留并正确处理。 重新设计的设置页面 _File | Settings | Build, Execution, Deployment | Build Tools | sbt_（文件 | 设置 | 构建、执行、部署 | 构建工具 | sbt）更为易用，并新增了 _Environment variables_（环境变量）字段，因此，您可以将自定义环境变量传递到 sbt-shell 进程。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959482.png"> </p><h3 id="ScalaDoc-呈现"><a href="#ScalaDoc-呈现" class="headerlink" title="ScalaDoc 呈现"></a>ScalaDoc 呈现</h3><p>在这个版本中，ScalaDoc 的快速文档与 Javadoc 的更加一致。 现在，显示的声明中的注解、关键字和文字将根据所选主题高亮显示。 如果超出可用空间，扩展的特征和类的列表将分成多行。 此外，文档中现在也支持 Scala 3 关键字。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959505.png"> </p><h3 id="修正了类型推断错误"><a href="#修正了类型推断错误" class="headerlink" title="修正了类型推断错误"></a>修正了类型推断错误</h3><p>新版本对某些复杂或罕见情况下的无效类型推断进行了许多修正，例如类型具有复杂边界、sealed 特征层次结构可能不清晰或在复杂模式匹配中的情况。</p><h3 id="Zinc-作为默认编译器"><a href="#Zinc-作为默认编译器" class="headerlink" title="Zinc 作为默认编译器"></a>Zinc 作为默认编译器</h3><p>鉴于 Zinc 最近的性能改进，我们在 v2023.2 中将其设为默认增量编译器。 这确保了对 Scala 3 新功能（包括 <code>inline</code> 方法）的增量编译的全面支持。</p><h3 id="改进了源目录和目标目录的管理"><a href="#改进了源目录和目标目录的管理" class="headerlink" title="改进了源目录和目标目录的管理"></a>改进了源目录和目标目录的管理</h3><p>目标文件夹的子文件夹不再自动包含为源，除非它们被标记为托管。 这将加快在生成源代码的项目中进行搜索的速度。 此外，IDE 还为 <code>sbt-projectmatrix</code> 提供了更好的支持。 </p><h1 id="性能分析器"><a href="#性能分析器" class="headerlink" title="性能分析器"></a>性能分析器</h1><p>—– <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959514.png"> </p><h3 id="从-Run-（运行）工具窗口使用分析功能"><a href="#从-Run-（运行）工具窗口使用分析功能" class="headerlink" title="从 _Run_（运行）工具窗口使用分析功能"></a>从 _Run_（运行）工具窗口使用分析功能</h3><p>Ultimate 在 IntelliJ IDEA 2023.2 中，您可以直接从 _Run_（运行）工具窗口轻松访问 IntelliJ 分析器的功能。 使用新按钮，点击一下即可调用 _Attach IntelliJ Profiler_（附加 IntelliJ 分析器）和 _Capture Memory Snapshot_（捕获内存快照）操作，无需打开 _Profiler_（分析器）工具窗口或从头启动应用程序。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959496.png"> </p><h3 id="默认挂钟分析模式"><a href="#默认挂钟分析模式" class="headerlink" title="默认挂钟分析模式"></a>默认挂钟分析模式</h3><p>Ultimate 我们将挂钟分析模式设为默认选项，增强了 IntelliJ IDEA 2023.2 中的分析体验。 此分析方法会考虑在方法中花费的总时间，包括等待时间。 它以毫秒为测量单位，是更强大、更直观的选项。</p><h1 id="运行-调试"><a href="#运行-调试" class="headerlink" title="运行&#x2F;调试"></a>运行&#x2F;调试</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959539.png"> </p><h3 id="Reactor-Mono-和-Flux-值求算"><a href="#Reactor-Mono-和-Flux-值求算" class="headerlink" title="Reactor Mono 和 Flux 值求算"></a>Reactor <code>Mono</code> 和 <code>Flux</code> 值求算</h3><p>Ultimate 调试反应式应用程序时，您现在可以轻松求算 <code>Mono</code> 和 <code>Flux</code> 类型的监视和局部变量的值。 IDE 现在会在调试会话期间进行检测，并在 _Variables_（变量）视图中提供相应的 <code>get</code> 或 <code>collectList</code> 链接，点击即可立即计算 Reactive Streams 条目。 默认情况下，调试器会获取 <code>Flux</code> 的前 100 个条目。 您可以在 _File | Settings | Languages &amp; Frameworks | Reactive Streams_（文件 | 设置 | 语言和框架 | Reactive Streams）中配置此数量。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959545.png"> </p><h3 id="Gradle、Maven-和-JPS-项目的持续测试"><a href="#Gradle、Maven-和-JPS-项目的持续测试" class="headerlink" title="Gradle、Maven 和 JPS 项目的持续测试"></a>Gradle、Maven 和 JPS 项目的持续测试</h3><p>我们扩展了自动测试功能，使其与 Maven、Gradle 和 JPS 构建系统完全兼容。 我们还使持续测试模式更易激活。 要启用该模式，请使用 _Run&#x2F;Debug_（运行&#x2F;调试）工具窗口中新增的 _Rerun Automatically_（自动重新运行）按钮。 每当更改保存时，测试都会自动运行，对代码更新提供即时反馈。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959903.png"> </p><h3 id="return-语句的内联断点"><a href="#return-语句的内联断点" class="headerlink" title="return 语句的内联断点"></a>return 语句的内联断点</h3><p>IntelliJ IDEA 提供了对直接在 return 语句处设置断点的改进支持，类似于已在 lambda 表达式中实现的设置方式。 这一改进将为开发者提供更高的调试精度和更深入的代码分析，带来更有价值的代码行为和返回值洞察。 要设置内联断点，只需右键点击语句旁边的装订区域并选择 <em>return</em> 选项即可。</p><h1 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959958.png"> </p><h3 id="提交特定代码行的选项"><a href="#提交特定代码行的选项" class="headerlink" title="提交特定代码行的选项"></a>提交特定代码行的选项</h3><p>IntelliJ IDEA 2023.2 引入了一项备受期待的功能，可供有选择地提交代码区块的特定部分。 要执行部分提交，请选择区块中的行，然后从上下文菜单中调用 _Include these lines into commit_（将所选行包含到提交中）。 区块将被分为单独的行，所选行将被高亮显示。 您可以使用复选框或上下文菜单在选区中添加或排除行。 </p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959046.png"> </p><h3 id="轻松生成共享索引的新工具"><a href="#轻松生成共享索引的新工具" class="headerlink" title="轻松生成共享索引的新工具"></a>轻松生成共享索引的新工具</h3><p>IntelliJ IDEA 2023.2 提供了新的命令行工具，用于快速构建和上传共享索引。 它旨在简化团队合作并消除本地索引大型项目花费的时间。 新工具将简化为团队生成共享索引的过程，只需几下点击，无需多个脚本和服务。 <a href="https://blog.jetbrains.com/idea/2023/05/intellij-idea-2023-2-eap/#Newtoolforeasilygeneratingsharedindexes">了解详情</a>。 </p><h1 id="框架和技术"><a href="#框架和技术" class="headerlink" title="框架和技术"></a>框架和技术</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959036.png"> </p><h3 id="在-WSL-上运行和调试"><a href="#在-WSL-上运行和调试" class="headerlink" title="在 WSL 上运行和调试"></a>在 WSL 上运行和调试</h3><p>Tomcat Ultimate 从 IntelliJ IDEA 2023.2 开始，您可以在适用于 Linux 的 Windows 子系统 (WSL) 上运行和调试部署到 Tomcat 的应用程序。 要在 WSL 上使用基于 Tomcat 的应用程序，您需要在 <code>/etc/environment</code> 或 <code>~/.bashrc</code> 文件中声明 <code>JAVA_HOME</code> 环境变量。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959971.png"> </p><h3 id="在-HTTP-客户端中使用-TLS-发送-gRPC-请求"><a href="#在-HTTP-客户端中使用-TLS-发送-gRPC-请求" class="headerlink" title="在 HTTP 客户端中使用 TLS 发送 gRPC 请求"></a>在 HTTP 客户端中使用 TLS 发送 gRPC 请求</h3><p>Ultimate 您现在可以在 HTTP 客户端中通过传输层安全 (TLS) 发送 gRPC 请求。 TLS 提供加密和身份验证，确保数据传输的保密性和完整性。 请求语法支持 <code>https://</code> 和 <code>grpcs://</code> 架构。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959025.png"> </p><h3 id="针对-Swagger-Codegen-的改进"><a href="#针对-Swagger-Codegen-的改进" class="headerlink" title="针对 Swagger Codegen 的改进"></a>针对 Swagger Codegen 的改进</h3><p>Ultimate 设置 Swagger Codegen 配置时，IDE 现在将提供更好的用户体验。 我们重做了 _Edit Swagger Codegen Configuration_（编辑 Swagger Codegen 配置）对话框，让您可以更轻松地根据需求定制运行配置。 另外，您现在还可以直接从装订区域访问 Swagger Codegen 运行配置，无需指定额外设置。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959353.png"></p><h3 id="HTTP-客户端中对-Swagger-和-OpenAPI-架构的支持"><a href="#HTTP-客户端中对-Swagger-和-OpenAPI-架构的支持" class="headerlink" title="HTTP 客户端中对 Swagger 和 OpenAPI 架构的支持"></a>HTTP 客户端中对 Swagger 和 OpenAPI 架构的支持</h3><p>Ultimate HTTP 客户端现在能够理解 Swagger 和 OpenAPI 规范，并为 JSON 请求正文提供相应的代码补全选项。 <a href="https://www.jetbrains.com.cn/idea/whatsnew/2023-2/img/Redoc_UI_previews_for_OpenAPI_and_Swagger_files.png"><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959537.png"> </a> </p><h3 id="OpenAPI-和-Swagger-文件的-Redoc-UI-预览"><a href="#OpenAPI-和-Swagger-文件的-Redoc-UI-预览" class="headerlink" title="OpenAPI 和 Swagger 文件的 Redoc UI 预览"></a>OpenAPI 和 Swagger 文件的 Redoc UI 预览</h3><p>Ultimate IntelliJ IDEA 现已支持 OpenAPI 和 Swagger 规范文件（包括 YAML 和 JSON 文件）的 <a href="https://redocly.com/">Redoc UI</a> 预览，允许您在 IDE 内的 Redoc 和 Swagger UI 之间切换。 通过 Redocly 集成，您可以从 IntelliJ IDEA 中访问 <em>Try it</em> 控制台，使用它设置参数并向 API 发送请求。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959485.png"></p><h3 id="JavaScript-中的-JSON-正文补全"><a href="#JavaScript-中的-JSON-正文补全" class="headerlink" title="JavaScript 中的 JSON 正文补全"></a>JavaScript 中的 JSON 正文补全</h3><p>Ultimate IDE 现在为 JavaScript 代码中的 JSON 对象键提供补全，例如使用 <code>fetch()</code> 调用或引用 Axios 库的代码。 Spring MVC 服务器端点现已得到支持，未来将有更多服务器框架加入支持列表。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959552.png"> ###  HTTP 客户端中对 JavaScript 导入的支持 Ultimate 在 IntelliJ IDEA 2023.2 中，现在可以通过导入的模块共享 HTTP 客户端请求处理程序的通用 JavaScript 代码。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959618.png"> </p><h3 id="HTTP-客户端中响应的-PDF-和-HTML-预览"><a href="#HTTP-客户端中响应的-PDF-和-HTML-预览" class="headerlink" title="HTTP 客户端中响应的 PDF 和 HTML 预览"></a>HTTP 客户端中响应的 PDF 和 HTML 预览</h3><p>Ultimate IntelliJ IDEA 现在能够在 HTTP 客户端的请求结果中显示 PDF 和 HTML 文件的预览。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959614.png"> </p><h3 id="HTTP-客户端-CLI-中对-GraphQL-和-WebSocket-的支持"><a href="#HTTP-客户端-CLI-中对-GraphQL-和-WebSocket-的支持" class="headerlink" title="HTTP 客户端 CLI 中对 GraphQL 和 WebSocket 的支持"></a>HTTP 客户端 CLI 中对 GraphQL 和 WebSocket 的支持</h3><p>Ultimate 您现在可以在 IntelliJ IDEA 中使用 <a href="https://blog.jetbrains.com/idea/2022/12/http-client-cli-run-requests-and-tests-on-ci/">HTTP 客户端 CLI</a> 与 GraphQL API 交互，并与服务建立 WebSocket 连接，用于测试或自动化脚本。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959658.png"> </p><h3 id="VM-options-（虚拟机选项）中-Spring-Boot-配置键的自动补全"><a href="#VM-options-（虚拟机选项）中-Spring-Boot-配置键的自动补全" class="headerlink" title="_VM options_（虚拟机选项）中 Spring Boot 配置键的自动补全"></a>_VM options_（虚拟机选项）中 Spring Boot 配置键的自动补全</h3><p>Ultimate 设置新的 Spring Boot 运行配置时，_VM options_（虚拟机选项）字段为 <code>-D</code> 标志后面出现的键提供自动补全选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959859.png"> </p><h3 id="Spring-配置-Bean-不再需要注解处理器"><a href="#Spring-配置-Bean-不再需要注解处理器" class="headerlink" title="Spring 配置 Bean 不再需要注解处理器"></a>Spring 配置 Bean 不再需要注解处理器</h3><p>Ultimate 我们简化了在 IntelliJ IDEA 中使用 Spring 的自定义配置 Bean 时的用户体验。 IDE 现在会在属性和 YAML 配置文件中提供代码补全和验证，无需设置 Spring Boot 配置注解处理器。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959914.png"></p><h3 id="Kotlin-中对-Spring-AOP-的支持"><a href="#Kotlin-中对-Spring-AOP-的支持" class="headerlink" title="Kotlin 中对 Spring AOP 的支持"></a>Kotlin 中对 Spring AOP 的支持</h3><p>Ultimate 我们扩展了 IntelliJ IDEA 对在 Spring 应用程序中使用 AspectJ 的支持。 IDE 现在可为 Kotlin 代码提供分析和补全，此前已经为 Java 代码提供。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959945.png"> </p><h3 id="针对检测-YAML-文件中不匹配值类型的新检查"><a href="#针对检测-YAML-文件中不匹配值类型的新检查" class="headerlink" title="针对检测 YAML 文件中不匹配值类型的新检查"></a>针对检测 YAML 文件中不匹配值类型的新检查</h3><p>Ultimate 在 IntelliJ IDEA 2023.2 中，我们引入了一项新检查，旨在消除 <a href="https://hitchdev.com/strictyaml/why/implicit-typing-removed/">Norway Problem</a> 并防止对 YAML 文件中布尔值的意外误解。 当列表主要由字符串组成但包含布尔式文字时，IntelliJ IDEA 将高亮显示此文字，指示潜在的不一致，并建议为其添加引号。 如果列表主要由布尔式文字（例如 <code>true</code>、<code>false</code>、<code>off</code>、<code>on</code>、<code>yes</code> 或 <code>no</code>）组成，则偏离此模式的任何文字都将被高亮显示为可能的错误，不过，在这种情况下不会建议具体的快速修复。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959056.png"> </p><h3 id="对编辑-AsyncAPI-文件的支持"><a href="#对编辑-AsyncAPI-文件的支持" class="headerlink" title="对编辑 AsyncAPI 文件的支持"></a>对编辑 AsyncAPI 文件的支持</h3><p>Ultimate 现在，在 IntelliJ IDEA 中使用 AsyncAPI 规范格式更加简单。 IDE 支持架构验证功能，并为引用、_Endpoints_（端点）视图和 _Editor Preview_（编辑器预览）窗格提供了代码补全。 </p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959064.png"> </p><h3 id="在-Docker-镜像层内预览文件"><a href="#在-Docker-镜像层内预览文件" class="headerlink" title="在 Docker 镜像层内预览文件"></a>在 Docker 镜像层内预览文件</h3><p>现在可以在 _Services_（服务）工具窗口中轻松访问和预览 Docker 镜像层的内容。 从列表选择镜像，选择 _Show layers_（显示层），然后点击 _Analyze image for more information_（分析镜像以获得更多信息）。 这将打开层中存储的文件列表，您可以右键点击文件，然后点击 _Open File_（打开文件）（对于二进制文件，则为 _Download File_（下载文件）），在编辑器中轻松打开所选文件。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959981.png"></p><h3 id="将-Docker-容器设为作为运行配置的-Before-Launch-（启动前）任务运行"><a href="#将-Docker-容器设为作为运行配置的-Before-Launch-（启动前）任务运行" class="headerlink" title="将 Docker 容器设为作为运行配置的 _Before Launch_（启动前）任务运行"></a>将 Docker 容器设为作为运行配置的 _Before Launch_（启动前）任务运行</h3><p>现在，可以将 Docker 运行配置指定为 _Before Launch_（启动前）任务，从而在另一个配置之前运行。 IDE 将等待当前运行的容器恢复正常，然后再启动下一个运行配置。 要将 Docker 运行配置放入队列中，首先创建配置，然后通过 _Modify options | Add before launch task | Run configuration_（修改选项 | 添加启动前任务 | 运行配置）将其添加到相关容器中。 </p><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959225.png"></p><h3 id="对单个项目中多个-kubeconfig-文件的支持"><a href="#对单个项目中多个-kubeconfig-文件的支持" class="headerlink" title="对单个项目中多个 kubeconfig 文件的支持"></a>对单个项目中多个 kubeconfig 文件的支持</h3><p>Ultimate 这项新引入的功能允许您在单个项目中设置多个 kubeconfig 文件。 这简化了处理多个集群或在同一项目中的不同集群上使用环境的体验。 转到 _File | Settings | Build, Execution, Deployment | Kubernetes_（文件 | 设置 | 构建、执行、部署 | Kubernetes）即可设置文件。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959309.png"></p><h3 id="查看部署日志"><a href="#查看部署日志" class="headerlink" title="查看部署日志"></a>查看部署日志</h3><p>Ultimate 现在，您可以在 _Services_（服务）工具窗口中查看 Kubernetes 集群中的部署日志。 右键点击树中的 _Deployment_（部署），然后从上下文菜单中选择 _Follow Log_（关注日志）或 _Download Log_（下载日志）。 </p><h1 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959321.png"> </p><h3 id="针对-JavaScript-和-TypeScript-改进了错误格式设置"><a href="#针对-JavaScript-和-TypeScript-改进了错误格式设置" class="headerlink" title="针对 JavaScript 和 TypeScript 改进了错误格式设置"></a>针对 JavaScript 和 TypeScript 改进了错误格式设置</h3><p>Ultimate 我们在 IntelliJ IDEA 2023.2 中关注如何改进呈现 JavaScript 和 TypeScript 中类型错误的方式。 现在，您的错误和警告将以可读性更高的方式格式化，使代码中的问题更易发现。 这适用于所有 TypeScript 和一些最常见的 JavaScript 错误，甚至包括本地化后的错误。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959371.png"> </p><h3 id="CSS-嵌套支持"><a href="#CSS-嵌套支持" class="headerlink" title="CSS 嵌套支持"></a>CSS 嵌套支持</h3><p>Ultimate IntelliJ IDEA 2023.2 现在支持 <a href="https://www.w3.org/TR/css-nesting-1/">CSS 嵌套</a>。 我们实现了语法支持和检查，新检查会在嵌套选择器以标识符或函数符号开头时发出提醒。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959418.png"> </p><h3 id="Vue-语言服务器支持"><a href="#Vue-语言服务器支持" class="headerlink" title="Vue 语言服务器支持"></a>Vue 语言服务器支持</h3><p>Ultimate Vue 语言服务器（VLS，又称 Volar）支持可在快速导航和文档弹出窗口中提供更准确的错误检测和更好的类型信息。 VLS 默认将用于 TypeScript v5.0 及更高版本，TypeScript 服务的包装器将用于更低版本的 TypeScript。 在 _Settings | Languages &amp; Frameworks | TypeScript | Vue_（设置 | 语言和框架 | TypeScript | Vue）下，您可以将 Vue 服务设置为在所有 TypeScript 版本上使用 VLS 集成。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959448.png"> </p><h3 id="适用于-React-挂钩的新实时模板"><a href="#适用于-React-挂钩的新实时模板" class="headerlink" title="适用于 React 挂钩的新实时模板"></a>适用于 React 挂钩的新实时模板</h3><p>Ultimate 我们在 _Settings | Editor | Live Templates | React hooks_（设置 | 编辑器 | 实时模板 | React 挂钩）下为 React 挂钩添加了一组新的实时模板。 要使用实时模板，首先在编辑器中输入缩写，然后按 <em>Tab</em> 将其展开。 </p><h1 id="代码质量工作流"><a href="#代码质量工作流" class="headerlink" title="代码质量工作流"></a>代码质量工作流</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959591.png"> </p><h3 id="捆绑了-Qodana-代码质量平台"><a href="#捆绑了-Qodana-代码质量平台" class="headerlink" title="捆绑了 Qodana 代码质量平台"></a>捆绑了 Qodana 代码质量平台</h3><p>通过完全集成我们旨在适应任何 CI&#x2F;CD 管道的智能静态分析引擎 <a href="https://www.jetbrains.com.cn/qodana/?utm_campaign=idea_x_qodana&utm_medium=referral&utm_source=whatsnew">JetBrains Qodana</a>，IntelliJ IDEA 2023.2 简化了静态分析工具的配置。 这一集成具备两大重要优势。 首先，简单的配置让您只需点击几下即可触发分析、查看项目级问题，以及在首选 CI&#x2F;CD 系统中设置质量门。 其次，您现在无需离开 IDE 即可直接查看服务器端分析结果。 在这篇<a href="https://blog.jetbrains.com/qodana/2023/07/qodana-is-out-of-preview-with-first-class-jetbrains-ide-integration/">博文</a>中详细了解 Qodana 及其最新版本。 </p><h1 id="数据库工具"><a href="#数据库工具" class="headerlink" title="数据库工具"></a>数据库工具</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959039.png"> </p><h3 id="Redis-Cluster-支持"><a href="#Redis-Cluster-支持" class="headerlink" title="Redis Cluster 支持"></a>Redis Cluster 支持</h3><p>Ultimate 您现在可以连接到 Redis Cluster 并拥有与独立 Redis 相同的功能集。 连接到集群时，必须在所需 URL 之前输入 <code>jdbc:redis:cluster:</code>。 为此，您需要选择适当的连接类型。 如果连接到集群需要 SSH 隧道，应在 URL 中指明集群中所有节点的主机和端口。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959076.png"> </p><h3 id="架构迁移对话框的新-UI"><a href="#架构迁移对话框的新-UI" class="headerlink" title="架构迁移对话框的新 UI"></a>架构迁移对话框的新 UI</h3><p>Ultimate 在 v2023.2 中，我们重做了架构迁移功能。 主要区别在于，同一个对象现在位于对话框两个部分的同一行上，从而更清晰地显示将在目标架构中添加、移除或更改的对象。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959109.png"> </p><h3 id="数据编辑器的-Time-zone-（时区）设置"><a href="#数据编辑器的-Time-zone-（时区）设置" class="headerlink" title="数据编辑器的 _Time zone_（时区）设置"></a>数据编辑器的 _Time zone_（时区）设置</h3><p>Ultimate _Data Editor and Viewer_（数据编辑器和查看器）设置页面新增了 _Time zone_（时区）字段，用于设置显示 <code>datetime</code> 值的时区。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959129.png"> </p><h3 id="对-Redshift-中外部数据库和数据共享的支持"><a href="#对-Redshift-中外部数据库和数据共享的支持" class="headerlink" title="对 Redshift 中外部数据库和数据共享的支持"></a>对 Redshift 中外部数据库和数据共享的支持</h3><p>Ultimate 现在，共享数据库及其内容均会内省。 创建这些数据库的数据共享也会内省。 </p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>在这个版本中，我们为想要在 IDE 中使用特定 LSP 服务器提供编码辅助的插件开发者引入了 LSP API。 如果您已经创建了自己的编程语言或框架，则可以创建 LSP 服务器和插件以在 IDE 中获得支持。 请注意，此功能仅在 IDE 的付费版本中可用。 <a href="https://blog.jetbrains.com/platform/2023/07/lsp-for-plugin-developers/">了解详情</a>。 </li><li>我们分解了 <a href="https://plugins.jetbrains.com/plugin/12494-big-data-tools">Big Data Tools</a> 插件，允许单独使用其各个部分。 这让 IntelliJ IDEA 得到六个新插件：<a href="https://plugins.jetbrains.com/plugin/21704-kafka">Kafka</a>、<a href="https://plugins.jetbrains.com/plugin/21700-spark">Spark</a>、<a href="https://plugins.jetbrains.com/plugin/21702-flink">Flink</a>、<a href="https://plugins.jetbrains.com/plugin/21706-remote-file-systems">Remote File Systems</a>、<a href="https://plugins.jetbrains.com/plugin/21701-big-data-file-viewer">Big Data File Viewer</a> 和 <a href="https://plugins.jetbrains.com/plugin/21673-zeppelin">Zeppelin</a>。 如果您需要全部六个插件，仍然可以一键安装 Big Data Tools 插件。 </li><li><pre><code> IntelliJ IDEA 捆绑的 Android 插件现在提供 Android Studio Giraffe Beta 2 的所有功能，包括对 Android Gradle Plugin (AGP) 8.0.0 的支持。 请注意，此支持不包括需要登录 Firebase 帐号的功能。 </code></pre></li><li><pre><code>    从 2023.2 开始，最大堆大小 (-Xmx) 的默认值已更改为 2 GB。</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 更新日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages自定义域名</title>
      <link href="/2023/08/01/Github%20Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
      <url>/2023/08/01/Github%20Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-Pages自定义域名"><a href="#Github-Pages自定义域名" class="headerlink" title="Github Pages自定义域名"></a>Github Pages自定义域名</h1><p>当你想在网上发布内容时，配置Github Pages是一个很好的选择。如果你想要在自己的域名上发布，你可以使用Github Pages来创建自己的网站。本文将介绍如何使用Github Pages自定义域名。</p><p>这里呢先列出前置条件：</p><ul><li>您的Github Pages能正常访问</li><li>拥有自己的域名并备案成功</li></ul><p>关于如何创建Github Pages可以参考我之前的博客<a href="https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig" title="https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig">https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig</a></p><p>下面详细介绍如何配置</p><h2 id="一、配置CName"><a href="#一、配置CName" class="headerlink" title="一、配置CName"></a>一、配置CName</h2><p>这里需要注意的是，记录值就是你的Github Pages地址，记录类型填写CName，主机记录就是你的二级域名地址</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309959.png"></p><h2 id="二、添加CNAME文件"><a href="#二、添加CNAME文件" class="headerlink" title="二、添加CNAME文件"></a>二、添加CNAME文件</h2><p>首先找到你的主分支，这个分支要和Setting里面配置的分支一致。然后创建一个NAME文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309973.png"></p><p>文件内容是<code>二级域名.自己的域名</code></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309943.png"></p><h2 id="三、访问配置的CNAME"><a href="#三、访问配置的CNAME" class="headerlink" title="三、访问配置的CNAME"></a>三、访问配置的CNAME</h2><p>这里等待几分钟，我这里几秒钟就刷出来了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309952.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> GithubPages </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GithubPages免费搭建个人博客网站</title>
      <link href="/2023/07/29/Hexo-GithubPages%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2023/07/29/Hexo-GithubPages%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-GithubPages免费搭建个人博客网站"><a href="#Hexo-GithubPages免费搭建个人博客网站" class="headerlink" title="Hexo+GithubPages免费搭建个人博客网站"></a>Hexo+GithubPages免费搭建个人博客网站</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80%E5%89%8D%E8%A8%80">一、前言</a></li><li><a href="#%E4%BA%8CGithub%E9%85%8D%E7%BD%AE">二、Github配置</a><ul><li><a href="#%E6%96%B0%E5%BB%BA%E5%90%8C%E5%90%8D%E4%BB%93%E5%BA%93">新建同名仓库</a></li><li><a href="#%E9%85%8D%E7%BD%AEPages">配置Pages</a></li></ul></li><li><a href="#%E4%B8%89%E5%AE%89%E8%A3%85Hexo">三、安装Hexo</a></li><li><a href="#%E5%9B%9B%E9%85%8D%E7%BD%AEhexo-deployer-git">四、配置hexo-deployer-git</a></li><li><a href="#%E4%BA%94%E8%AE%BF%E9%97%AE">五、访问</a></li><li><a href="#%E5%85%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0">六、发布文章</a></li><li><a href="#%E4%B8%83%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">七、安装主题</a></li></ul><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我之前开了好几年的云服务器了，实际上使用场景并不是很多，感觉有点浪费。前两个月都给关掉了，现在呢琢磨着弄一个免费的云服务搭建个人博客。暂时先弄Github的，Gitee的那个要身份证，暂时弄不了，等等吧。</p><p>需要准备的环境：</p><p>windows的话需要准备node环境，可以关注某绿色软件回复：1009 不限速下载软件安装</p><p>这里列一下清单</p><ol><li>node环境</li><li>能访问github并准备好github账号</li></ol><h2 id="二、Github配置"><a href="#二、Github配置" class="headerlink" title="二、Github配置"></a>二、Github配置</h2><h3 id="新建同名仓库"><a href="#新建同名仓库" class="headerlink" title="新建同名仓库"></a>新建同名仓库</h3><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021025.png"></p><p>这里需要注意的有两点</p><ol><li>仓库名格式： username.github.io</li><li>仓库需要设置public，不能设置为private</li></ol><h3 id="配置Pages"><a href="#配置Pages" class="headerlink" title="配置Pages"></a>配置Pages</h3><p>在仓库主页点击Setting</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021979.png"></p><p>这里的配置按照以下方式配置即可</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021001.png"></p><p>OK，那么这里需要配置的完成了。</p><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>这里需要注意的是，需要先确认安装好了node环境，并配置了环境变量，可以通过cmd输入 <code>npm -v</code> 命令确认</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021887.png"></p><p>halo官网地址：<a href="https://hexo.io/zh-cn/" title="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>安装很简单，直接在cmd中输入 <code>npm install hexo-cli -g</code> 即可</p><p>此时，需要在本地建立一个仓库，这个仓库中的文件将来会同步到github上。</p><p>建立方式是在cmd中输入 <code>hexo init</code> ，需要说明的是，需要在指定目录执行该命令，我这里推荐一个简单的方式。</p><ol><li>进入需要初始化仓库的文件夹下</li><li>左上角输入cmd</li><li>回车</li></ol><p>这样打开的cmd窗口自动进入到当前目录了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021066.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021947.png"></p><p>这样就算是创建好了，可以看到生成了一堆文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021916.png"></p><h2 id="四、配置hexo-deployer-git"><a href="#四、配置hexo-deployer-git" class="headerlink" title="四、配置hexo-deployer-git"></a>四、配置hexo-deployer-git</h2><p>官方地址：<a href="https://github.com/hexojs/hexo-deployer-git" title="https://github.com/hexojs/hexo-deployer-git">https://github.com/hexojs/hexo-deployer-git</a></p><p>安装也很简单，直接在cmd中输入  <code>npm install hexo-deployer-git --save</code></p><p>需要注意的是，执行该命令，需要在上面hexo初始化的仓库目录下执行，否则是没有用的。</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021574.png"></p><p>执行完效果如上图</p><p>我们需要关注的是生成的_config.yml文件，这里我们打开这个文件，并对部分配置做修改。</p><ol><li><p>修改url</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021546.png"></p></li><li><p>修改deploy</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021633.png"></p></li><li><p>这个配置可改可不改</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021598.png"></p></li></ol><p>修改完毕保存后，我们在cmd中执行命令 <code>helo d</code> 即可部署我们的项目，稍等几分钟，就能访问到了。</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021587.png"></p><p>正常到这边就结束了，但是后续多上传几次后就会报错</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021533.png"></p><p>这个原因可能是被限制了，我们需要配置token</p><p>打开github的settings</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021254.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021142.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021941.png"></p><p>权限勾选第一个就行了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021896.png"></p><p>接下来我们需要在_config.yml中加上token</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021756.png"></p><h2 id="五、访问"><a href="#五、访问" class="headerlink" title="五、访问"></a>五、访问</h2><p>我的路由是：<a href="https://zysicyj.github.io/" title="https://zysicyj.github.io/">https://zysicyj.github.io/</a></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021678.png"></p><h2 id="六、发布文章"><a href="#六、发布文章" class="headerlink" title="六、发布文章"></a>六、发布文章</h2><p>官方文档：<a href="https://hexo.io/zh-cn/docs/commands" title="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p><p>执行<code>hexo -new</code> 可以创建文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021581.png"></p><p>执行上传命令 <code>helo g &amp;&amp; hexo d</code> ，然后等几分钟，能看到文件已经同步上去了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021450.png"></p><h2 id="七、安装主题"><a href="#七、安装主题" class="headerlink" title="七、安装主题"></a>七、安装主题</h2><p>我是用的主题是bufferfly <a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D" title="https://butterfly.js.org/posts/21cfbf15/#安裝">https://butterfly.js.org/posts/21cfbf15/#安裝</a></p><p>仓库根目录下拉取代码</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021441.png"></p><p>修改_config.yml</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021501.png"></p><p>安装插件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021568.png"></p><p>重新生成部署 <code>hexo -g &amp;&amp; hexo d</code></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021719.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021226.png"></p><p>后续的话还有不少可以优化的地方，比如hexo主题，分类和标签问题，图片显示问题等等，这个后续再写文章吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> GithubPages </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC学习笔记（上篇）</title>
      <link href="/2023/07/28/docs-IOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/28/docs-IOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC学习笔记（上篇）"><a href="#IOC学习笔记（上篇）" class="headerlink" title="IOC学习笔记（上篇）"></a>IOC学习笔记（上篇）</h1><p>学习视频地址：<a href="https://time.geekbang.org/course/intro/100042601?tab=catalog">https://time.geekbang.org/course/detail/100042601-184049</a></p><h2 id="IOC容器的职责"><a href="#IOC容器的职责" class="headerlink" title="IOC容器的职责"></a>IOC容器的职责</h2><ul><li>依赖处理 <ul><li>依赖查找</li><li>依赖注入</li></ul></li><li>生命周期管理 <ul><li>容器</li><li>托管的资源（Java Beans 或其他资源<a href="#fn1">[1]</a>）</li></ul></li><li>配置 <ul><li>容器</li><li>外部化配置</li><li>托管的资源（Java Beans或其他资源<a href="#fn1">[1:1]</a>）</li></ul></li></ul><h2 id="Ioc容器的实现"><a href="#Ioc容器的实现" class="headerlink" title="Ioc容器的实现"></a>Ioc容器的实现</h2><ul><li>Java SE <ul><li>Java Beans</li><li>Java ServiceLoader SPI<a href="#fn2">[2]</a></li><li>JNDI（Java Naming and Directory Interface）</li></ul></li><li>Java EE <ul><li>EJB（Enterprise Java Beans）</li><li>Servlet</li></ul></li><li>开源 <ul><li>Apache Avalon（<a href="http://avalon.apache.org/closed.html%EF%BC%89">http://avalon.apache.org/closed.html）</a></li><li>PicoContainer（<a href="http://picocontainer.xn--com-c16s">http://picocontainer.com）</a></li><li>Google Guice（<a href="https://github.com/google/guice%EF%BC%89">https://github.com/google/guice）</a></li><li>Spring Framework（<a href="https://spring.io/projects/spring-framework%EF%BC%89">https://spring.io/projects/spring-framework）</a></li></ul></li></ul><h2 id="传统IoC容器的实现"><a href="#传统IoC容器的实现" class="headerlink" title="传统IoC容器的实现"></a>传统IoC容器的实现</h2><ul><li>Java Beans作为IoC容器</li><li>特性 <ul><li><a href="https://www.wolai.com/mRb4QGrHGR47QcZ7kJ1awQ">依赖查找</a></li><li>生命周期管理</li><li>配置元信息</li><li>事件</li><li>自定义</li><li>资源管理</li><li>持久化</li></ul></li><li>规范 <ul><li>JavaBeans：<a href="https://_www.oracle.com_technetwork_java_javase_tech_index-jsp-138795/">https://www.oracle.com/technetwork/java/javase/tech/index-jsp-138795.html</a></li><li>BeanContext：<a href="https://_docs.oracle.com_javase_8_docs_technotes_guides_beans_spec_beancontext/">https://docs.oracle.com/javase/8/docs/technotes/guides/beans/spec/beancontext.html</a></li></ul></li></ul><h2 id="依赖查找VS依赖注入"><a href="#依赖查找VS依赖注入" class="headerlink" title="依赖查找VS依赖注入"></a>依赖查找VS依赖注入</h2><ul><li>优劣对比</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/548519/1690289784867-c1b13ab7-3e36-48fe-84b0-5f23dccc0c3b.png#from=url&id=cgbg5&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="构造器注入VS-Setter注入"><a href="#构造器注入VS-Setter注入" class="headerlink" title="构造器注入VS Setter注入"></a>构造器注入VS Setter注入</h2><p>在选择构造器注入（Constructor Injection）和Setter注入（Setter Injection）之间，需要根据具体的情况来决定。<br>构造器注入是通过类的构造器来注入依赖对象，通常在创建对象的过程中完成注入。这种方式可以保证对象在创建完成后，其依赖关系已经完全被注入，使得对象在使用时具备完整的状态。构造器注入也可以使对象的依赖关系更加明确，减少了对于Setter方法的依赖。<br>Setter注入是通过类的Setter方法来注入依赖对象，通常在对象创建后通过调用Setter方法来完成注入。这种方式可以在对象创建后动态地修改其依赖关系，灵活性更高。Setter注入也可以支持可选的依赖，即某些依赖对象可以不注入而使用默认值。<br>选择构造器注入还是Setter注入，可以考虑以下几个方面：</p><ol><li>对象的依赖关系是否必须要在创建时注入，还是可以在对象创建后进行注入。如果依赖关系必须在创建时注入，那么构造器注入是更合适的选择；如果依赖关系可以在创建后动态修改，那么可以考虑使用Setter注入。</li><li>对象的依赖关系是否是必需的，还是可选的。如果某些依赖是必需的，而且没有合适的默认值，那么构造器注入可以确保这些依赖在创建时被注入；如果某些依赖是可选的，可以使用Setter注入，并提供默认值。</li><li>对象的可测试性。构造器注入可以使得对象的依赖关系更加明确，方便进行单元测试，因为可以通过构造器传入模拟对象。而Setter注入在单元测试中可能需要通过反射等方式来设置依赖对象。</li></ol><p>综上所述，选择构造器注入还是Setter注入取决于具体的情况。如果依赖关系必须在创建时注入，而且是必需的，那么构造器注入是更合适的选择；如果依赖关系可以在创建后动态修改，或者某些依赖是可选的，那么可以考虑使用Setter注入。同时，还需要考虑对象的可测试性和代码的可读性等因素。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-什么是IOC？"><a href="#1-什么是IOC？" class="headerlink" title="1. 什么是IOC？"></a>1. 什么是IOC？</h3><p>IOC，全称为Inversion of Control（控制反转），是一种软件设计原则和编程思想。它是面向对象编程（OOP）中的一种设计模式，用于解耦对象间的依赖关系。<br>在传统的程序设计中，对象之间的依赖关系由对象自身负责管理。例如，一个类在创建其他类的对象时，需要直接调用其他类的构造函数或方法来获取所需的对象。这种方式使得类之间紧密耦合，难以进行单元测试、代码复用和替换等操作。<br>而IOC是一种反转了对象创建和依赖关系管理的控制方式。在IOC中，对象的创建和依赖关系的管理由一个容器（Container）来负责。容器负责创建对象，并将依赖的对象注入到需要的地方。对象只需要定义自己所需的依赖，而不需要关心如何创建和管理这些依赖。这样可以实现对象间的解耦，提高代码的可维护性和可扩展性。<br>IOC的核心思想是通过依赖注入（Dependency Injection）来实现对象之间的解耦。依赖注入是指将需要的依赖对象通过构造器、Setter方法或其他方式注入到对象中，而不是由对象自己创建或获取依赖对象。依赖注入可以通过配置文件、注解或自动扫描等方式来实现。<br>IOC的好处包括：</p><ol><li>解耦：IOC通过将对象的创建和依赖关系的管理交给容器来处理，使得对象之间的关系更加松散，减少了耦合。</li><li>可测试性：由于对象的依赖关系由容器注入，可以方便地进行单元测试，通过替换依赖对象来进行测试或模拟。</li><li>可扩展性：在IOC中，可以通过配置文件或注解等方式来管理对象的依赖关系，使得系统更加灵活，能够方便地进行功能扩展或替换。</li></ol><p>常见的IOC框架包括Spring Framework、Google Guice等。这些框架提供了依赖注入的功能，可以帮助开发者实现IOC，并提供了其他的功能和工具来支持应用程序的开发。<br>总结来说，IOC（控制反转）是一种软件设计原则和编程思想，通过将对象的依赖关系的管理交给容器来处理，实现对象间的解耦。IOC的核心是依赖注入，将对象的依赖通过构造器、Setter方法或其他方式注入到对象中。IOC可以提高代码的可维护性、可测试性和可扩展性。</p><h3 id="2-依赖查找和依赖注入的区别"><a href="#2-依赖查找和依赖注入的区别" class="headerlink" title="2. 依赖查找和依赖注入的区别"></a>2. 依赖查找和依赖注入的区别</h3><p>依赖查找（Dependency Lookup）和依赖注入（Dependency Injection）是两种不同的依赖关系管理方式。<br>依赖查找是指通过容器或上下文来查找所需的依赖对象。在依赖查找中，对象自己负责获取它所依赖的对象，通常是通过容器提供的方法或API来获取。例如，通过容器的getBean()方法来获取所需的对象。<br>依赖注入是指将依赖对象通过构造器、Setter方法或其他方式注入到对象中。在依赖注入中，对象不需要关心如何获取依赖对象，而是通过注入的方式来获取。注入可以通过配置文件、注解或自动扫描等方式实现。<br>区别如下：</p><ol><li>控制方式不同：依赖查找是由对象自己控制获取依赖对象，而依赖注入是由容器控制将依赖对象注入到对象中。</li><li>依赖关系的表达方式不同：依赖查找需要在对象中显式调用容器提供的方法来获取依赖对象，而依赖注入是通过构造器、Setter方法或其他方式将依赖对象注入到对象中。</li><li>对象的可测试性不同：依赖查找在单元测试中可能需要使用模拟对象等技术来替代真实的依赖对象，而依赖注入可以通过注入不同的依赖对象来进行单元测试。</li><li>对象的依赖关系管理方式不同：依赖查找需要在每个对象中显式获取依赖对象，而依赖注入将依赖对象的管理交给容器来处理，对象只需要定义自己所需的依赖，不需要关心如何获取和管理这些依赖。</li></ol><p>综上所述，依赖查找和依赖注入是两种不同的依赖关系管理方式。依赖查找由对象自己负责获取依赖对象，而依赖注入是由容器负责将依赖对象注入到对象中。选择依赖查找还是依赖注入取决于具体的需求和设计风格。依赖注入通常被认为是更推荐的一种方式，因为它能够实现对象间的解耦，提高代码的可维护性和可测试性。</p><h3 id="3-Spring作为IOC容器有什么优势"><a href="#3-Spring作为IOC容器有什么优势" class="headerlink" title="3. Spring作为IOC容器有什么优势"></a>3. Spring作为IOC容器有什么优势</h3><p>Spring作为一个流行的IOC（控制反转）容器，具有以下优势：</p><ol><li>松耦合：Spring实现了依赖注入（DI）机制，通过将对象的依赖关系交由容器管理，实现了对象间的松耦合。这使得代码更容易理解、维护和扩展，提高了系统的灵活性。</li><li>可测试性：Spring的依赖注入机制使得对象的依赖关系通过构造器、Setter方法或其他方式注入，而不是直接在对象内部创建或获取依赖对象。这样，在进行单元测试时，可以更方便地替换依赖对象，进行集成测试和模块测试。</li><li>面向接口编程：Spring鼓励面向接口编程，通过接口来定义具体类的依赖关系。这种编程方式使得代码更具扩展性和可替换性，有利于实现多态和依赖倒置原则。</li><li>AOP支持：Spring提供了AOP（面向切面编程）的支持，通过配置和代理技术，可以实现横切关注点（例如事务管理、日志记录等）的集中管理和复用。这样，可以将业务逻辑与横切关注点分离，提高代码的重用性和可维护性。</li><li>生命周期管理：Spring容器管理对象的生命周期，可以在对象创建、初始化和销毁时执行相应的操作。例如，通过配置初始化方法和销毁方法，可以在对象创建和销毁时执行特定的逻辑。</li><li>配置灵活性：Spring采用基于XML、注解或Java配置的方式来进行配置，使得配置更加灵活和可扩展。可以根据具体需求选择合适的配置方式，方便地切换和修改配置，而不需要修改代码。</li><li>集成丰富：Spring提供了丰富的集成支持，可以与各种开源和商业框架进行集成，如Hibernate、MyBatis、Spring MVC等。这些集成支持简化了开发过程，提高了开发效率和系统的整合能力。</li></ol><p>总的来说，Spring作为一个IOC容器，通过依赖注入、面向接口编程、AOP支持、生命周期管理和灵活的配置等特性，提供了优秀的开发框架和工具，使得开发者能够更加专注于业务逻辑的实现，提高了系统的可维护性、可测试性和可扩展性。</p><hr><ol><li>比如监听器可以通过外部引入 <a href="#fnref1">↩︎</a><a href="">↩︎</a></li><li>从JDK1.6版本开始引入 <a href="#fnref2">↩︎</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IOC </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
