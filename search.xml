<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Linux系列】使用虚拟机安装Linux系统</title>
      <link href="/4e7b516e.html"/>
      <url>/4e7b516e.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p><a href="https://blog.zysicyj.top/">首发博客地址</a></p><p><a href="https://blog.zysicyj.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/Linux/">系列文章地址</a></p><hr><h1 id="下载虚拟机"><a href="#下载虚拟机" class="headerlink" title="下载虚拟机"></a>下载虚拟机</h1><p>官网地址下载：<br><a href="https://customerconnect.vmware.com/en/downloads/info/slug/desktop_end_user_computing/vmware_workstation_player/17_0">https://customerconnect.vmware.com/en/downloads/info/slug/desktop_end_user_computing/vmware_workstation_player/17_0</a></p><p>不限速下载： 关注【程序员朱永胜】回复1018获取</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82463672484200.png"></p><h1 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h1><p>全部默认下一步即可</p><h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><p>不限速下载： 关注【程序员朱永胜】回复1019获取</p><h1 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82606553882100.png" alt="进来的页面"></p><p>点击创建虚拟机</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82638523988100.png" alt="选择镜像"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82658284659600.png" alt="名字无所谓，随便取"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82681313455400.png" alt="这里默认即可"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82694384392000.png" alt="默认即可"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82724928934500.png" alt="选择第一个"></p><p>此时要稍等一会</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82938594783400.png" alt="选择中文"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/82983688771900.png" alt="点击网络和主机名"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/83006553796800.png" alt="打开以太网，并完成"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/83055746173600.png" alt="点击安装位置，进去后什么都不做，直接点击完成"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/83112233352100.png" alt="点击开始安装，然后点击设置Root密码"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/83145462843800.png" alt="随便输入就行，我输入的是 123456"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/83168523299400.png" alt="点击完成，然后等待即可"></p><p>Loading。。。。。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/83984891048000.png" alt="安装完点击重启即可"></p><p>选择第一个选项进入，第一次加载会稍微慢一点</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/84077505535300.png" alt="输入用户名密码 我的是 root 123456"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/84127315893600.png" alt="ping百度是能ping通的，网络是没问题的"></p><p>这里就算初步安装完成啦！！</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【ES系列】（一）简介与安装</title>
      <link href="/b977578a.html"/>
      <url>/b977578a.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p><a href="https://blog.zysicyj.top/">首发博客地址</a></p><p><a href="https://blog.zysicyj.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/ES/">系列文章地址</a></p><hr><h1 id="为什么要学习ES"><a href="#为什么要学习ES" class="headerlink" title="为什么要学习ES?"></a>为什么要学习ES?</h1><ol><li><p><strong>强大的全文搜索和检索功能</strong>：Elasticsearch是一个开源的分布式搜索和分析引擎，它使用倒排索引和分布式计算等技术，提供了强大的全文搜索和检索功能。通过学习ES，你可以掌握如何构建复杂的查询、使用各种过滤器和聚合操作来优化搜索结果。</p></li><li><p><strong>实时数据分析和处理</strong>：ES支持实时数据的索引和查询，可以用于处理大规模的实时数据。通过学习ES，你可以了解如何使用ES进行实时数据的分析和处理，包括日志分析、事件处理、实时监控等。</p></li><li><p><strong>分布式存储和扩展性</strong>：ES是一个分布式系统，可以将数据分布在多个节点上，以提高存储容量和查询性能。学习ES可以帮助你了解如何搭建和管理一个分布式的ES集群，以及如何优化集群的性能和可靠性。</p></li><li><p><strong>文档导入和处理</strong>：ES支持各种数据源的导入和处理，包括数据库、文件、API等。学习ES可以让你掌握如何将不同数据源的数据导入到ES中，并进行相应的处理和转换。</p></li><li><p><strong>日志分析和搜索引擎优化</strong>：ES在日志分析和搜索引擎优化方面有很大的应用价值。通过学习ES，你可以学会如何利用ES进行日志的实时分析和搜索，以及如何优化搜索引擎的性能和相关性。</p></li><li><p><strong>全文搜索引擎的开发和应用</strong>：ES是一个非常流行的全文搜索引擎，很多企业和项目都在使用ES来构建全文搜索功能。学习ES可以为你提供开发全文搜索引擎的技能和经验，为你的职业发展增添竞争力。</p></li></ol><p>总结起来大概就是：</p><ul><li>分布式搜索引擎</li><li>大数据实时分析引擎</li></ul><h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></p><h1 id="ES发展历史"><a href="#ES发展历史" class="headerlink" title="ES发展历史"></a>ES发展历史</h1><p>Elasticsearch (ES)的发展历史可以追溯到2004年，当时Shay Banon创建了一个名为Compass的开源项目，作为一个基于Lucene的全文搜索引擎库。</p><p>随着时间的推移，Compass逐渐发展成为一个独立的搜索引擎，但在2009年，Shay Banon决定重新设计和重构该项目，以解决一些困扰他的设计和架构问题。于是，他创建了一个新的项目，命名为”elasticsearch”，并于2010年开源发布。</p><p>以下是ES的主要发展里程碑：</p><ul><li><p><strong>2010年</strong>：Elasticsearch首次开源发布。它基于Apache Lucene构建，提供了一个分布式搜索和分析引擎，用于实时数据的索引和查询。</p></li><li><p><strong>2013年</strong>：Elasticsearch正式成为Elastic公司的核心产品，并开始受到广泛关注和采用。此时，Elasticsearch已经成为开源搜索引擎的领导者之一。</p></li><li><p><strong>2014年</strong>：Elasticsearch发布了1.0版本，这是一个重要的里程碑，标志着ES的稳定性和成熟度。1.0版本引入了一些重要的特性和改进，如聚合操作和索引别名等。</p></li><li><p><strong>2015年</strong>：Elasticsearch发布了2.0版本，引入了许多重要的功能和改进，包括复合索引、文档级别的更新和删除、分布式索引排序等。</p></li><li><p><strong>2016年</strong>：Elasticsearch发布了5.0版本，这是一个重要的版本发布，引入了许多重大的改进和变化。5.0版本引入了新的分布式文档存储方式，并且废弃了一些旧的功能和API。</p></li><li><p><strong>2019年</strong>：Elasticsearch发布了7.0版本，这是一个重要的版本发布，引入了许多重要的功能和改进。7.0版本引入了Elasticsearch的新分布式协调引擎，称为”Zen 2”，以提高集群的稳定性和性能。</p></li><li><p><strong>2022年</strong>：Elasticsearch发布了8.0版本，这是一个重要的版本发布，引入了许多重要的功能和改进。原生支持NLP，速度、扩展和检索相关性提升，通过原生矢量搜索提高搜索相关性，默认开启安全功能</p></li></ul><p>随着时间的推移，Elasticsearch不断发展壮大，成为一个功能强大、可靠性高的分布式搜索和分析引擎。它被广泛应用于各种场景，包括日志分析、实时数据处理、全文搜索和商业智能等。并且，Elastic公司也推出了其他产品，如Kibana、Logstash和Beats等，构建了一个完整的数据分析和可视化平台，被称为”Elastic Stack”或”ELK Stack”。</p><p>去官网上瞄了一眼，还支持GPT了。。牛逼，大概看了文章说的是，通过插件可以访问ES内容，厉害了，有兴趣可以点击下面链接看看：</p><p><a href="https://www.elastic.co/cn/blog/chatgpt-elasticsearch-plugin-elastic-data">https://www.elastic.co/cn/blog/chatgpt-elasticsearch-plugin-elastic-data</a></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-31/80328249534200.png"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>如果你是本地练习，可以参考这篇文章安装Linux系统环境： <a href="https://blog.zysicyj.top/4e7b516e">https://blog.zysicyj.top/4e7b516e</a></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> ES </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【面试题精讲】Spring Framework有哪些模块？</title>
      <link href="/d2bacce5.html"/>
      <url>/d2bacce5.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><p><a href="https://blog.zysicyj.top/">首发博客地址</a></p><p><a href="https://blog.zysicyj.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E8%AE%B2/">系列文章地址</a></p><hr><p>Spring Framework是一个广泛使用的开源应用程序框架，用于构建企业级Java应用程序。它提供了许多不同的模块，用于支持各种不同的应用程序开发需求。以下是Spring Framework的一些核心模块：</p><ol><li><p><strong>Spring Core Container</strong>: 这是Spring框架的核心模块，提供了IoC（控制反转）和DI（依赖注入）功能。它包括以下子模块：</p><ul><li><strong>Beans</strong>: 提供了BeanFactory和ApplicationContext等核心容器的实现，用于管理应用程序中的对象（Bean）。</li><li><strong>Core</strong>: 提供了核心功能，如依赖注入、Bean的生命周期管理等。</li></ul></li><li><p><strong>Spring AOP</strong>: 提供了面向切面编程（AOP）的支持，用于在应用程序中实现横切关注点，如日志记录、事务管理等。</p></li><li><p><strong>Spring Data Access&#x2F;Integration</strong>: 提供了与数据库和其他数据源集成的支持，包括JDBC、ORM（对象关系映射）、JMS（Java消息服务）等。</p><ul><li><strong>JDBC</strong>: 简化了与数据库的交互，并提供了异常处理和资源管理。</li><li><strong>ORM</strong>: 提供了对多种ORM框架（如Hibernate、JPA等）的集成支持。</li><li><strong>JMS</strong>: 提供了与消息中间件的集成，支持消息驱动的应用程序。</li></ul></li><li><p><strong>Spring Web</strong>: 提供了构建Web应用程序的支持。</p><ul><li><strong>Web MVC</strong>: 实现了MVC（Model-View-Controller）模式，用于构建Web应用程序的控制器和视图层。</li><li><strong>Web WebSocket</strong>: 提供了对WebSocket协议的支持。</li><li><strong>Web WebSocket Client</strong>: 提供了WebSocket客户端的支持。</li><li><strong>Web WebSocket Servlet</strong>: 提供了用于处理WebSocket请求的Servlet。</li></ul></li><li><p><strong>Spring Security</strong>: 提供了身份验证、授权和安全性功能，用于保护应用程序的资源。</p></li><li><p><strong>Spring Test</strong>: 提供了测试Spring应用程序的支持，包括单元测试和集成测试。</p></li><li><p><strong>Spring Data</strong>: 提供了更高级的数据访问和操作功能，包括对NoSQL数据库和云服务的支持。</p></li><li><p><strong>Spring Boot</strong>: 虽然不是Spring Framework的核心模块，但是Spring Boot提供了快速构建基于Spring的应用程序的工具，自动配置和简化了应用程序的开发和部署。</p></li></ol><p>这些只是Spring Framework中的一些核心模块，还有许多其他模块用于提供不同类型的功能和集成支持。你可以根据应用程序的需求选择适当的模块来构建和扩展你的应用程序。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> 面试题精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring framework </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开发规范系列】（四）前端开发规范</title>
      <link href="/e821a36.html"/>
      <url>/e821a36.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.zysicyj.top/">首发博客地址</a></p><p><a href="https://blog.zysicyj.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/">系列文章地址</a></p><hr><p>引自《阿里规约》的开头片段：</p><p>现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶。对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。</p><h3 id="一-命名规范"><a href="#一-命名规范" class="headerlink" title="(一)命名规范"></a>(一)命名规范</h3><h4 id="1-1-1-项目命名"><a href="#1-1-1-项目命名" class="headerlink" title="1.1.1 项目命名"></a>1.1.1 项目命名</h4><p>全部采用小写方式，以中划线分隔。</p><p>正例：<code>mall-management-system</code></p><p>反例：<code>mall_management-system / mallManagementSystem</code></p><h4 id="1-1-2-目录命名"><a href="#1-1-2-目录命名" class="headerlink" title="1.1.2 目录命名"></a>1.1.2 目录命名</h4><p>全部采用小写方式，以中划线分隔，有复数结构时，要采用复数命名法，缩写不用复数。</p><p>正例：<code>scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc</code></p><p>反例：<code>script / style / demo_scripts / demoStyles / imgs / docs</code></p><p>【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名。</p><p>正例：<code>head-search / page-loading / authorized / notice-icon</code></p><p>反例：<code>HeadSearch / PageLoading</code></p><p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名。</p><p>正例：<code>page-one / shopping-car / user-management</code></p><p>反例：<code>ShoppingCar / UserManagement</code></p><h4 id="1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名"><a href="#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名" class="headerlink" title="1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h4><p>全部采用小写方式，以中划线分隔。</p><p>正例：<code>render-dom.js / signup.css / index.html / company-logo.png</code></p><p>反例：<code>renderDom.js / UserManagement.html</code></p><h4 id="1-1-4-命名严谨性"><a href="#1-1-4-命名严谨性" class="headerlink" title="1.1.4 命名严谨性"></a>1.1.4 命名严谨性</h4><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p><p>正例：<code>henan / luoyang / rmb</code> 等国际通用的名称，可视同英文。</p><p>反例：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p><p><strong>杜绝完全不规范的缩写，避免望文不知义：</strong></p><p>反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p><h3 id="二-HTML-规范-（Vue-Template-同样适用）"><a href="#二-HTML-规范-（Vue-Template-同样适用）" class="headerlink" title="(二)HTML 规范 （Vue Template 同样适用）"></a>(二)HTML 规范 （Vue Template 同样适用）</h3><h4 id="1-2-1-HTML-类型"><a href="#1-2-1-HTML-类型" class="headerlink" title="1.2.1 HTML 类型"></a>1.2.1 HTML 类型</h4><p>推荐使用 HTML5 的文档类型声明。建议使用 text&#x2F;html 格式的 HTML，避免使用 XHTML。XHTML 以及它的属性，比如<br>application&#x2F;xhtml+xml 在浏览器中的应用支持与优化空间都十分有限。</p><ul><li>规定字符编码</li><li>IE 兼容模式</li><li>规定字符编码</li><li>doctype 大写</li></ul><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/company-logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Company&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-缩进"><a href="#1-2-2-缩进" class="headerlink" title="1.2.2 缩进"></a>1.2.2 缩进</h4><p>缩进使用 2 个空格（一个 tab）。</p><p>嵌套的节点应该缩进。</p><h4 id="1-2-3-分块注释"><a href="#1-2-3-分块注释" class="headerlink" title="1.2.3 分块注释"></a>1.2.3 分块注释</h4><p>在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 英文 中文 start --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 英文 中文 end --&gt;</span></span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/header.jpg&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-语义化标签"><a href="#1-2-4-语义化标签" class="headerlink" title="1.2.4 语义化标签"></a>1.2.4 语义化标签</h4><p>HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签。</p><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-引号"><a href="#1-2-5-引号" class="headerlink" title="1.2.5 引号"></a>1.2.5 引号</h4><p>使用双引号(“ “) 而不是单引号(‘ ‘)。</p><p>正例： <code>&lt;div class=&quot;news-div&quot;&gt;&lt;/div&gt;</code></p><p>反例： <code>&lt;div class=&#39;news-div&#39;&gt;&lt;/div&gt;</code></p><h3 id="三-CSS-规范"><a href="#三-CSS-规范" class="headerlink" title="(三) CSS 规范"></a>(三) CSS 规范</h3><h4 id="1-3-1-命名"><a href="#1-3-1-命名" class="headerlink" title="1.3.1 命名"></a>1.3.1 命名</h4><ul><li>类名使用小写字母，以中划线分隔。</li><li>id 采用驼峰式命名。</li><li>scss 中的变量、函数、混合、placeholder 采用驼峰式命名。</li></ul><p>ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称。</p><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fw-800</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.heavy</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-选择器"><a href="#1-3-2-选择器" class="headerlink" title="1.3.2 选择器"></a>1.3.2 选择器</h4><p>1)css 选择器中避免使用标签名。从结构、表现、行为分离的原则来看，应该尽量避免 css 中出现 HTML 标签，并且在 css<br>选择器中出现标签名会存在潜在的问题。</p><p>2)很多前端开发人员写选择器链的时候不使用<br>直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到<br>DOM 末端的选择器，你应该总是考虑直接子选择器。</p><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &gt; <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-尽量使用缩写属性"><a href="#1-3-3-尽量使用缩写属性" class="headerlink" title="1.3.3 尽量使用缩写属性"></a>1.3.3 尽量使用缩写属性</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top-style</span>: none;</span><br><span class="line"><span class="attribute">font-family</span>: palatino, georgia, serif;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">padding-right</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">100%</span>/<span class="number">1.6</span> palatino, georgia, serif;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span> <span class="number">2em</span>;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-每个选择器及属性独占一行"><a href="#1-3-4-每个选择器及属性独占一行" class="headerlink" title="1.3.4 每个选择器及属性独占一行"></a>1.3.4 每个选择器及属性独占一行</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">background</span>:<span class="number">#00a0e9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#00a0e9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-5-省略-0-后面的单位"><a href="#1-3-5-省略-0-后面的单位" class="headerlink" title="1.3.5 省略 0 后面的单位"></a>1.3.5 省略 0 后面的单位</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式"><a href="#1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式" class="headerlink" title="1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式"></a>1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-LESS-规范"><a href="#四-LESS-规范" class="headerlink" title="(四) LESS 规范"></a>(四) LESS 规范</h3><h4 id="1-4-1-代码组织"><a href="#1-4-1-代码组织" class="headerlink" title="1.4.1 代码组织"></a>1.4.1 代码组织</h4><p>1)将公共 less 文件放置在 style&#x2F;less&#x2F;common 文件夹。</p><p>例：&#x2F;&#x2F; color.less,common.less</p><p>2)按以下顺序组织：</p><p>1、@import;</p><p>2、变量声明;</p><p>3、样式声明;</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;mixins/size.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@default-text-color:</span> <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-避免嵌套层级过多"><a href="#1-4-2-避免嵌套层级过多" class="headerlink" title="1.4.2 避免嵌套层级过多"></a>1.4.2 避免嵌套层级过多</h4><p>将嵌套深度限制在 3 级。对于超过 4 级的嵌套，给予重新评估。这可以避免出现过于详实的 CSS<br>选择器。避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于 20 行的嵌套规则出现。</p><p>不推荐：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="selector-class">.name</span>&#123;</span><br><span class="line">       <span class="attribute">color</span>:<span class="number">#fff</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main-title</span>&#123;</span><br><span class="line">   <span class="selector-class">.name</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#fff</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-JavaScript-规范"><a href="#五-JavaScript-规范" class="headerlink" title="(五) JavaScript 规范"></a>(五) JavaScript 规范</h3><h4 id="1-5-1-命名"><a href="#1-5-1-命名" class="headerlink" title="1.5.1 命名"></a>1.5.1 命名</h4><p>1)采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束。</p><p>反例： <code>_name / name_ / name$</code></p><p>2)方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</p><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p><p>其中 method 方法命名必须是动词或者动词+名词形式。</p><p>正例：<code>saveShopCarData / openShopCarInfoDialog</code></p><p>反例：<code>save / open / show / go</code></p><p>特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）。</p><p><code>add / update / delete / detail / get</code></p><p>附：函数方法常用的动词：</p><p>get 获取&#x2F;set 设置,<br>add 增加&#x2F;remove 删除<br>create 创建&#x2F;destory 移除<br>start 启动&#x2F;stop 停止<br>open 打开&#x2F;close 关闭,<br>read 读取&#x2F;write 写入<br>load 载入&#x2F;save 保存,<br>create 创建&#x2F;destroy 销毁<br>begin 开始&#x2F;end 结束,<br>backup 备份&#x2F;restore 恢复<br>import 导入&#x2F;export 导出,<br>split 分割&#x2F;merge 合并<br>inject 注入&#x2F;extract 提取,<br>attach 附着&#x2F;detach 脱离<br>bind 绑定&#x2F;separate 分离,<br>view 查看&#x2F;browse 浏览<br>edit 编辑&#x2F;modify 修改,<br>select 选取&#x2F;mark 标记<br>copy 复制&#x2F;paste 粘贴,<br>undo 撤销&#x2F;redo 重做<br>insert 插入&#x2F;delete 移除,<br>add 加入&#x2F;append 添加<br>clean 清理&#x2F;clear 清除,<br>index 索引&#x2F;sort 排序<br>find 查找&#x2F;search 搜索,<br>increase 增加&#x2F;decrease 减少<br>play 播放&#x2F;pause 暂停,<br>launch 启动&#x2F;run 运行<br>compile 编译&#x2F;execute 执行,<br>debug 调试&#x2F;trace 跟踪<br>observe 观察&#x2F;listen 监听,<br>build 构建&#x2F;publish 发布<br>input 输入&#x2F;output 输出,<br>encode 编码&#x2F;decode 解码<br>encrypt 加密&#x2F;decrypt 解密,<br>compress 压缩&#x2F;decompress 解压缩<br>pack 打包&#x2F;unpack 解包,<br>parse 解析&#x2F;emit 生成<br>connect 连接&#x2F;disconnect 断开,<br>send 发送&#x2F;receive 接收<br>download 下载&#x2F;upload 上传,<br>refresh 刷新&#x2F;synchronize 同步<br>update 更新&#x2F;revert 复原,<br>lock 锁定&#x2F;unlock 解锁<br>check out 签出&#x2F;check in 签入,<br>submit 提交&#x2F;commit 交付<br>push 推&#x2F;pull 拉,<br>expand 展开&#x2F;collapse 折叠<br>begin 起始&#x2F;end 结束,<br>start 开始&#x2F;finish 完成<br>enter 进入&#x2F;exit 退出,<br>abort 放弃&#x2F;quit 离开<br>obsolete 废弃&#x2F;depreciate 废旧,<br>collect 收集&#x2F;aggregate 聚集</p><h4 id="1-5-2-代码格式"><a href="#1-5-2-代码格式" class="headerlink" title="1.5.2 代码格式"></a>1.5.2 代码格式</h4><p>1)使用 2 个空格进行缩进。</p><p>正例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">  x += <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2)不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</p><blockquote><p>说明：任何情形，没有必要插入多个空行进行隔开。</p></blockquote><h4 id="1-5-3-字符串"><a href="#1-5-3-字符串" class="headerlink" title="1.5.3 字符串"></a>1.5.3 字符串</h4><p>统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处。</p><p>正例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> testDiv = <span class="string">&#x27;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="1-5-4-对象声明"><a href="#1-5-4-对象声明" class="headerlink" title="1.5.4 对象声明"></a>1.5.4 对象声明</h4><p>1)使用字面值创建对象。</p><p>正例： <code>let user = &#123;&#125;;</code></p><p>反例： <code>let user = new Object();</code></p><p>2)使用字面量来代替对象构造器。</p><p>正例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">user.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line">user.<span class="property">name</span> = <span class="number">0</span>;</span><br><span class="line">user.<span class="property">city</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="1-5-5-使用-ES6-7"><a href="#1-5-5-使用-ES6-7" class="headerlink" title="1.5.5 使用 ES6,7"></a>1.5.5 使用 ES6,7</h4><p>必须优先使用 ES6,7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p><blockquote><p>必须强制使用 ES6, ES7 的新语法，比如箭头函数、await&#x2F;async ， 解构， let ， for…of 等等</p></blockquote><h4 id="1-5-6-括号"><a href="#1-5-6-括号" class="headerlink" title="1.5.6 括号"></a>1.5.6 括号</h4><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。</p><p>正例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="title function_">doSomething</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) <span class="title function_">doSomething</span>();</span><br></pre></td></tr></table></figure><h4 id="1-5-7-undefined-判断"><a href="#1-5-7-undefined-判断" class="headerlink" title="1.5.7 undefined 判断"></a>1.5.7 undefined 判断</h4><p>永远不要直接使用 undefined 进行变量判断；使用 typeof 和字符串 ‘undefined’ 对变量进行判断。</p><p>正例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> person === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (person === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-8-条件判断和循环最多三层"><a href="#1-5-8-条件判断和循环最多三层" class="headerlink" title="1.5.8 条件判断和循环最多三层"></a>1.5.8 条件判断和循环最多三层</h4><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p><h4 id="1-5-9-this-的转换命名"><a href="#1-5-9-this-的转换命名" class="headerlink" title="1.5.9 this 的转换命名"></a>1.5.9 this 的转换命名</h4><p>对上下文 this 的引用只能使用 ‘self’ 来命名。</p><h4 id="1-5-10-慎用-console-log"><a href="#1-5-10-慎用-console-log" class="headerlink" title="1.5.10 慎用 console.log"></a>1.5.10 慎用 console.log</h4><p>因 console.log 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能。</p><h3 id="一-Vue-编码基础"><a href="#一-Vue-编码基础" class="headerlink" title="(一) Vue 编码基础"></a>(一) Vue 编码基础</h3><p>vue 项目规范以 Vue<br>官方规范（<a href="https://xie.infoq.cn/link?target=https://cn.vuejs.org/v2/style-guide/%25EF%25BC%2589">https://cn.vuejs.org/v2/style-guide/）</a><br>中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。</p><p>请仔细阅读 Vue 官方规范，切记，此为第一步。</p><h4 id="2-1-1-组件规范"><a href="#2-1-1-组件规范" class="headerlink" title="2.1.1 组件规范"></a>2.1.1 组件规范</h4><h5 id="1-组件名为多个单词。"><a href="#1-组件名为多个单词。" class="headerlink" title="1) 组件名为多个单词。"></a>1) 组件名为多个单词。</h5><p>组件名应该始终由多个单词组成，且命名规范为<code>KebabCase</code>格式。这样做可以避免与现有和未来的 HTML 元素冲突，因为所有 HTML<br>元素名称都是由单个单词组成的。</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;TodoItem&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Todo&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;todo-item&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-组件文件名为-PascalCase-格式"><a href="#2-组件文件名为-PascalCase-格式" class="headerlink" title="2) 组件文件名为 PascalCase 格式"></a>2) 组件文件名为 PascalCase 格式</h5><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- MyComponent.vue</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- myComponent.vue</span><br><span class="line">|- MyComponent.vue</span><br></pre></td></tr></table></figure><h5 id="3-基础组件文件名以-base-开头，使用完整单词而不是缩写。"><a href="#3-基础组件文件名以-base-开头，使用完整单词而不是缩写。" class="headerlink" title="3) 基础组件文件名以 base 开头，使用完整单词而不是缩写。"></a>3) 基础组件文件名以 base 开头，使用完整单词而不是缩写。</h5><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- base-button.vue</span><br><span class="line">|- base-table.vue</span><br><span class="line">|- base-icon.vue</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- MyButton.vue</span><br><span class="line">|- VueTable.vue</span><br><span class="line">|- Icon.vue</span><br></pre></td></tr></table></figure><h5 id="4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名"><a href="#4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名" class="headerlink" title="4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名"></a>4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名</h5><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- todo-list.vue</span><br><span class="line">|- todo-list-item.vue</span><br><span class="line">|- todo-list-item-button.vue</span><br><span class="line">|- user-profile-options.vue （完整单词）</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- TodoList.vue</span><br><span class="line">|- TodoItem.vue</span><br><span class="line">|- TodoButton.vue</span><br><span class="line">|- UProfOpts.vue （使用了缩写）</span><br></pre></td></tr></table></figure><h5 id="5-在-Template-模板中使用组件，应使用-PascalCase-格式，并使用自闭合组件。"><a href="#5-在-Template-模板中使用组件，应使用-PascalCase-格式，并使用自闭合组件。" class="headerlink" title="5) 在 Template 模板中使用组件，应使用 PascalCase 格式，并使用自闭合组件。"></a>5) 在 Template 模板中使用组件，应使用 PascalCase 格式，并使用自闭合组件。</h5><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent /&gt;</span><br><span class="line">&lt;Row&gt;&lt;table :column=&quot;data&quot;/&gt;&lt;/Row&gt;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component /&gt; &lt;row&gt;&lt;table :column=&quot;data&quot;/&gt;&lt;/row&gt;</span><br></pre></td></tr></table></figure><h5 id="6-组件的-data-必须是一个函数"><a href="#6-组件的-data-必须是一个函数" class="headerlink" title="6) 组件的 data 必须是一个函数"></a>6) 组件的 data 必须是一个函数</h5><p>当在组件中使用 data 属性时（除了 new Vue 外的任何地方），它的值必须是一个返回对象的函数。因为如果直接是一个对象，子组件之间的属性值会相互影响。</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;jack&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &#x27;jack&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-Prop-定义应该尽量详细"><a href="#7-Prop-定义应该尽量详细" class="headerlink" title="7) Prop 定义应该尽量详细"></a>7) Prop 定义应该尽量详细</h5><ul><li>必须使用 camelCase 驼峰命名</li><li>必须指定类型</li><li>必须加上注释，表明其含义</li><li>必须加上 required 或者 default，两者二选其一</li><li>如果有业务需要，必须加上 validator 验证</li></ul><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  status: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">    validator: function (value) &#123;</span><br><span class="line">      return [</span><br><span class="line">        &#x27;succ&#x27;,</span><br><span class="line">        &#x27;info&#x27;,</span><br><span class="line">        &#x27;error&#x27;</span><br><span class="line">      ].indexOf(value) !== -1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  userLevel: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-为组件样式设置作用域"><a href="#8-为组件样式设置作用域" class="headerlink" title="8) 为组件样式设置作用域"></a>8) 为组件样式设置作用域</h5><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button class=&quot;btn btn-close&quot;&gt;X&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .btn-close &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button class=&quot;btn btn-close&quot;&gt;X&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .btn-close &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="9-如果特性元素较多，应主动换行。"><a href="#9-如果特性元素较多，应主动换行。" class="headerlink" title="9) 如果特性元素较多，应主动换行。"></a>9) 如果特性元素较多，应主动换行。</h5><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot;</span><br><span class="line">    foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot;</span><br><span class="line">    foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot; foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot; foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot; foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-模板中使用简单的表达式"><a href="#2-1-2-模板中使用简单的表达式" class="headerlink" title="2.1.2 模板中使用简单的表达式"></a>2.1.2 模板中使用简单的表达式</h4><p>组件模板应该只包含简单的表达式，复杂的表达式应重构为计算属性或方法。复杂表达式会使你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而不是如何计算那个值。而且计算属性和方法使得代码可以重用。</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; normalizedFullName &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedFullName: function () &#123;</span><br><span class="line">    return this.fullName.split(&#x27; &#x27;).map(function (word) &#123;</span><br><span class="line">      return word[0].toUpperCase() + word.slice(1)</span><br><span class="line">    &#125;).join(&#x27; &#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      fullName.split(&#x27; &#x27;).map(function (word) &#123;</span><br><span class="line">        return word[0].toUpperCase() + word.slice(1)</span><br><span class="line">      &#125;).join(&#x27; &#x27;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-指令都使用缩写形式"><a href="#2-1-3-指令都使用缩写形式" class="headerlink" title="2.1.3 指令都使用缩写形式"></a>2.1.3 指令都使用缩写形式</h4><p>指令推荐使用缩写形式，用 : 表示 v-bind: ，用 @ 表示 v-on: ，用 # 表示 v-slot:</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  @input=&quot;onInput&quot;</span><br><span class="line">  @focus=&quot;onFocus&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  v-on:input=&quot;onInput&quot;</span><br><span class="line">  @focus=&quot;onFocus&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-4-标签顺序保持一致"><a href="#2-1-4-标签顺序保持一致" class="headerlink" title="2.1.4 标签顺序保持一致"></a>2.1.4 标签顺序保持一致</h4><p>单文件组件应该始终按照 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code> 的顺序排列。</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;...&lt;/template&gt;</span><br><span class="line">&lt;script&gt;...&lt;/script&gt;</span><br><span class="line">&lt;style&gt;...&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;...&lt;/template&gt;</span><br><span class="line">&lt;style&gt;...&lt;/style&gt;</span><br><span class="line">&lt;script&gt;...&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-5-必须为-v-for-设置键值-key"><a href="#2-1-5-必须为-v-for-设置键值-key" class="headerlink" title="2.1.5 必须为 v-for 设置键值 key"></a>2.1.5 必须为 v-for 设置键值 key</h4><h4 id="2-1-6-v-show-与-v-if-选择"><a href="#2-1-6-v-show-与-v-if-选择" class="headerlink" title="2.1.6 v-show 与 v-if 选择"></a>2.1.6 v-show 与 v-if 选择</h4><p>如果需要频繁切换元素的可见性，使用 v-show ；如果在运行时条件很少改变，使用 v-if。</p><h4 id="2-1-7-script-标签内部结构顺序"><a href="#2-1-7-script-标签内部结构顺序" class="headerlink" title="2.1.7 script 标签内部结构顺序"></a>2.1.7 script 标签内部结构顺序</h4><p>components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（按执行顺序排列） &gt; methods</p><h4 id="2-1-8-Vue-Router-规范"><a href="#2-1-8-Vue-Router-规范" class="headerlink" title="2.1.8 Vue Router 规范"></a>2.1.8 Vue Router 规范</h4><h5 id="1-页面跳转数据传递使用路由参数"><a href="#1-页面跳转数据传递使用路由参数" class="headerlink" title="1) 页面跳转数据传递使用路由参数"></a>1) 页面跳转数据传递使用路由参数</h5><p>页面跳转，例如从 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用路由参数进行传参，而不是将需要传递的数据保存在<br>vuex，然后在 B 页面取出 vuex 中的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let id = &#x27;123&#x27;;</span><br><span class="line">this.$router.push(&#123; name: &#x27;userCenter&#x27;, query: &#123; id: id &#125; &#125;);</span><br></pre></td></tr></table></figure><h5 id="2-使用路由懒加载（延迟加载）机制"><a href="#2-使用路由懒加载（延迟加载）机制" class="headerlink" title="2) 使用路由懒加载（延迟加载）机制"></a>2) 使用路由懒加载（延迟加载）机制</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/uploadAttachment&#x27;,</span><br><span class="line">  name: &#x27;uploadAttachment&#x27;,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    title: &#x27;上传附件&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  component: () =&gt; import(&#x27;@/view/components/uploadAttachment/index.vue&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-router-中的命名规范"><a href="#3-router-中的命名规范" class="headerlink" title="3) router 中的命名规范"></a>3) router 中的命名规范</h5><p>path、childrenPoints 命名规范采用<code>kebab-case</code>命名规范（尽量保持 vue 文件的目录结构一致，因为目录和文件名都是<code>kebab-case</code><br>，这样很方便找到对应的文件）</p><p>name 命名规范采用<code>KebabCase</code>命名规范且与 component 组件名保持一致！（要保持 keep-alive 特性，keep-alive 按照 component 的<br>name 进行缓存，所以两者必须高度保持一致）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">export const reload = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/reload&#x27;,</span><br><span class="line">    name: &#x27;reload&#x27;,</span><br><span class="line">    component: Main,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#x27;动态加载&#x27;,</span><br><span class="line">      icon: &#x27;icon iconfont&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;/reload/smart-reload-list&#x27;,</span><br><span class="line">        name: &#x27;SmartReloadList&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#x27;SmartReload&#x27;,</span><br><span class="line">          childrenPoints: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: &#x27;查询&#x27;,</span><br><span class="line">              name: &#x27;smart-reload-search&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              title: &#x27;执行reload&#x27;,</span><br><span class="line">              name: &#x27;smart-reload-update&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              title: &#x27;查看执行结果&#x27;,</span><br><span class="line">              name: &#x27;smart-reload-result&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        component: () =&gt;</span><br><span class="line">          import(&#x27;@/views/reload/smart-reload/smart-reload-list.vue&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="4-router-中的-path-命名规范"><a href="#4-router-中的-path-命名规范" class="headerlink" title="4) router 中的 path 命名规范"></a>4) router 中的 path 命名规范</h5><p>path 应采用<code>kebab-case</code>命名规范，并以 &#x2F; 开头，即使是 children 中的 path 也要以 &#x2F; 开头。例如：</p><ul><li>目的：经常需要找到某个 vue 文件时，可以立即找到它。如果 path 不以 &#x2F; 开头，由 parent 和 children 组成，可能需要在 router<br>文件中多次搜索才能找到。而以 &#x2F; 开头，可以立即搜索到对应的组件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/file&#x27;,</span><br><span class="line">  name: &#x27;File&#x27;,</span><br><span class="line">  component: Main,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    title: &#x27;文件服务&#x27;,</span><br><span class="line">    icon: &#x27;ios-cloud-upload&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/file/file-list&#x27;,</span><br><span class="line">      name: &#x27;FileList&#x27;,</span><br><span class="line">      component: () =&gt; import(&#x27;@/views/file/file-list.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/file/file-add&#x27;,</span><br><span class="line">      name: &#x27;FileAdd&#x27;,</span><br><span class="line">      component: () =&gt; import(&#x27;@/views/file/file-add.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/file/file-update&#x27;,</span><br><span class="line">      name: &#x27;FileUpdate&#x27;,</span><br><span class="line">      component: () =&gt; import(&#x27;@/views/file/file-update.vue&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-Vue-项目目录规范"><a href="#二-Vue-项目目录规范" class="headerlink" title="(二) Vue 项目目录规范"></a>(二) Vue 项目目录规范</h3><h4 id="2-2-1-基础"><a href="#2-2-1-基础" class="headerlink" title="2.2.1 基础"></a>2.2.1 基础</h4><ul><li>Vue 项目中的所有命名必须与后端命名保持一致。</li><li>比如权限：后端 privilege，前端无论是 router、store、api 等都必须使用 privilege 单词！</li></ul><h4 id="2-2-2-使用-Vue-CLI-脚手架"><a href="#2-2-2-使用-Vue-CLI-脚手架" class="headerlink" title="2.2.2 使用 Vue CLI 脚手架"></a>2.2.2 使用 Vue CLI 脚手架</h4><ul><li>使用 Vue CLI 3 来初始化项目，项目名按照上述命名规范命名。</li></ul><h4 id="2-2-3-目录说明"><a href="#2-2-3-目录说明" class="headerlink" title="2.2.3 目录说明"></a>2.2.3 目录说明</h4><ul><li>目录名按照上述命名规范，其中 components 组件使用大写驼峰命名，其余目录（除 components 组件目录外）使用 kebab-case 命名。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">src                               源码目录</span><br><span class="line">|-- api                              所有 API 接口</span><br><span class="line">|-- assets                           静态资源，包括 images、icons、styles 等</span><br><span class="line">|-- components                       公共组件</span><br><span class="line">|-- config                           配置信息</span><br><span class="line">|-- constants                        常量信息，项目中的所有枚举、全局常量等</span><br><span class="line">|-- directives                       自定义指令</span><br><span class="line">|-- filters                          过滤器，全局工具</span><br><span class="line">|-- datas                            模拟数据，临时存放</span><br><span class="line">|-- lib                              外部引用的插件存放及修改文件</span><br><span class="line">|-- mock                             模拟接口，临时存放</span><br><span class="line">|-- plugins                          插件，全局使用</span><br><span class="line">|-- router                           路由，统一管理</span><br><span class="line">|-- store                            Vuex，统一管理</span><br><span class="line">|-- themes                           自定义样式主题</span><br><span class="line">|-- views                            视图目录</span><br><span class="line">|   |-- role                             role 模块</span><br><span class="line">|   |-- |-- role-list.vue                    role 列表页面</span><br><span class="line">|   |-- |-- role-add.vue                     role 新建页面</span><br><span class="line">|   |-- |-- role-update.vue                  role 更新页面</span><br><span class="line">|   |-- |-- index.less                      role 模块样式</span><br><span class="line">|   |-- |-- components                      role 模块通用组件文件夹</span><br><span class="line">|   |-- employee                         employee 模块</span><br></pre></td></tr></table></figure><h5 id="1-api-目录"><a href="#1-api-目录" class="headerlink" title="1) api 目录"></a>1) api 目录</h5><ul><li><p>文件和变量命名要与后端保持一致。</p></li><li><p>此目录对应后端的 API 接口，按照每个 controller 一个 API JS 文件的方式组织。如果项目较大，可以根据业务进行子目录划分，但与后端保持一致。</p></li><li><p>API 文件中的方法名应与后端 API URL 尽量保持语义一致。</p></li><li><p>每个 API 方法都应添加注释，注释与后端的 Swagger 文档保持一致。</p></li></ul><p>正例：</p><p>后端 URL：EmployeeController.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/employee/add</span><br><span class="line">/employee/delete/&#123;id&#125;</span><br><span class="line">/employee/update</span><br></pre></td></tr></table></figure><p>前端：employee.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addEmployee: (data) =&gt; &#123;</span><br><span class="line">  return postAxios(&#x27;/employee/add&#x27;, data)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">updateEmployee: (data) =&gt; &#123;</span><br><span class="line">  return postAxios(&#x27;/employee/update&#x27;, data)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">deleteEmployee: (employeeId) =&gt; &#123;</span><br><span class="line">  return postAxios(&#x27;/employee/delete/&#x27; + employeeId)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="2-assets-目录"><a href="#2-assets-目录" class="headerlink" title="2) assets 目录"></a>2) assets 目录</h5><ul><li>assets 目录存放静态资源，包括 images、styles、icons 等静态资源，静态资源命名格式为 kebab-case。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|assets</span><br><span class="line">|-- icons</span><br><span class="line">|-- images</span><br><span class="line">|   |-- background-color.png</span><br><span class="line">|   |-- upload-header.png</span><br><span class="line">|-- styles</span><br></pre></td></tr></table></figure><h5 id="3-components-目录"><a href="#3-components-目录" class="headerlink" title="3) components 目录"></a>3) components 目录</h5><ul><li>此目录按组件进行目录划分，目录命名为 KebabCase，组件命名规则也为 KebabCase。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|components</span><br><span class="line">|-- error-log</span><br><span class="line">|   |-- index.vue</span><br><span class="line">|   |-- index.less</span><br><span class="line">|-- markdown-editor</span><br><span class="line">|   |-- index.vue</span><br><span class="line">|   |-- index.js</span><br><span class="line">|-- kebab-case</span><br></pre></td></tr></table></figure><h5 id="4-constants-目录"><a href="#4-constants-目录" class="headerlink" title="4) constants 目录"></a>4) constants 目录</h5><ul><li>此目录存放项目中的所有常量。如果常量在 Vue 中使用，请使用 Vue-enum<br>插件（<a href="https://xie.infoq.cn/link?target=https://www.npmjs.com/package/vue-enum">https://www.npmjs.com/package/vue-enum</a>）。</li></ul><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|constants</span><br><span class="line">|-- index.js</span><br><span class="line">|-- role.js</span><br><span class="line">|-- employee.js</span><br></pre></td></tr></table></figure><p>示例：employee.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">export const EMPLOYEE_STATUS = &#123;</span><br><span class="line">  NORMAL: &#123;</span><br><span class="line">    value: 1,</span><br><span class="line">    desc: &#x27;正常&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  DISABLED: &#123;</span><br><span class="line">    value: 1,</span><br><span class="line">    desc: &#x27;禁用&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  DELETED: &#123;</span><br><span class="line">    value: 2,</span><br><span class="line">    desc: &#x27;已删除&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const EMPLOYEE_ACCOUNT_TYPE = &#123;</span><br><span class="line">  QQ: &#123;</span><br><span class="line">    value: 1,</span><br><span class="line">    desc: &#x27;QQ登录&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  WECHAT: &#123;</span><br><span class="line">    value: 2,</span><br><span class="line">    desc: &#x27;微信登录&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  DINGDING: &#123;</span><br><span class="line">    value: 3,</span><br><span class="line">    desc: &#x27;钉钉登录&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  USERNAME: &#123;</span><br><span class="line">    value: 4,</span><br><span class="line">    desc: &#x27;用户名密码登录&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  EMPLOYEE_STATUS,</span><br><span class="line">  EMPLOYEE_ACCOUNT_TYPE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="5-router-与-store-目录"><a href="#5-router-与-store-目录" class="headerlink" title="5) router 与 store 目录"></a>5) router 与 store 目录</h5><ul><li><p>这两个目录必须根据业务进行拆分，不能放在一个 JS 文件中。</p></li><li><p>router 应与 views 目录的结构保持一致。</p></li><li><p>store 按业务进行拆分为不同的 JS 文件。</p></li></ul><h5 id="6-views-目录"><a href="#6-views-目录" class="headerlink" title="6) views 目录"></a>6) views 目录</h5><ul><li><p>命名要与后端、router、api 等保持一致。</p></li><li><p>components 中的组件应使用 PascalCase 规则。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|-- views                            视图目录</span><br><span class="line">|   |-- role                             role 模块</span><br><span class="line">|   |   |-- role-list.vue                    role 列表页面</span><br><span class="line">|   |   |-- role-add.vue                     role 新建页面</span><br><span class="line">|   |   |-- role-update.vue                  role 更新页面</span><br><span class="line">|   |   |-- index.less                      role 模块样式</span><br><span class="line">|   |   |-- components                      role 模块通用组件文件夹</span><br><span class="line">|   |   |   |-- role-header.vue                        role 头部组件</span><br><span class="line">|   |   |   |-- role-modal.vue                         role 弹出框组件</span><br><span class="line">|   |-- employee                         employee 模块</span><br><span class="line">|   |-- behavior-log                      行为日志 log 模块</span><br><span class="line">|   |-- code-generator                    代码生成器模块</span><br></pre></td></tr></table></figure><h4 id="2-2-4-注释说明"><a href="#2-2-4-注释说明" class="headerlink" title="2.2.4 注释说明"></a>2.2.4 注释说明</h4><ul><li>需要添加注释的地方包括：<ul><li>公共组件的使用说明</li><li>api 目录中的接口 JS 文件必须添加注释</li><li>store 中的 state、mutation、action 等必须添加注释</li><li>Vue 文件中的 template 必须添加注释，如果文件较大，可以添加 start 和 end 注释</li><li>Vue 文件的 methods，每个 method 必须添加注释</li><li>Vue 文件的 data，非常见单词必须添加注释</li></ul></li></ul><h4 id="2-2-5-其他"><a href="#2-2-5-其他" class="headerlink" title="2.2.5 其他"></a>2.2.5 其他</h4><h5 id="1-尽量避免手动操作-DOM"><a href="#1-尽量避免手动操作-DOM" class="headerlink" title="1) 尽量避免手动操作 DOM"></a>1) 尽量避免手动操作 DOM</h5><p>由于使用了 Vue 框架，所以在项目开发中尽量使用 Vue 的数据驱动更新 DOM，避免（除非万不得已）手动操作 DOM，包括增删改 DOM<br>元素、更改样式、添加事件等。</p><h5 id="2-删除无用代码"><a href="#2-删除无用代码" class="headerlink" title="2) 删除无用代码"></a>2) 删除无用代码</h5><p>由于使用了 Git&#x2F;SVN 等版本控制工具，必须及时删除无用代码，例如调试时的 console 语句、废弃的功能代码等。</p><p>规范的目的是为了编写高质量的代码，让团队成员每天都有愉悦的心情，让大家在一起感到快乐。</p><blockquote><p>参考：<a href="https://xie.infoq.cn/article/2048f2116f8df30115fca44c1%E3%80%82">https://xie.infoq.cn/article/2048f2116f8df30115fca44c1。</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发规范 </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开发规范系列】（三）代码提交规范</title>
      <link href="/8e340800.html"/>
      <url>/8e340800.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.zysicyj.top/">首发博客地址</a></p><p><a href="https://blog.zysicyj.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/">系列文章地址</a></p><hr><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol><li>切忌一次大量提交代码，每次fix或feat一个功能即需要提交到本地，可以不提交到远程</li><li>提交代码前必须先拉代码</li><li>一般情况下<strong>不得强制提交</strong></li><li>一个新功能拉取单独的分支开发，开发完后再合并到主分支上</li><li>禁止无意义说明提交</li><li>通常需要每天下班前推送本地仓库到远程仓库中</li></ol><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>每次提交代码到Git仓库时，都需要写commit message。通常情况下，commit message应该清晰明了，说明本次提交的目的和具体操作等。然而，在日常开发中，开发者们提交的commit<br>message千差万别，中英文混用，导致后续代码维护成本很高，有时候甚至自己都不知道修复的是什么问题。因此，为了解决这些问题，我们希望通过一种方式来监控用户的git<br>commit message，以提高代码规范，提高开发效率。</p><h2 id="二、约定"><a href="#二、约定" class="headerlink" title="二、约定"></a>二、约定</h2><p>我们要求所有项目的Commit Log都遵循一个精确的格式，以增加可读性，便于查看变更历史，并养成良好的git使用习惯。我们将这个规范作为git<br>hook的commit-msg和pre-receive执行，不符合规范的commit无法提交。全面执行后，可以自动执行以下操作：</p><ul><li>平台工具包可以直接根据commit log生成每次版本的changelog。</li><li>上线申请系统可以自动附带本次上线的commit log。</li><li>要求每次提交都认真思考，保持commit log的整洁性，每次commit都要具有局部完整性。</li></ul><h2 id="三、Commit-Log-Format"><a href="#三、Commit-Log-Format" class="headerlink" title="三、Commit Log Format"></a>三、Commit Log Format</h2><p>Commit Log包含三个部分：header、body、footer。其中，header是必需的，格式固定，body在必要时用于详细解释变更。</p><p>commit log格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;types&gt;(&lt;scopes&gt;): &lt;subject&gt;</span><br><span class="line"></span><br><span class="line">&lt;空行&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;空行&gt;</span><br><span class="line"></span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>注意：冒号后面必须有一个小写空格，types和scopes可以是多个，中间用逗号分隔。</p><p>举例：</p><ol><li>仅header：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fix(service,dao): 修改产品类型时不过滤产品Type</span><br><span class="line"></span><br><span class="line">仅header，涉及模块较多用*代替</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">refactor(*): 修改DTO模型前缀</span><br><span class="line"></span><br><span class="line">有header和body</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fix(language-service): Improve signature selection for pipes with args</span><br><span class="line"></span><br><span class="line">Pipes with arguments like `slice:0` or `slice:0:1` should not produce</span><br><span class="line"></span><br><span class="line">diagnostic errors.</span><br><span class="line"></span><br><span class="line">有header、body、footer</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func(core,logic): 添加礼包审核</span><br><span class="line"></span><br><span class="line">添加商品编辑审核状态和回调，blablablabla</span><br><span class="line"></span><br><span class="line">PRD：https://km.sankuai.com/page/194127085</span><br></pre></td></tr></table></figure><h3 id="1、Type"><a href="#1、Type" class="headerlink" title="1、Type"></a>1、Type</h3><p>英文，小写。必须是以下中的一个或多个：</p><ul><li>func: function，小功能。注意：feat改成func了，避免大家按feature这个大粒度来提交，期望是按小功能点分批提交，另外避免跟feature分支规范混淆。</li><li>fix: bug修复，包括编码过程中的逻辑修复，不特指线上bug修复。</li><li>refactor: 重构代码，非bug修复和性能优化，包括编码过程中的代码结构调整，不特指重构项目。</li><li>impr: improvement，小的代码设计改进。</li><li>perf: 性能优化。</li><li>apm: 仅监控打点、异常日志处理相关。</li><li>chore: 无关紧要的改动，例如删除用不到的注解、调整日志内容等。</li><li>jvm: 仅JVM参数变更。</li><li>pom: 仅依赖和版本变化。</li><li>conf: 仅配置变化，Spring配置、properties文件。</li><li>docs: 仅文档变更。</li><li>style: 代码格式调整，如import清理，代码格式化。</li><li>test: 单测和自动化case相关。</li><li>typo: 修复小的拼写错误。</li><li>wip: work in progress，少用，用于开发中的不完整提交，新工程开始时偶尔使用。</li></ul><h3 id="2、Scope"><a href="#2、Scope" class="headerlink" title="2、Scope"></a>2、Scope</h3><p>英文，小写。表示变更的包或模块范围，可以是多个组合，如果涉及范围较大，可以用*代替。各服务可以自行定义，组内同学可以轻易理解。通用scope列表如下：</p><ul><li>dto: dto结构变化。</li><li>core: core包。</li><li>service: service层代码。</li><li>dao: dao层代码。</li><li>sql: sql代码变更。</li></ul><p>除了上述通用字段外，各方向可以自行定义关键字。例如，以下是商品平台中定义的字段：</p><ul><li>price: 价格相关。</li><li>stock: 库存相关。</li><li>product: 商品相关。</li><li>idl: IDL文件变化。</li></ul><h3 id="3、Subject"><a href="#3、Subject" class="headerlink" title="3、Subject"></a>3、Subject</h3><p>中文。简要描述修改，结尾不要有句号。</p><h3 id="4、Body"><a href="#4、Body" class="headerlink" title="4、Body"></a>4、Body</h3><p>中文。修改的背景（为什么做这次修改），说明修改逻辑。</p><h3 id="5、Footer"><a href="#5、Footer" class="headerlink" title="5、Footer"></a>5、Footer</h3><p>中文。可以放置需求wiki或task链接，对以后其他同学查看很有用。</p><h1 id="四、使用插件生成日志"><a href="#四、使用插件生成日志" class="headerlink" title="四、使用插件生成日志"></a>四、使用插件生成日志</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/14151883891100.png" alt="commitizen"></p><p>安装该插件后，在提交页面会有一个按钮</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/14175704484600.png" alt="commitizen button"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/14351329253100.png" alt="commitizen prompt"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/14376424535900.png" alt="commitizen example"></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发规范 </tag>
            
            <tag> 代码提交规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【深入解读Redis系列】Redis系列（五）：切片集群详解</title>
      <link href="/750dce7c.html"/>
      <url>/750dce7c.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p><a href="https://blog.zysicyj.top/">首发博客地址</a></p><p><a href="https://blog.zysicyj.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/Redis/">系列文章地址</a></p><hr><h1 id="如果Redis内存很大怎么办？"><a href="#如果Redis内存很大怎么办？" class="headerlink" title="如果Redis内存很大怎么办？"></a>如果Redis内存很大怎么办？</h1><p>假设一台32G内存的服务器部署了一个Redis，内存占用了25G，会发生什么？</p><p>此时最明显的表现是Redis的响应变慢，甚至非常慢。</p><p>这是因为RDB快照是通过fork子线程来实现的，fork操作时间和Redis数据量成正相关，而fork时会阻塞主线程。</p><p>随着数据量的增加，fork耗时也会增加。所以，当对25G的文件进行fork时，Redis的响应就会变慢。</p><p>针对这种大数据量的存储，有什么其他的方案呢？</p><h1 id="什么是切片集群？"><a href="#什么是切片集群？" class="headerlink" title="什么是切片集群？"></a>什么是切片集群？</h1><p>Redis分片集群是一种将Redis数据库分散到多个节点上的方式，以提供更高的性能和可伸缩性。在分片集群中，数据被分为多个片段，每个片段存储在不同的节点上，这些节点可以是物理服务器或虚拟服务器。</p><p>Redis分片集群的主要目的是将数据分布在多个节点上，以便可以通过并行处理来提高读写吞吐量。每个节点负责处理一部分数据，并且在需要时可以进行扩展以适应更多的负载。此外，分片集群还提供了故障容错和高可用性的功能，即使其中一个节点发生故障，其他节点仍然可以继续工作。</p><p>比如我们将25GB的数据平均分成5份（当然，也可以不做均分），使用5个实例来保存，每个实例只需要保存5GB的数据。如下图所示：</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/1126545260900.png" alt="切片集群架构图"></p><p>这样，每个实例只有5GB内存，执行fork的时候就快得多，不会阻塞主线程。</p><p>实际业务中，大数据量通常是无法避免的。而切片集群，就是一个非常好的方案。</p><h1 id="如何保存更多数据？"><a href="#如何保存更多数据？" class="headerlink" title="如何保存更多数据？"></a>如何保存更多数据？</h1><p>我们可以纵向扩展也可以横向扩展</p><h2 id="纵向扩展"><a href="#纵向扩展" class="headerlink" title="纵向扩展"></a>纵向扩展</h2><p>即升级单个Redis实例的配置，如内存、硬盘、带宽、CPU等</p><h2 id="横向扩展"><a href="#横向扩展" class="headerlink" title="横向扩展"></a>横向扩展</h2><p>即增加Redis实例的个数</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/1796725224800.png" alt="纵向扩展和横向扩展对比图"></p><p>那么，纵向扩展和横向扩展的区别是什么呢？</p><p>纵向扩展（Scale Up）和横向扩展（Scale Out）是常见的两种扩展方式，用于提升系统的性能和处理能力。它们有着不同的特点和适用场景。</p><ol><li>纵向扩展：<br>纵向扩展是通过增加单个节点的硬件资源来提升系统性能。具体来说，是增加服务器的处理能力、存储容量或内存大小等。这可以通过升级服务器的CPU、内存、硬盘等硬件设备来实现。</li></ol><p>优点：</p><ul><li>简单方便：纵向扩展只需要升级现有的服务器，不需要进行系统的重构和数据迁移。</li><li>成本相对较低：相对于横向扩展，纵向扩展的成本通常更低，因为只需要购买更高配置的硬件设备。</li></ul><p>缺点：</p><ul><li>有限的扩展能力：纵向扩展的扩展能力受限于单个节点的硬件资源，无法无限扩展。</li><li>单点故障：如果纵向扩展的节点发生故障，整个系统的可用性将会受到影响。</li></ul><p>适用场景：</p><ul><li>对于单个节点负载较高、需要处理大量并发请求的应用场景，纵向扩展可以提供更好的性能和响应能力。</li><li>当数据集较小，可以被一个节点的硬件资源容纳时，纵向扩展是一种经济有效的方式。</li></ul><ol start="2"><li>横向扩展：<br>横向扩展是通过增加多个节点来提升系统的性能和处理能力。每个节点可以是一台独立的服务器或者虚拟机。数据在多个节点上进行分片存储，各个节点共同处理请求，并共享负载。</li></ol><p>优点：</p><ul><li>无限扩展能力：横向扩展可以通过增加更多节点来实现无限的扩展能力，可以根据需求动态添加或移除节点。</li><li>高可用性：由于数据分布在多个节点上，即使其中一个节点发生故障，其他节点仍然可以继续工作，提供高可用性。</li></ul><p>缺点：</p><ul><li>复杂性增加：横向扩展需要进行数据分片和负载均衡的设计和实现，增加了系统的复杂性。</li><li>成本较高：相对于纵向扩展，横向扩展需要购买更多的服务器或虚拟机，成本较高。</li></ul><p>适用场景：</p><ul><li>对于需要处理大量并发请求、数据集较大的应用场景，横向扩展可以提供更好的性能和可伸缩性。</li><li>当需要保证系统的高可用性和故障容错能力时，横向扩展是一种可行的方案。</li></ul><p>纵向扩展和横向扩展是两种不同的扩展方式，各自有着不同的优点和适用场景。在实际应用中，应根据具体需求和限制，选择合适的扩展方式来提升系统性能和可伸缩性。</p><p><strong>在面向百万、千万级别的用户规模时，横向扩展的Redis切片集群会是一个非常好的选择。</strong></p><h1 id="Redis是如何做分片的"><a href="#Redis是如何做分片的" class="headerlink" title="Redis是如何做分片的"></a>Redis是如何做分片的</h1><p>Redis通过一种称为哈希槽（hash slot）的机制来实现分片集群。哈希槽将整个数据集分成固定数量的槽，每个槽都有一个唯一的编号，通常是从0到16383。</p><p>在Redis分片集群中，有多个节点（主节点和从节点），每个节点负责存储其中一部分的槽数据。节点之间通过集群间通信协议进行数据的交互和同步。</p><p>当一个客户端发送一个命令到Redis分片集群时，集群会根据命令涉及的键的哈希值将命令路由到正确的槽上。这个槽所在的节点负责处理这个命令并返回结果给客户端。</p><p>具体的分片过程如下：</p><ol><li>客户端发送命令到Redis分片集群中的任意一个节点。</li><li>节点根据命令涉及的键的哈希值计算出对应的槽号。</li><li>节点根据槽号确定该槽所在的节点，并将命令路由到该节点。</li><li>该节点处理命令并返回结果给客户端。</li></ol><p>当节点加入或离开集群时，Redis分片集群会自动进行数据的重新分片和迁移，以保持数据的均衡和高可用性。具体的过程如下：</p><ol><li>当一个新节点加入集群时，集群会将一部分槽从现有节点迁移到新节点上，以平衡数据负载。</li><li>当一个节点离开集群时，集群会将该节点负责的槽迁移到其他可用节点上，以保证数据的可用性。</li></ol><p>通过哈希槽的机制，Redis分片集群实现了数据的分片和自动迁移，以提供高可用性、扩展性和容错性。同时，节点间的通信和数据同步保证了集群的一致性和可用性。</p><h1 id="详细说说哈希槽"><a href="#详细说说哈希槽" class="headerlink" title="详细说说哈希槽"></a>详细说说哈希槽</h1><p>Redis哈希槽是Redis集群中用于分片数据的一种机制。哈希槽的概念可以简单理解为一种数据分片的方式，将所有的数据分散存储在多个节点上，以实现数据的高可用和扩展性。</p><p>Redis集群中共有16384个哈希槽，每个槽可以存储一个键值对。当有新的键值对需要存储时，Redis使用一致性哈希算法将键映射到一个哈希槽中。每个Redis节点负责管理一部分哈希槽，节点之间通过Gossip协议来进行信息交换，以保证集群的一致性。</p><p>在Redis集群中，当一个节点宕机或者新增加一个节点时，哈希槽会重新分配。集群会自动将宕机节点上的槽重新分配给其他节点，并且保证每个节点分配的槽数尽量均等。这样可以保证数据的高可用性和负载均衡。</p><p>使用Redis哈希槽的好处是可以方便地扩展集群的容量，当数据量增大时，可以通过增加节点来分担数据的存储压力。同时，由于哈希槽的分配是自动的，所以对于应用程序而言是透明的，不需要额外的逻辑来处理数据分片。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/2427759491400.png"></p><h1 id="手动分配哈希槽"><a href="#手动分配哈希槽" class="headerlink" title="手动分配哈希槽"></a>手动分配哈希槽</h1><p>示意图中的切片集群一共有3个实例，假设有5个哈希槽，我们可以通过下面的命令手动分配哈希槽：实例1保存哈希槽0和1，实例2保存哈希槽2和3，实例3保存哈希槽4。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 172.16.19.3 –p 6379 cluster addslots 0,1</span><br><span class="line">redis-cli -h 172.16.19.4 –p 6379 cluster addslots 2,3</span><br><span class="line">redis-cli -h 172.16.19.5 –p 6379 cluster addslots 4</span><br></pre></td></tr></table></figure><p>在集群运行的过程中，key1和key2计算完CRC16值后，对哈希槽总个数5取模，再根据各自的模数结果，就可以被映射到对应的实例1和实例3上了。</p><blockquote><p>在手动分配哈希槽时，需要把16384个槽都分配完，否则Redis集群无法正常工作。</p></blockquote><h1 id="客户端如何定位数据？"><a href="#客户端如何定位数据？" class="headerlink" title="客户端如何定位数据？"></a>客户端如何定位数据？</h1><p>在Redis集群中，客户端定位数据的过程如下：</p><ol><li>客户端根据键使用一致性哈希算法（Consistent Hashing）计算哈希值。</li><li>根据哈希值，客户端将键映射到某个哈希槽。</li><li>客户端向集群的其中一个节点发送命令请求。</li><li>接收到请求的节点根据哈希槽的分配信息，确定哪个节点负责管理该哈希槽。</li><li>负责该哈希槽的节点将命令请求转发给对应的数据节点。</li><li>数据节点执行命令，将结果返回给负责该哈希槽的节点。</li><li>负责该哈希槽的节点将结果返回给客户端。</li></ol><p>通过这个过程，客户端可以定位到存储在Redis集群中的数据，并且可以与集群进行交互。这种方式使得客户端可以直接与任意一个节点进行通信，而不需要知道具体的数据分布和节点拓扑。</p><p>一致性哈希算法是用来解决数据分片和负载均衡的常用方法，它可以将数据均匀地分布到不同的节点上，避免某个节点负载过高。同时，当节点发生故障或者新增节点时，一致性哈希算法可以最小化数据的迁移量，使得集群可以快速调整和恢复。</p><p>需要注意的是，Redis集群的客户端不需要手动实现一致性哈希算法，因为该算法已经由Redis集群内部实现。客户端只需要使用对应的库或驱动程序，如<code>redis-py-cluster</code><br>库，来连接Redis集群，并且直接使用普通的Redis命令进行数据操作。库会自动处理数据的定位和节点间的转发。</p><h1 id="Moved重定向命令"><a href="#Moved重定向命令" class="headerlink" title="Moved重定向命令"></a>Moved重定向命令</h1><p>在Redis集群中，当客户端向一个节点发送命令请求时，如果该节点不负责处理该命令所涉及的哈希槽，它会返回一个MOVED重定向错误。</p><p>MOVED重定向错误包含了正确的节点信息，告诉客户端应该向哪个节点重新发送命令。客户端可以根据MOVED错误中的信息，更新自己的节点映射表，然后重新发送命令到正确的节点。</p><p>以下是一个使用Python的redis-py库处理MOVED重定向错误的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Redis集群连接</span></span><br><span class="line">cluster = redis.RedisCluster(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">7000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储数据</span></span><br><span class="line">cluster.<span class="built_in">set</span>(<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = cluster.get(<span class="string">&#x27;key1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">except</span> redis.exceptions.RedisClusterError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e, redis.exceptions.ResponseError) <span class="keyword">and</span> e.args[<span class="number">0</span>].startswith(<span class="string">&#x27;MOVED&#x27;</span>):</span><br><span class="line">        <span class="comment"># 解析MOVED错误信息</span></span><br><span class="line">        _, slot, addr = e.args[<span class="number">0</span>].split()</span><br><span class="line">        host, port = addr.rsplit(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 更新节点映射表</span></span><br><span class="line">        cluster.connection_pool.nodes.set_node(host, <span class="built_in">int</span>(port))</span><br><span class="line">        <span class="comment"># 重新发送命令</span></span><br><span class="line">        value = cluster.get(<span class="string">&#x27;key1&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">cluster.close()</span><br></pre></td></tr></table></figure><p>在以上示例中，如果客户端收到一个MOVED错误，它会解析错误信息，获取正确的节点地址，并更新节点映射表。然后，客户端可以重新发送命令到正确的节点进行数据操作。</p><p>需要注意的是，MOVED重定向错误只会在Redis集群模式下发生，单机模式不会出现该错误。因此，只有在使用Redis集群时，才需要处理MOVED重定向错误。在实际开发中，可以使用相应的库或驱动程序来自动处理MOVED错误，而无需手动编写处理逻辑。</p><h1 id="ASK命令"><a href="#ASK命令" class="headerlink" title="ASK命令"></a>ASK命令</h1><p>在Redis集群中，当客户端向一个节点发送一个不可处理的命令时，节点会返回一个ASK错误，指示客户端应该向指定的节点发送命令。客户端可以根据ASK错误中的信息，更新自己的节点映射表，并将命令发送到正确的节点上。</p><p>以下是一个使用Python的redis-py库处理ASK命令的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Redis集群连接</span></span><br><span class="line">cluster = redis.RedisCluster(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">7000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储数据</span></span><br><span class="line">cluster.<span class="built_in">set</span>(<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = cluster.get(<span class="string">&#x27;key1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">except</span> redis.exceptions.RedisClusterError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e, redis.exceptions.ResponseError) <span class="keyword">and</span> e.args[<span class="number">0</span>].startswith(<span class="string">&#x27;ASK&#x27;</span>):</span><br><span class="line">        <span class="comment"># 解析ASK错误信息</span></span><br><span class="line">        _, slot, addr = e.args[<span class="number">0</span>].split()</span><br><span class="line">        host, port = addr.rsplit(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 更新节点映射表</span></span><br><span class="line">        cluster.connection_pool.nodes.set_node(host, <span class="built_in">int</span>(port))</span><br><span class="line">        <span class="comment"># 重新发送命令</span></span><br><span class="line">        value = cluster.get(<span class="string">&#x27;key1&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">cluster.close()</span><br></pre></td></tr></table></figure><p>在以上示例中，如果客户端收到一个ASK错误，它会解析错误信息，获取正确的节点地址，并更新节点映射表。然后，客户端可以重新发送命令到正确的节点进行数据操作。</p><p>需要注意的是，ASK命令只会在Redis集群模式下发生，单机模式不会出现该错误。因此，只有在使用Redis集群时，才需要处理ASK命令。在实际开发中，可以使用相应的库或驱动程序来自动处理ASK错误，而无需手动编写处理逻辑。</p><h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h1><p>可以看到，由于负载均衡，Slot 2 中的数据已经从实例 2 迁移到了实例 3，但是，客户端缓存仍然记录着“Slot 2 在实例 2”的信息，所以会给实例<br>2 发送命令。实例 2 给客户端返回一条 MOVED 命令，把 Slot 2 的最新位置（也就是在实例 3 上），返回给客户端，客户端就会再次向实例<br>3 发送请求，同时还会更新本地缓存，把 Slot 2 与实例的对应关系更新过来。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/2667132575500.png"></p><p>需要注意的是，在上图中，当客户端给实例 2 发送命令时，Slot 2 中的数据已经全部迁移到了实例 3。在实际应用时，如果 Slot 2<br>中的数据比较多，就可能会出现一种情况：客户端向实例 2 发送请求，但此时，Slot 2 中的数据只有一部分迁移到了实例<br>3，还有部分数据没有迁移。在这种迁移部分完成的情况下，客户端就会收到一条 ASK 报错信息，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET hello:key</span><br><span class="line">(error) ASK 13320 172.16.19.5:6379</span><br></pre></td></tr></table></figure><p>这个结果中的 ASK 命令就表示，客户端请求的键值对所在的哈希槽 13320，在 172.16.19.5 这个实例上，但是这个哈希槽正在迁移。此时，客户端需要先给<br>172.16.19.5 这个实例发送一个 ASKING 命令。这个命令的意思是，让这个实例允许执行客户端接下来发送的命令。然后，客户端再向这个实例发送<br>GET 命令，以读取数据。</p><h1 id="ASK命令详解"><a href="#ASK命令详解" class="headerlink" title="ASK命令详解"></a>ASK命令详解</h1><p>在下图中，Slot 2 正在从实例 2 往实例 3 迁移，key1 和 key2 已经迁移过去，key3 和 key4 还在实例 2。客户端向实例 2 请求 key2<br>后，就会收到实例 2 返回的 ASK 命令。</p><p>ASK 命令表示两层含义：第一，表明 Slot 数据还在迁移中；第二，ASK 命令把客户端所请求数据的最新实例地址返回给客户端，此时，客户端需要给实例<br>3 发送 ASKING 命令，然后再发送操作命令。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-30/2785883782300.png"></p><p>和 MOVED 命令不同，<strong>ASK 命令并不会更新客户端缓存的哈希槽分配信息</strong>。所以，在上图中，如果客户端再次请求 Slot 2 中的数据，它还是会给实例<br>2 发送请求。这也就是说，ASK 命令的作用只是让客户端能给新实例发送一次请求，而不像 MOVED 命令那样，会更改本地缓存，让后续所有命令都发往新实例。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 切片集群 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 分片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FLAG】老婆和我要减肥啦</title>
      <link href="/ddbf1a60.html"/>
      <url>/ddbf1a60.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p>老婆目标孕前体重，现在106，要减到90<br>我目标也是<strong>孕前</strong>体重，现在185，要减到140</p><p>不要怀疑啊。。结婚一年不到，涨了40多斤</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何查看windows冲突的快捷键【未完】</title>
      <link href="/6978c061.html"/>
      <url>/6978c061.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://github.com/BlackINT3/OpenArk/releases">官网下载</a></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-28/24473982253300.png"></p><p><a href="">免费不限速下载</a><br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-28/24629599457800.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>一进来是这样子的</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-28/24699431276900.png"></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>今天去看看我姐（老婆）新开的超市</title>
      <link href="/648fb133.html"/>
      <url>/648fb133.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>昨晚写博客到12点多，今天困死了，比较意外的是，早上爸爸没有叫我，今天早上是爸爸和小舅送的葡萄。</p><p>所以呢，今早睡得很晚，然后6点多才醒，睡得真舒服，平时5点左右就要起床啦！</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/4957977491000.png"></p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>上午也没干啥，开车带老婆去太乙菜场旁边的小区交易一个二手玩具，就是下面这个啦。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/5350305964900.png"></p><p>老婆说这个火车还能动，要不然就值20块钱，嘿嘿！</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/5242119028000.jpg" alt="我们家宝宝还有姐姐家儿子"></p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>玩具拿回来之后，老婆在葡萄园和我爸唠叨，我去给闺女买梨，闺女和老婆这两天好像是被我传染了。都咳嗽和头疼</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/5527271416300.png"></p><p>我小舅前两天也被我传染了，昨天还不舒服呢，今天已经差不多啦，身体真棒</p><p>可惜哦，我回来的路上老婆说，我妈已经买好了，emm。。<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/5630901268000.png"></p><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>上午最后一件事呀，就是接表弟（小舅儿子）过来吃个饭，唠唠嗑。</p><p>他这不是要开学了嘛，昨天回学校的，学校离这里又近，只有三公里左右，我就开车去接过来了。</p><p>他是在南新大上的大学，专业是机器人，这个专业吧当时还是我选的。想上计科的，可惜分数差了一点。。emm</p><p>今年已经大四了，努力备战考研中，目标是本校研究生，加油哦，希望你能考研成功！</p><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><p>之后呢，就是吃饭啦，今天的午饭成员有这么几个：</p><ul><li>爸爸</li><li>妈妈</li><li>老婆</li><li>小舅</li><li>表弟</li><li>我</li></ul><p>实际吃饭的是几个呢。。</p><ul><li>爸爸</li><li>妈妈</li><li>老婆（才吃过不饿）</li><li>小舅</li><li>表弟（在学校才吃过没多久）</li><li>我（才吃过。。但是我还是想吃呀。。emm）</li></ul><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>吃完饭就送表弟到他学校了，然后我们就出发去姐姐正在装修的超市。还是挺远的哦，小区是《紫樾府》，在栖霞星景路1号。到那要四五十分钟呢。。</p><p>超市名字是《蛙仔便利店》</p><p>老婆说，这个名字是因为想做成连锁店，她二姐和大姐都是开超市的，也都是在栖霞。二姐租了一个门面，然后买了一个门市。大姐租了一个门面，都是开的超市，姐姐也是跟着她们干的。</p><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><p>小区是新校区，超市门口的马路也还在施工中，还没弄完。姐姐说还得半年吧，断头路才能打通。好长时间呢。。</p><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p>我姐夫瘦不瘦，最近忙死了，然后更瘦了，之前就很瘦。店铺还在上货中，还有很多货都没上齐呢，好在二姐和大姐夫都很热情，这两天都来帮忙的，轻松不少。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7103603471200.jpg"></p><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p>闲暇之余，翻看了CSDN，收到推送才发现写博客已经好久了</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7230259584600.jpg"></p><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><p>姐姐和姐夫为了省房租，目前是在超市二楼隔了一间房睡觉。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7277036051400.jpg"></p><p>宝宝睡得很香</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7294610701500.jpg"></p><h1 id="11"><a href="#11" class="headerlink" title="11"></a>11</h1><p>我在吃冷饮呢，这时来了个销售，给我25块钱，让我去看下房。。闲来无事，那咱就去看看</p><p>算了下两个户型价格，好像和高新差不多，新房价格比高新低不少，这个销售呀把咱高新说的好废哦，咱也不懂，咱也不敢说不是。</p><p>说咱高新那个外国语高新分校很垃圾，在南京都排不上号。说这个小区的金陵小学分校是南京第二梯队中的前排，感觉很厉害的样子。。</p><p>我印象有几个学校还是不错的吧。。咱也不敢说。。确实也不懂呢。。</p><p>说小区是三个地铁交汇处，这个看着还是不错的，已经通车了一个，明年再通车一个，还有一个说是明年开始建，也很快了。这个还是挺加分的</p><p>然后就是医院。。听了半天，好像也是没建呢，没问是不是三甲。。。</p><p>正在唠嗑呢，老婆打电话催我回去，好吧，那咱就有机会再聊，嘿嘿！</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7366032905200.jpg"></p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7370924201700.jpg"></p><h1 id="12"><a href="#12" class="headerlink" title="12"></a>12</h1><p>老婆买的必胜客的券都好几天了， 今天晚上虽然下暴雨啊，但是咱还是冒雨把它给用了，嘿嘿！</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7816447046300.jpg"></p><p>必胜客吃的不多，随便选了两个口味的，味道是真不错呀，好吃！</p><p>老婆就吃了差不多半个，剩下的1个半加两瓶饮料咱都给吃啦，有点小撑哦。</p><p>PS：老婆头疼，不敢喝凉的。。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7801606478900.png"></p><h1 id="13"><a href="#13" class="headerlink" title="13"></a>13</h1><p>写完这篇文章，再发表出去，9点左右吧，准备睡觉啦，晚安，宝子们。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/7954871233400.png"></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 早上 </tag>
            
            <tag> 葡萄 </tag>
            
            <tag> 二手玩具 </tag>
            
            <tag> 火车 </tag>
            
            <tag> 闺女 </tag>
            
            <tag> 梨 </tag>
            
            <tag> 超市 </tag>
            
            <tag> 紫樾府 </tag>
            
            <tag> 蛙仔便利店 </tag>
            
            <tag> 装修 </tag>
            
            <tag> 房租 </tag>
            
            <tag> 销售 </tag>
            
            <tag> 房子 </tag>
            
            <tag> 必胜客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊近况，一个字【累】</title>
      <link href="/71f4c8f5.html"/>
      <url>/71f4c8f5.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>最近的生活状态真的很糟糕。我们家承包了二十亩的葡萄园，但只有我爸妈在忙活。今年还好我小舅在这边帮忙，否则我的时间就更加紧张了，写博客和学习都不敢想了。</p><p>今年即使有我小舅帮忙，我还是需要帮忙的，但是干的就不用那么多了。我现在主要是负责<strong>送葡萄</strong>和<strong>搬葡萄</strong>。</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>这个活一般是工作日的早上5点多到6点多，偶尔会很早。我一般学习加上写博客都是12点左右睡觉，前两天就是连续两天早上3点就起来了，到葡萄地搬葡萄然后送货，眼都睁不开，然后回来还要打扫卫生，这个时候差不多8点半左右了，出发上班，从家到公司开车和骑车时间差不多，20分钟左右，整个累得不行。</p><p>一般送完葡萄差不多7点出头，偶尔会到8点，一天正常是1~2趟。</p><p>11点半中午下班，中午嘛因为老婆在家带孩子不容易，所以我每天中午基本都是回家的，当然饭我不做，一般是买饭带回去，然后有时间就休息一会，1点半左右去上班。</p><p>下午下班呢是下午6点，到家差不多是6点半，然后会帮忙搬葡萄。前两年我爸还有精力，自己搬就行了。现在我爸身体不好了，年纪也大了，已经搬不了了。爸妈把葡萄剪好了放框里面，然后我去地里面把葡萄带到家里，然后我就可以回家了。</p><p>到家之后呢，也没啥事了，唠唠嗑，给宝宝洗澡，我老婆也差不多睡觉了，老婆睡觉之后我就可以自由活动了。这个时候脑子早不灵光了，属于半懵状态，学习不太合适，这个时间一般是写博客或者看视频。</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>不得不说，写博客真的很累。比如我写的Redis系列，即使借助了GPT辅助，一篇文章也要花大约2个小时左右的时间。写完之后要发博客，发到各个媒体平台上，这个时候一般都已经是深夜12点左右。写Redis的时候，最迟是凌晨1点多发的，😔</p><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>写博客这件事，个人感觉一时热乎比较多，很难坚持下去。几年前我就开始写博客了，但是都是断断续续的，每次坚持的时间都很短，个把月算多的了。</p><p>虽然写的不多，但是形式上还是很丰富的。博客网站不知道搭建过多少个了，域名也换了三四个，腾讯云、阿里云服务器都买了好几个。不过今年年中的时候我都退掉了，现在公司都是内网开发，实在用不上。腾讯之前买了一年，后来又买了三年，退了一年，还是挺给力的。阿里的云数据库不给退，我也是买了三年的，然后慢慢等它明年到期吧。</p><p>博客皮肤，我还是喜欢Halo博客的Joe主题，真的很好看。现在我的博客是用Hexo搭建的，主题是Butterfly，我觉得还不错，不打算换了，太麻烦了。</p><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><p>晚上太累了，学习肯定不合适。所以我选择在早上开车送葡萄的时候学习，我会听语音课程。我感觉效率非常高，比阅读效率高多了。当然，要全神贯注，否则效果就不理想。</p><p>关于学习的平台，主要是微信读书和极客时间。前几年我买了很多极客时间的课程，但还有很多没看。微信读书暂时不看了，时间不够。现在我主要优先考虑面试相关的知识，需要随时准备。</p><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>接下来的计划呢，首先，最近确实忙得睡眠严重不足，更新频率就不那么快了。预计是等到葡萄卖完了，时间上会充裕一些，再排一排更新计划。</p><p>目前有几个系列在进行中：</p><h2 id="Redis系列"><a href="#Redis系列" class="headerlink" title="Redis系列"></a>Redis系列</h2><p>这个系列更新会比较慢，因为最近要做开发规范和架构设计，耽误了大约一周的时间。等这两天那块的工作完成后，这个系列就会继续保持更新。</p><h2 id="代码规范系列"><a href="#代码规范系列" class="headerlink" title="代码规范系列"></a>代码规范系列</h2><p>这个系列推出的原因比较简单，领导让我制定一个代码开发规范，所以我顺便整理了一下。现在也快结束了，争取明天完成。</p><h2 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h2><p>原本计划是每天更新一篇的，但实际上我觉得内容并不是很丰富，记与不记差别不大。所以我偶尔会更新，只有有内容了我才会进行更新。这个并不是我关注的重点，大部分的文章也是直接从我来导出的Markdown文件。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-27/106344977741400.png" alt="我来上的日记"></p><p>日记是每天都会写的，只是现在有点懒，不够勤快，记得不多。关于我来日记以及模板的部分，后续我也会考虑出详细的教程，这里就不多赘述了。</p><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><p>这么累，为什么还坚持呢？</p><p>对我来说，涨粉和阅读量是最大的动力。另外一个原因是我希望通过写作来提高自己的能力，加深对知识点的记忆和理解。</p><p>CSDN设置了粉丝可读之后，涨粉非常快，只是阅读量有点低，但差别不大。</p><p>微信上很难涨粉，有点愁。</p><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p>最近打算以录播的形式出教学视频，还没有具体的头绪，之后再看看吧。</p><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p>我真的想在B站升到三级，这样就能上传32G的视频了，现在只有8G，完全不够。emm…</p><p>大家可以帮我在B站关注一下吗？非常感谢大家。</p><p><a href="https://space.bilibili.com/258577429">https://space.bilibili.com/258577429</a></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>现在的博客，我还是希望能够坚持下去。这次希望能有所突破，加油！！！！</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 更新 </tag>
            
            <tag> 忙碌 </tag>
            
            <tag> 计划 </tag>
            
            <tag> 状态 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 动力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hibernate validator】（三）声明和验证方法约束</title>
      <link href="/9df1ab00.html"/>
      <url>/9df1ab00.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="一、声明方法约束"><a href="#一、声明方法约束" class="headerlink" title="一、声明方法约束"></a>一、声明方法约束</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.parameter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentalStation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RentalStation</span><span class="params">(<span class="meta">@NotNull</span> String name)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentCar</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@NotNull</span> Customer customer,</span></span><br><span class="line"><span class="params">            <span class="meta">@NotNull</span> <span class="meta">@Future</span> Date startDate,</span></span><br><span class="line"><span class="params">            <span class="meta">@Min(1)</span> <span class="type">int</span> durationInDays)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>RentalStation的name不能为空</li><li>rentCar()，customer不能为空，startDate不能为空且必须在未来，durationInDays最少为1天</li></ol><h2 id="1-交叉参数约束"><a href="#1-交叉参数约束" class="headerlink" title="1. 交叉参数约束"></a>1. 交叉参数约束</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@LuggageCountMatchesPassengerCount(piecesOfLuggagePerPassenger = 2)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(List&lt;Person&gt; passengers, List&lt;PieceOfLuggage&gt; luggage)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该注解通过自动义确保乘客携带不超过2件行李</p></blockquote><h2 id="2-返回值约束"><a href="#2-返回值约束" class="headerlink" title="2. 返回值约束"></a>2. 返回值约束</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.returnvalue;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentalStation</span> &#123;</span><br><span class="line">    <span class="meta">@ValidRentalStation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RentalStation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 1)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="meta">@NotNull</span> Customer&gt; getCustomers() &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>任何新创建的<code>RentalStation</code>对象必须满足<code>@ValidRentalStation</code>约束</li><li>传回的客户清单<code>getCustomers()</code>不得为<code>null</code>并且必须至少包含元素</li><li>返回的客户清单<code>getCustomers()</code>不得包含任何<code>null</code>对象</li></ul><h2 id="3-级联验证"><a href="#3-级联验证" class="headerlink" title="3. 级联验证"></a>3. 级联验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.cascaded;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Garage</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Garage</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCar</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@NotNull</span> Car car)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.cascaded;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 14)</span></span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String manufacturer, String licencePlate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.licensePlate = licencePlate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>验证checkCar()方法的参数时，还将Car评估对所传递对象的属性的约束。同样，在验证构造函数的返回值时@NotNull，Garage将检查对name字段的约束 Garage。</li><li>通常，级联验证对可执行文件的工作方式与对JavaBeans属性完全相同。</li><li>特别是，null在级联验证期间会忽略值，并且递归执行级联验证</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.cascaded.containerelement;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Garage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCars</span><span class="params">(<span class="meta">@NotNull</span> List&lt;<span class="meta">@Valid</span> Car&gt; cars)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-继承层次结构中的方法约束"><a href="#4-继承层次结构中的方法约束" class="headerlink" title="4. 继承层次结构中的方法约束"></a>4. 继承层次结构中的方法约束</h2><ul><li>需要注意的规则<ul><li>方法的调用者必须满足的前提条件不能在子类型中得到加强</li><li>保证方法调用者的后置条件不会在子类型中减弱</li></ul></li><li>子类非法的方法参数约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.inheritance.parameter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(<span class="meta">@Max(75)</span> <span class="type">int</span> speedInMph)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.inheritance.parameter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(<span class="meta">@Max(55)</span> <span class="type">int</span> speedInMph)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>次结构的并行类型中的非法方法参数约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.inheritance.parallel;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(<span class="meta">@Max(75)</span> <span class="type">int</span> speedInMph)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.inheritance.parallel;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(<span class="type">int</span> speedInMph)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.inheritance.parallel;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RacingCar</span> <span class="keyword">implements</span> <span class="title class_">Car</span>, Vehicle &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(<span class="type">int</span> speedInMph)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父类型和子类型方法的返回值约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.inheritance.returnvalue;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    List&lt;Person&gt; <span class="title function_">getPassengers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.inheritance.returnvalue;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Size(min = 1)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">getPassengers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、验证方法约束"><a href="#二、验证方法约束" class="headerlink" title="二、验证方法约束"></a>二、验证方法约束</h1><h2 id="再来一辆车"><a href="#再来一辆车" class="headerlink" title="再来一辆车"></a>再来一辆车</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car2</span><span class="params">(<span class="meta">@NotNull</span> String manufacturer)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @自定义规则</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(<span class="meta">@Max(75)</span> <span class="meta">@Min(22)</span> <span class="type">int</span> speedInMph)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Size(min = 1)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getParams</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取工具"><a href="#获取工具" class="headerlink" title="获取工具"></a>获取工具</h2><h2 id="1-校验普通方法参数"><a href="#1-校验普通方法参数" class="headerlink" title="1. 校验普通方法参数"></a>1. 校验普通方法参数</h2><h2 id="2-测试普通方法返回值"><a href="#2-测试普通方法返回值" class="headerlink" title="2. 测试普通方法返回值"></a>2. 测试普通方法返回值</h2><h2 id="3-测试构造方法参数"><a href="#3-测试构造方法参数" class="headerlink" title="3. 测试构造方法参数"></a>3. 测试构造方法参数</h2><h2 id="4-测试构造方法的返回值"><a href="#4-测试构造方法的返回值" class="headerlink" title="4. 测试构造方法的返回值"></a>4. 测试构造方法的返回值</h2><h1 id="三、内置方法约束"><a href="#三、内置方法约束" class="headerlink" title="三、内置方法约束"></a>三、内置方法约束</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter03.parameterscriptassert;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@ParameterScriptAssert(lang = &quot;javascript&quot;, script = &quot;luggage.size() &lt;= passengers.size() * 2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(List&lt;Person&gt; passengers, List&lt;PieceOfLuggage&gt; luggage)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Hibernate Validator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 声明方法约束 </tag>
            
            <tag> 交叉参数约束 </tag>
            
            <tag> 返回值约束 </tag>
            
            <tag> 级联验证 </tag>
            
            <tag> 继承层次结构中的方法约束 </tag>
            
            <tag> 校验普通方法参数 </tag>
            
            <tag> 测试普通方法返回值 </tag>
            
            <tag> 测试构造方法参数 </tag>
            
            <tag> 测试构造方法的返回值 </tag>
            
            <tag> 内置方法约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hibernate validator】（二）声明和验证Bean约束</title>
      <link href="/caa11a30.html"/>
      <url>/caa11a30.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="一、声明bean约束"><a href="#一、声明bean约束" class="headerlink" title="一、声明bean约束"></a>一、声明bean约束</h1><h2 id="1-字段级别约束"><a href="#1-字段级别约束" class="headerlink" title="1. 字段级别约束"></a>1. 字段级别约束</h2><ol><li>不支持静态类型字段</li><li>验证引擎直接访问实例变量，不会调用属性的访问器</li><li>在验证字节码增强的对象时，应适用属性级别约束，因为字节码增库无法通过反射确定字段访问</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.fieldlevel;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@AssertTrue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isRegistered;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String manufacturer, <span class="type">boolean</span> isRegistered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.isRegistered = isRegistered;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getters and setters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-属性级别约束"><a href="#2-属性级别约束" class="headerlink" title="2. 属性级别约束"></a>2. 属性级别约束</h2><ol><li>必须注释getter而不是setter，这样可以限制没有设置方法的只读属性</li><li>该级别将使用属性访问策略来访问验证的值，即验证引擎通过属性访问器来访问数据</li><li>不要字段和getter都加校验，这样会导致校验两次</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.propertylevel;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isRegistered;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String manufacturer, <span class="type">boolean</span> isRegistered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.isRegistered = isRegistered;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getManufacturer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> manufacturer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setManufacturer</span><span class="params">(String manufacturer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AssertTrue</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRegistered</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isRegistered;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRegistered</span><span class="params">(<span class="type">boolean</span> isRegistered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isRegistered = isRegistered;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>容器元素约束</li></ol><h3 id="3-1-Iterable"><a href="#3-1-Iterable" class="headerlink" title="3.1 Iterable"></a>3.1 Iterable</h3><blockquote><p> 在该类型上加约束时，将会校验每个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.set;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;<span class="meta">@ValidPart</span> String&gt; parts = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPart</span><span class="params">(String part)</span> &#123;</span><br><span class="line">        parts.add( part );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car.addPart( <span class="string">&quot;Wheel&quot;</span> );</span><br><span class="line">car.addPart( <span class="literal">null</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">ConstraintViolation&lt;Car&gt; constraintViolation =</span><br><span class="line">        constraintViolations.iterator().next();</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;&#x27;null&#x27; is not a valid car part.&quot;</span>,</span><br><span class="line">        constraintViolation.getMessage()</span><br><span class="line">);</span><br><span class="line">assertEquals( <span class="string">&quot;parts[].&lt;iterable element&gt;&quot;</span>,</span><br><span class="line">        constraintViolation.getPropertyPath().toString() );</span><br></pre></td></tr></table></figure><h3 id="3-2-List"><a href="#3-2-List" class="headerlink" title="3.2 List"></a>3.2 List</h3><blockquote><p> 也会校验每个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.list;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="meta">@ValidPart</span> String&gt; parts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPart</span><span class="params">(String part)</span> &#123;</span><br><span class="line">        parts.add( part );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car.addPart( <span class="string">&quot;Wheel&quot;</span> );</span><br><span class="line">car.addPart( <span class="literal">null</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">ConstraintViolation&lt;Car&gt; constraintViolation =</span><br><span class="line">        constraintViolations.iterator().next();</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;&#x27;null&#x27; is not a valid car part.&quot;</span>,</span><br><span class="line">        constraintViolation.getMessage()</span><br><span class="line">);</span><br><span class="line">assertEquals( <span class="string">&quot;parts[1].&lt;list element&gt;&quot;</span>,</span><br><span class="line">        constraintViolation.getPropertyPath().toString() );</span><br></pre></td></tr></table></figure><h3 id="3-3-Map"><a href="#3-3-Map" class="headerlink" title="3.3 Map"></a>3.3 Map</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">FuelConsumption</span> &#123;</span><br><span class="line">        CITY,</span><br><span class="line">        HIGHWAY</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="meta">@NotNull</span> FuelConsumption, <span class="meta">@MaxAllowedFuelConsumption</span> Integer&gt; fuelConsumption = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFuelConsumption</span><span class="params">(FuelConsumption consumption, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        fuelConsumption.put( consumption, value );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car.setFuelConsumption( Car.FuelConsumption.HIGHWAY, <span class="number">20</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">ConstraintViolation&lt;Car&gt; constraintViolation =</span><br><span class="line">        constraintViolations.iterator().next();</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;20 is outside the max fuel consumption.&quot;</span>,</span><br><span class="line">        constraintViolation.getMessage()</span><br><span class="line">);</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;fuelConsumption[HIGHWAY].&lt;map value&gt;&quot;</span>,</span><br><span class="line">        constraintViolation.getPropertyPath().toString()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car.setFuelConsumption( <span class="literal">null</span>, <span class="number">5</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">ConstraintViolation&lt;Car&gt; constraintViolation =</span><br><span class="line">        constraintViolations.iterator().next();</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;must not be null&quot;</span>,</span><br><span class="line">        constraintViolation.getMessage()</span><br><span class="line">);</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;fuelConsumption&lt;K&gt;[].&lt;map key&gt;&quot;</span>,</span><br><span class="line">        constraintViolation.getPropertyPath().toString()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-4-Optional"><a href="#3-4-Optional" class="headerlink" title="3.4 Optional"></a>3.4 Optional</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.optional;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;<span class="meta">@MinTowingCapacity(1000)</span> Integer&gt; towingCapacity = Optional.empty();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTowingCapacity</span><span class="params">(Integer alias)</span> &#123;</span><br><span class="line">        towingCapacity = Optional.of( alias );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car.setTowingCapacity( <span class="number">100</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">ConstraintViolation&lt;Car&gt; constraintViolation = constraintViolations.iterator().next();</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;Not enough towing capacity.&quot;</span>,</span><br><span class="line">        constraintViolation.getMessage()</span><br><span class="line">);</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;towingCapacity&quot;</span>,</span><br><span class="line">        constraintViolation.getPropertyPath().toString()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-5-自定义容器"><a href="#3-5-自定义容器" class="headerlink" title="3.5 自定义容器"></a>3.5 自定义容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.custom;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> GearBox&lt;<span class="meta">@MinTorque(100)</span> Gear&gt; gearBox;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGearBox</span><span class="params">(GearBox&lt;Gear&gt; gearBox)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gearBox = gearBox;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.custom;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GearBox</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Gear</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T gear;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GearBox</span><span class="params">(T gear)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gear = gear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Gear <span class="title function_">getGear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.gear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.custom;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Gear</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer torque;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Gear</span><span class="params">(Integer torque)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.torque = torque;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTorque</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> torque;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AcmeGear</span> <span class="keyword">extends</span> <span class="title class_">Gear</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AcmeGear</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>( <span class="number">60</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.custom;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GearBoxValueExtractor</span> <span class="keyword">implements</span> <span class="title class_">ValueExtractor</span>&lt;GearBox&lt;<span class="meta">@ExtractedValue</span> ?&gt;&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extractValues</span><span class="params">(GearBox&lt;<span class="meta">@ExtractedValue</span> ?&gt; originalValue, ValueExtractor.ValueReceiver receiver)</span> &#123;</span><br><span class="line">        receiver.value( <span class="literal">null</span>, originalValue.getGear() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car.setGearBox( <span class="keyword">new</span> <span class="title class_">GearBox</span>&lt;&gt;( <span class="keyword">new</span> <span class="title class_">Gear</span>.AcmeGear() ) );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">ConstraintViolation&lt;Car&gt; constraintViolation =</span><br><span class="line">        constraintViolations.iterator().next();</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;Gear is not providing enough torque.&quot;</span>,</span><br><span class="line">        constraintViolation.getMessage()</span><br><span class="line">);</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;gearBox&quot;</span>,</span><br><span class="line">        constraintViolation.getPropertyPath().toString()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-6-嵌套容器元素"><a href="#3-6-嵌套容器元素" class="headerlink" title="3.6 嵌套容器元素"></a>3.6 嵌套容器元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.containerelement.nested;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="meta">@NotNull</span> Part, List&lt;<span class="meta">@NotNull</span> Manufacturer&gt;&gt; partManufacturers =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-类级别约束"><a href="#4-类级别约束" class="headerlink" title="4. 类级别约束"></a>4. 类级别约束</h2><ol><li>在这种情况下，验证的对象不是单个属性而是完整的对象</li><li>适合依赖于对象的多个属性之间的相关性很高的场景</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.classlevel;</span><br><span class="line"><span class="meta">@ValidPassengerCount</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seatCount;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; passengers;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-约束继承"><a href="#5-约束继承" class="headerlink" title="5. 约束继承"></a>5. 约束继承</h2><blockquote><p> 在一个类实现接口或扩展另一个类时，在超类上声明的所有约束注释都以与该类本身上指定的约束相同的方式约束</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.inheritance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getManufacturer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> manufacturer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.inheritance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentalCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String rentalStation;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRentalStation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rentalStation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>RentalCar 不仅会校验getRentalStation，而且会校验父类的getManufacturer</li><li>若继承换成接口，也是会校验超类的</li></ol><h2 id="6-对象图"><a href="#6-对象图" class="headerlink" title="6. 对象图"></a>6. 对象图</h2><blockquote><p> 不仅支持单个对象校验，还支持级联验证</p></blockquote><h4 id="对象的级联校验"><a href="#对象的级联校验" class="headerlink" title="对象的级联校验"></a>对象的级联校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.objectgraph;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Person driver;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.objectgraph;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 在校验Car的时候，会校验Person，因此若Car引用的Person的name为空，则会校验失败</p></blockquote><h4 id="容器的级联校验"><a href="#容器的级联校验" class="headerlink" title="容器的级联校验"></a>容器的级联校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.objectgraph.containerelement;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="meta">@NotNull</span> <span class="meta">@Valid</span> Person&gt; passengers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="meta">@Valid</span> Part, List&lt;<span class="meta">@Valid</span> Manufacturer&gt;&gt; partManufacturers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.objectgraph.containerelement;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Part</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter02.objectgraph.containerelement;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manufacturer</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>校验Person的名字是否存在为null的</li><li>校验Part的名字是否存在为null的</li><li>校验所有的Manufacturer是否存在名字为null的</li></ol><h1 id="二、验证Bean约束"><a href="#二、验证Bean约束" class="headerlink" title="二、验证Bean约束"></a>二、验证Bean约束</h1><h2 id="1-获取验证器"><a href="#1-获取验证器" class="headerlink" title="1. 获取验证器"></a>1. 获取验证器</h2><h2 id="2-验证的三种方式"><a href="#2-验证的三种方式" class="headerlink" title="2. 验证的三种方式"></a>2. 验证的三种方式</h2><h3 id="先来个车"><a href="#先来个车" class="headerlink" title="先来个车"></a>先来个车</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 5,max = 20)</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@AssertTrue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isRegistered;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String manufacturer, <span class="type">boolean</span> isRegistered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.isRegistered = isRegistered;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean全部验证"><a href="#bean全部验证" class="headerlink" title="bean全部验证"></a>bean全部验证</h3><h3 id="验证单个属性"><a href="#验证单个属性" class="headerlink" title="验证单个属性"></a>验证单个属性</h3><h3 id="对属性的值进行验证"><a href="#对属性的值进行验证" class="headerlink" title="对属性的值进行验证"></a>对属性的值进行验证</h3><h2 id="3-约束违规"><a href="#3-约束违规" class="headerlink" title="3. 约束违规"></a>3. 约束违规</h2><h3 id="内插的错误消息"><a href="#内插的错误消息" class="headerlink" title="内插的错误消息"></a><strong>内插的错误消息</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:<span class="number">35</span>:<span class="number">00.446</span> [main] INFO com.bm.validate.TestValidatorBean - 内插的错误消息：只能为<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="非插补的错误消息"><a href="#非插补的错误消息" class="headerlink" title="非插补的错误消息"></a>非插补的错误消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:<span class="number">35</span>:<span class="number">00.446</span> [main] INFO com.bm.validate.TestValidatorBean - 非插补的错误消息：&#123;javax.validation.constraints.AssertTrue.message&#125;</span><br></pre></td></tr></table></figure><h3 id="正在验证的根Bean"><a href="#正在验证的根Bean" class="headerlink" title="正在验证的根Bean"></a>正在验证的根Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:<span class="number">35</span>:<span class="number">00.446</span> [main] INFO com.bm.validate.TestValidatorBean - 正在验证的根Bean：com.bm.validate.Car@7c83dc97</span><br></pre></td></tr></table></figure><h3 id="如果是bean约束，则将约束应用到bean实例；如果是属性约束，则是托管该约束的属性的bean实例"><a href="#如果是bean约束，则将约束应用到bean实例；如果是属性约束，则是托管该约束的属性的bean实例" class="headerlink" title="如果是bean约束，则将约束应用到bean实例；如果是属性约束，则是托管该约束的属性的bean实例"></a>如果是bean约束，则将约束应用到bean实例；如果是属性约束，则是托管该约束的属性的bean实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:<span class="number">35</span>:<span class="number">00.446</span> [main] INFO com.bm.validate.TestValidatorBean - 如果是bean约束，则将约束应用到bean实例；如果是属性约束，则是托管该约束的属性的bean实例：com.bm.validate.Car@7c83dc97</span><br></pre></td></tr></table></figure><h3 id="bean验证器值的属性路径"><a href="#bean验证器值的属性路径" class="headerlink" title="bean验证器值的属性路径"></a><strong>bean验证器值的属性路径</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:<span class="number">35</span>:<span class="number">00.447</span> [main] INFO com.bm.validate.TestValidatorBean - 根bean验证器值的属性路径：isRegistered</span><br></pre></td></tr></table></figure><h3 id="报告约束失败的原数据"><a href="#报告约束失败的原数据" class="headerlink" title="**报告约束失败的原数据"></a>**<strong>报告约束失败的原数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:<span class="number">35</span>:<span class="number">00.447</span> [main] INFO com.bm.validate.TestValidatorBean - 报告约束失败的原数据：<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="告约束失败的元数据"><a href="#告约束失败的元数据" class="headerlink" title="告约束失败的元数据"></a><strong>告约束失败的元数据</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:<span class="number">35</span>:<span class="number">00.447</span> [main] INFO com.bm.validate.TestValidatorBean - 报告约束失败的元数据：ConstraintDescriptorImpl&#123;annotation=j.v.c.AssertTrue, payloads=[], hasComposingConstraints=<span class="literal">true</span>, isReportAsSingleInvalidConstraint=<span class="literal">false</span>, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[<span class="keyword">interface</span> <span class="title class_">javax</span>.validation.groups.Default], attributes=&#123;groups=[Ljava.lang.Class;@60015ef5, message=&#123;javax.validation.constraints.AssertTrue.message&#125;, payload=[Ljava.lang.Class;@2f54a33d&#125;, constraintType=GENERIC, valueUnwrapping=DEFAULT&#125;</span><br></pre></td></tr></table></figure><h1 id="三、内置约束"><a href="#三、内置约束" class="headerlink" title="三、内置约束"></a>三、内置约束</h1><h3 id="AssertFalse"><a href="#AssertFalse" class="headerlink" title="@AssertFalse"></a>@AssertFalse</h3><blockquote><p> 检查带注释元素的属性为false</p></blockquote><ul><li>Boolean, boolean</li></ul><h3 id="AssertTrue"><a href="#AssertTrue" class="headerlink" title="@AssertTrue"></a>@AssertTrue</h3><blockquote><p> 检查带注释元素的属性为True</p></blockquote><ul><li>Boolean,boolean</li></ul><h3 id="DecimalMax-value-inclusive"><a href="#DecimalMax-value-inclusive" class="headerlink" title="@DecimalMax(value&#x3D;, inclusive&#x3D;)"></a>@DecimalMax(value&#x3D;, inclusive&#x3D;)</h3><ul><li>inclusive为false，检查带注释的值是否小于指定的最大值。否则，该值是否小于等于指定的最大值</li><li>BigDecimal,BigInteger,CharSequence,byte,short,int,long，原始数据包装类,Number,javax.money.MonetaryAmount任意子类</li></ul><h3 id="DecimalMin-value-inclusive"><a href="#DecimalMin-value-inclusive" class="headerlink" title="@DecimalMin(value&#x3D;, inclusive&#x3D;)"></a>@DecimalMin(value&#x3D;, inclusive&#x3D;)</h3><ul><li>inclusive为false，检查带注释的值是否大于指定的最小值。否则，该值是否大于等于指定的最小值</li><li>BigDecimal,BigInteger,CharSequence,byte,short,int,long，原始数据包装类,Number,javax.money.MonetaryAmount任意子类</li></ul><h3 id="Digits-integer-fraction"><a href="#Digits-integer-fraction" class="headerlink" title="@Digits(integer&#x3D;, fraction&#x3D;)"></a>@Digits(integer&#x3D;, fraction&#x3D;)</h3><ul><li>integer 指定整数位数限制，fraction指定小数位数限制</li><li>BigDecimal,BigInteger,CharSequence,byte,short,int,long，原始数据包装类,Number,javax.money.MonetaryAmount任意子类</li></ul><h3 id="Email"><a href="#Email" class="headerlink" title="@Email"></a>@Email</h3><ul><li>是否为有效的电子邮箱地址</li><li>regexp和flags参数指定正则规则，必须匹配的其它表达式</li><li>CharSequence</li></ul><h3 id="Future"><a href="#Future" class="headerlink" title="@Future"></a>@Future</h3><ul><li>检查是否是将来的日期</li><li>java.util.Date，java.util.Calendar，java.time.Instant，java.time.LocalDate，java.time.LocalDateTime，java.time.LocalTime，java.time.MonthDay，java.time.OffsetDateTime，java.time.OffsetTime，java.time.Year，java.time.YearMonth，java.time.ZonedDateTime，java.time.chrono.HijrahDate，java.time.chrono.JapaneseDate，java.time.chrono.MinguoDate，java.time.chrono.ThaiBuddhistDate; 如果类路径上有Joda Time日期&#x2F;时间API ，则由HV额外支持：ReadablePartial和的任何实现ReadableInstant</li></ul><h3 id="FutureOnPresent"><a href="#FutureOnPresent" class="headerlink" title="@FutureOnPresent"></a>@FutureOnPresent</h3><ul><li>检查日期是先在还是将来</li><li>java.util.Date，java.util.Calendar，java.time.Instant，java.time.LocalDate，java.time.LocalDateTime，java.time.LocalTime，java.time.MonthDay，java.time.OffsetDateTime，java.time.OffsetTime，java.time.Year，java.time.YearMonth，java.time.ZonedDateTime，java.time.chrono.HijrahDate，java.time.chrono.JapaneseDate，java.time.chrono.MinguoDate，java.time.chrono.ThaiBuddhistDate; 如果类路径上有Joda Time日期&#x2F;时间API ，则由HV额外支持：ReadablePartial和的任何实现ReadableInstant</li></ul><h3 id="Max-value"><a href="#Max-value" class="headerlink" title="@Max(value&#x3D;)"></a>@Max(value&#x3D;)</h3><ul><li>是否小于或等于该值</li><li>BigDecimal，BigInteger，byte，short，int，long和原始类型的相应的包装; HV额外支持：的任何子类型CharSequence（评估字符序列表示的数值），Number和的任何子类型javax.money.MonetaryAmount</li></ul><h3 id="Min-value"><a href="#Min-value" class="headerlink" title="@Min(value&#x3D;)"></a>@Min(value&#x3D;)</h3><ul><li>是否大于或等于该值</li><li>BigDecimal，BigInteger，byte，short，int，long和原始类型的相应的包装; HV额外支持：的任何子类型CharSequence（评估字符序列表示的数值），Number和的任何子类型javax.money.MonetaryAmount</li></ul><h3 id="NotBlank"><a href="#NotBlank" class="headerlink" title="@NotBlank"></a>@NotBlank</h3><ul><li>指定字符不为null并且长度大于0</li><li>CharSequence</li></ul><h3 id="NotEmpty"><a href="#NotEmpty" class="headerlink" title="@NotEmpty"></a>@NotEmpty</h3><ul><li>指定字符不为null或为空（去除尾随空格）</li><li>CharSequence，Collection，Map和数组</li></ul><h3 id="NotNull"><a href="#NotNull" class="headerlink" title="@NotNull"></a>@NotNull</h3><ul><li>检查注释的值不为null</li><li>所有类型均支持</li></ul><h3 id="Negative"><a href="#Negative" class="headerlink" title="@Negative"></a>@Negative</h3><ul><li>检查元素是否严格为负，零被视为无效</li><li>BigDecimal，BigInteger，byte，short，int，long和原始类型的相应的包装; HV额外支持：的任何子类型CharSequence（评估字符序列表示的数值），Number和的任何子类型javax.money.MonetaryAmount</li></ul><h3 id="NegativeOrZero"><a href="#NegativeOrZero" class="headerlink" title="@NegativeOrZero"></a>@NegativeOrZero</h3><ul><li>检查元素是负数或0</li><li>BigDecimal，BigInteger，byte，short，int，long和原始类型的相应的包装; HV额外支持：的任何子类型CharSequence（评估字符序列表示的数值），Number和的任何子类型javax.money.MonetaryAmount</li></ul><h3 id="Null"><a href="#Null" class="headerlink" title="@Null"></a>@Null</h3><ul><li>检查注释的值是null</li><li>所有类型均支持</li></ul><h3 id="Past"><a href="#Past" class="headerlink" title="@Past"></a>@Past</h3><ul><li>检查带注释的日期是否是过去的日期</li><li>java.util.Date，java.util.Calendar，java.time.Instant，java.time.LocalDate，java.time.LocalDateTime，java.time.LocalTime，java.time.MonthDay，java.time.OffsetDateTime，java.time.OffsetTime，java.time.Year，java.time.YearMonth，java.time.ZonedDateTime，java.time.chrono.HijrahDate，java.time.chrono.JapaneseDate，java.time.chrono.MinguoDate，java.time.chrono.ThaiBuddhistDate; 如果类路径上有Joda Time日期&#x2F;时间API ，则由HV附加支持：ReadablePartial和的任何实现ReadableInstant</li></ul><h3 id="PastOrPresent"><a href="#PastOrPresent" class="headerlink" title="@PastOrPresent"></a>@PastOrPresent</h3><ul><li>检查带注释的日期是过去还是现在</li><li>java.util.Date，java.util.Calendar，java.time.Instant，java.time.LocalDate，java.time.LocalDateTime，java.time.LocalTime，java.time.MonthDay，java.time.OffsetDateTime，java.time.OffsetTime，java.time.Year，java.time.YearMonth，java.time.ZonedDateTime，java.time.chrono.HijrahDate，java.time.chrono.JapaneseDate，java.time.chrono.MinguoDate，java.time.chrono.ThaiBuddhistDate; 如果类路径上有Joda Time日期&#x2F;时间API ，则由HV附加支持：ReadablePartial和的任何实现ReadableInstant</li></ul><h3 id="Pattern-regex-flags"><a href="#Pattern-regex-flags" class="headerlink" title="@Pattern(regex&#x3D;, flags&#x3D;)"></a>@Pattern(regex&#x3D;, flags&#x3D;)</h3><ul><li>regex考虑给定标志，检查带注释的字符串是否与正则表达式匹配match</li><li>CharSequence</li></ul><h3 id="Positive"><a href="#Positive" class="headerlink" title="@Positive"></a>@Positive</h3><ul><li>检查元素是否严格为正。零值被视为无效</li><li>BigDecimal，BigInteger，byte，short，int，long和原始类型的相应的包装; HV额外支持：的任何子类型CharSequence（评估字符序列表示的数值），Number和的任何子类型javax.money.MonetaryAmount</li></ul><h3 id="PositiveOrZero"><a href="#PositiveOrZero" class="headerlink" title="@PositiveOrZero"></a>@PositiveOrZero</h3><ul><li>检查元素是否严格为正或零</li><li>BigDecimal，BigInteger，byte，short，int，long和原始类型的相应的包装; HV额外支持：的任何子类型CharSequence（评估字符序列表示的数值），Number和的任何子类型javax.money.MonetaryAmount</li></ul><h3 id="Size-min-max"><a href="#Size-min-max" class="headerlink" title="@Size(min&#x3D;, max&#x3D;)"></a>@Size(min&#x3D;, max&#x3D;)</h3><ul><li>检查带注释的元素的大小是否介于min和之间max（包括）</li><li>CharSequence，Collection，Map和数组</li></ul><h3 id="CreditCardNumber-ignoreNonDigitCharacters"><a href="#CreditCardNumber-ignoreNonDigitCharacters" class="headerlink" title="@CreditCardNumber(ignoreNonDigitCharacters&#x3D;)"></a>@CreditCardNumber(ignoreNonDigitCharacters&#x3D;)</h3><ul><li>检查带注释的字符序列是否通过了Luhn校验和测试</li><li>ignoreNonDigitCharacters允许忽略非数字字符。默认值为false。</li><li>CharSequence</li></ul><h3 id="Currency-value"><a href="#Currency-value" class="headerlink" title="@Currency(value&#x3D;)"></a>@Currency(value&#x3D;)</h3><ul><li>检查带注释的货币单位javax.money.MonetaryAmount是否为指定货币单位的一部分。</li><li>javax.money.MonetaryAmount</li></ul><h3 id="DurationMax-days-hours-minutes-seconds-millis-nanos-inclusive"><a href="#DurationMax-days-hours-minutes-seconds-millis-nanos-inclusive" class="headerlink" title="@DurationMax(days&#x3D;, hours&#x3D;, minutes&#x3D;, seconds&#x3D;, millis&#x3D;, nanos&#x3D;, inclusive&#x3D;)"></a>@DurationMax(days&#x3D;, hours&#x3D;, minutes&#x3D;, seconds&#x3D;, millis&#x3D;, nanos&#x3D;, inclusive&#x3D;)</h3><ul><li>检查带注释的java.time.Duration元素不大于由注释参数构造的元素。如果将inclusiveflag设置为，则允许平等true</li><li>java.time.Duration</li></ul><h3 id="DurationMin-days-hours-minutes-seconds-millis-nanos-inclusive"><a href="#DurationMin-days-hours-minutes-seconds-millis-nanos-inclusive" class="headerlink" title="@DurationMin(days&#x3D;, hours&#x3D;, minutes&#x3D;, seconds&#x3D;, millis&#x3D;, nanos&#x3D;, inclusive&#x3D;)"></a>@DurationMin(days&#x3D;, hours&#x3D;, minutes&#x3D;, seconds&#x3D;, millis&#x3D;, nanos&#x3D;, inclusive&#x3D;)</h3><ul><li>检查带注释的java.time.Duration元素不少于由注释参数构造的元素。如果将inclusiveflag设置为，则允许平等true。</li><li>java.time.Duration</li></ul><h3 id="EAN"><a href="#EAN" class="headerlink" title="@EAN"></a>@EAN</h3><ul><li>检查带注释的字符序列是有效的EAN条形码。类型决定条形码的类型</li><li>CharSequence</li></ul><h3 id="ISBN"><a href="#ISBN" class="headerlink" title="@ISBN"></a>@ISBN</h3><ul><li>检查带注释的字符序列是有效的ISBN</li><li>CharSequence</li></ul><h3 id="Length-min-max"><a href="#Length-min-max" class="headerlink" title="@Length(min&#x3D;, max&#x3D;)"></a>@Length(min&#x3D;, max&#x3D;)</h3><ul><li>验证该注释字符序列是间min和max包含</li><li>CharSequence</li></ul><h3 id="Range-min-max"><a href="#Range-min-max" class="headerlink" title="@Range(min&#x3D;, max&#x3D;)"></a>@Range(min&#x3D;, max&#x3D;)</h3><ul><li>检查带注释的值是否介于（包括）指定的最小值和最大值之间</li><li>BigDecimal，BigInteger，CharSequence，byte，short，int，long和原始类型的相应的包装</li></ul><h3 id="UniqueElements"><a href="#UniqueElements" class="headerlink" title="@UniqueElements"></a>@UniqueElements</h3><ul><li>检查带注释的集合仅包含唯一元素。使用该equals()方法确定相等性。默认消息不包括重复元素的列表，但是您可以通过覆盖消息并使用{duplicates}message参数来包括它。重复元素的列表也包含在约束违反的动态有效负载中。</li><li>Collection��负载中。</li><li>Collection</li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      
        <tags>
            
            <tag> 校验 </tag>
            
            <tag> Hibernate Validator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hibernate validator】（五）分组约束</title>
      <link href="/7394ca34.html"/>
      <url>/7394ca34.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="一、请求组"><a href="#一、请求组" class="headerlink" title="一、请求组"></a>一、请求组</h1><h2 id="1-人组"><a href="#1-人组" class="headerlink" title="1. 人组"></a>1. 人组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter05;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-驱动组"><a href="#2-驱动组" class="headerlink" title="2. 驱动组"></a>2. 驱动组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Min(</span></span><br><span class="line"><span class="meta">            value = 18,</span></span><br><span class="line"><span class="meta">            message = &quot;You have to be 18 to drive a car&quot;,</span></span><br><span class="line"><span class="meta">            groups = DriverChecks.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@AssertTrue(</span></span><br><span class="line"><span class="meta">            message = &quot;You first have to pass the driving test&quot;,</span></span><br><span class="line"><span class="meta">            groups = DriverChecks.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> hasDrivingLicense;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>( name );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">passedDrivingTest</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">        hasDrivingLicense = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-汽车组"><a href="#3-汽车组" class="headerlink" title="3. 汽车组"></a>3. 汽车组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 14)</span></span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line">    <span class="meta">@Min(2)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seatCount;</span><br><span class="line">    <span class="meta">@AssertTrue(</span></span><br><span class="line"><span class="meta">            message = &quot;The car has to pass the vehicle inspection first&quot;,</span></span><br><span class="line"><span class="meta">            groups = CarChecks.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> passedVehicleInspection;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Driver driver;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String manufacturer, String licencePlate, <span class="type">int</span> seatCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.licensePlate = licencePlate;</span><br><span class="line">        <span class="built_in">this</span>.seatCount = seatCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPassedVehicleInspection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> passedVehicleInspection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassedVehicleInspection</span><span class="params">(<span class="type">boolean</span> passedVehicleInspection)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.passedVehicleInspection = passedVehicleInspection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Driver <span class="title function_">getDriver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriver</span><span class="params">(Driver driver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用验证组"><a href="#4-使用验证组" class="headerlink" title="4. 使用验证组"></a>4. 使用验证组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a car and check that everything is ok with it.</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>( <span class="string">&quot;Morris&quot;</span>, <span class="string">&quot;DD-AB-123&quot;</span>, <span class="number">2</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">0</span>, constraintViolations.size() );</span><br><span class="line"><span class="comment">// but has it passed the vehicle inspection?</span></span><br><span class="line">constraintViolations = validator.validate( car, CarChecks.class );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;The car has to pass the vehicle inspection first&quot;</span>,</span><br><span class="line">        constraintViolations.iterator().next().getMessage()</span><br><span class="line">);</span><br><span class="line"><span class="comment">// let&#x27;s go to the vehicle inspection</span></span><br><span class="line">car.setPassedVehicleInspection( <span class="literal">true</span> );</span><br><span class="line">assertEquals( <span class="number">0</span>, validator.validate( car, CarChecks.class ).size() );</span><br><span class="line"><span class="comment">// now let&#x27;s add a driver. He is 18, but has not passed the driving test yet</span></span><br><span class="line"><span class="type">Driver</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>( <span class="string">&quot;John Doe&quot;</span> );</span><br><span class="line">john.setAge( <span class="number">18</span> );</span><br><span class="line">car.setDriver( john );</span><br><span class="line">constraintViolations = validator.validate( car, DriverChecks.class );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;You first have to pass the driving test&quot;</span>,</span><br><span class="line">        constraintViolations.iterator().next().getMessage()</span><br><span class="line">);</span><br><span class="line"><span class="comment">// ok, John passes the test</span></span><br><span class="line">john.passedDrivingTest( <span class="literal">true</span> );</span><br><span class="line">assertEquals( <span class="number">0</span>, validator.validate( car, DriverChecks.class ).size() );</span><br><span class="line"><span class="comment">// just checking that everything is in order now</span></span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="number">0</span>, validator.validate(</span><br><span class="line">        car,</span><br><span class="line">        Default.class,</span><br><span class="line">        CarChecks.class,</span><br><span class="line">        DriverChecks.class</span><br><span class="line">).size()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="二、组继承-🐮"><a href="#二、组继承-🐮" class="headerlink" title="二、组继承(🐮)"></a>二、组继承(🐮)</h1><ul><li>定义一个超级跑车</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@AssertTrue(</span></span><br><span class="line"><span class="meta">            message = &quot;Race car must have a safety belt&quot;,</span></span><br><span class="line"><span class="meta">            groups = RaceCarChecks.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> safetyBelt;</span><br><span class="line">    <span class="comment">// getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.groups.Default;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RaceCarChecks</span> <span class="keyword">extends</span> <span class="title class_">Default</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用组继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a supercar and check that it&#x27;s valid as a generic Car</span></span><br><span class="line"><span class="type">SuperCar</span> <span class="variable">superCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperCar</span>( <span class="string">&quot;Morris&quot;</span>, <span class="string">&quot;DD-AB-123&quot;</span>, <span class="number">1</span>  );</span><br><span class="line">assertEquals( <span class="string">&quot;must be greater than or equal to 2&quot;</span>, validator.validate( superCar ).iterator().next().getMessage() );</span><br><span class="line"><span class="comment">// check that this supercar is valid as generic car and also as race car</span></span><br><span class="line">Set&lt;ConstraintViolation&lt;SuperCar&gt;&gt; constraintViolations = validator.validate( superCar, RaceCarChecks.class );</span><br><span class="line">assertThat( constraintViolations ).extracting( <span class="string">&quot;message&quot;</span> ).containsOnly(</span><br><span class="line">        <span class="string">&quot;Race car must have a safety belt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;must be greater than or equal to 2&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="三、定义组序列（🐮）"><a href="#三、定义组序列（🐮）" class="headerlink" title="三、定义组序列（🐮）"></a>三、定义组序列（🐮）</h1><ul><li>定义序列组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.GroupSequence;</span><br><span class="line"><span class="keyword">import</span> javax.validation.groups.Default;</span><br><span class="line"><span class="meta">@GroupSequence(&#123; Default.class, CarChecks.class, DriverChecks.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderedChecks</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用序列组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>( <span class="string">&quot;Morris&quot;</span>, <span class="string">&quot;DD-AB-123&quot;</span>, <span class="number">2</span> );</span><br><span class="line">car.setPassedVehicleInspection( <span class="literal">true</span> );</span><br><span class="line"><span class="type">Driver</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>( <span class="string">&quot;John Doe&quot;</span> );</span><br><span class="line">john.setAge( <span class="number">18</span> );</span><br><span class="line">john.passedDrivingTest( <span class="literal">true</span> );</span><br><span class="line">car.setDriver( john );</span><br><span class="line">assertEquals( <span class="number">0</span>, validator.validate( car, OrderedChecks.class ).size() );</span><br></pre></td></tr></table></figure><h1 id="四、重新定义默认的组顺序"><a href="#四、重新定义默认的组顺序" class="headerlink" title="四、重新定义默认的组顺序"></a>四、重新定义默认的组顺序</h1><h2 id="GroupSequence"><a href="#GroupSequence" class="headerlink" title="@GroupSequence"></a>@GroupSequence</h2><ul><li>定义一个具有重定义的默认组的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GroupSequence(&#123; RentalChecks.class, CarChecks.class, RentalCar.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentalCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@AssertFalse(message = &quot;The car is currently rented out&quot;, groups = RentalChecks.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> rented;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RentalCar</span><span class="params">(String manufacturer, String licencePlate, <span class="type">int</span> seatCount)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>( manufacturer, licencePlate, seatCount );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRented</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rented;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRented</span><span class="params">(<span class="type">boolean</span> rented)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rented = rented;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RentalChecks</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用重新定义的默认组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RentalCar</span> <span class="variable">rentalCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RentalCar</span>( <span class="string">&quot;Morris&quot;</span>, <span class="string">&quot;DD-AB-123&quot;</span>, <span class="number">2</span> );</span><br><span class="line">rentalCar.setPassedVehicleInspection( <span class="literal">true</span> );</span><br><span class="line">rentalCar.setRented( <span class="literal">true</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;RentalCar&gt;&gt; constraintViolations = validator.validate( rentalCar );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;Wrong message&quot;</span>,</span><br><span class="line">        <span class="string">&quot;The car is currently rented out&quot;</span>,</span><br><span class="line">        constraintViolations.iterator().next().getMessage()</span><br><span class="line">);</span><br><span class="line">rentalCar.setRented( <span class="literal">false</span> );</span><br><span class="line">constraintViolations = validator.validate( rentalCar );</span><br><span class="line">assertEquals( <span class="number">0</span>, constraintViolations.size() );</span><br></pre></td></tr></table></figure><h2 id="GroupSequenceProvider"><a href="#GroupSequenceProvider" class="headerlink" title="@GroupSequenceProvider"></a>@GroupSequenceProvider</h2><ul><li>实现和使用默认组序列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentalCarGroupSequenceProvider</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">DefaultGroupSequenceProvider</span>&lt;RentalCar&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;?&gt;&gt; getValidationGroups(RentalCar car) &#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; defaultGroupSequence = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">        defaultGroupSequence.add( RentalCar.class );</span><br><span class="line">        <span class="keyword">if</span> ( car != <span class="literal">null</span> &amp;&amp; !car.isRented() ) &#123;</span><br><span class="line">            defaultGroupSequence.add( CarChecks.class );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultGroupSequence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GroupSequenceProvider(RentalCarGroupSequenceProvider.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentalCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@AssertFalse(message = &quot;The car is currently rented out&quot;, groups = RentalChecks.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> rented;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RentalCar</span><span class="params">(String manufacturer, String licencePlate, <span class="type">int</span> seatCount)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>( manufacturer, licencePlate, seatCount );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRented</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rented;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRented</span><span class="params">(<span class="type">boolean</span> rented)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rented = rented;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、组转换（🐮）"><a href="#五、组转换（🐮）" class="headerlink" title="五、组转换（🐮）"></a>五、组转换（🐮）</h1><ul><li>必须集合@Valid哦，否则报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(</span></span><br><span class="line"><span class="meta">            value = 18,</span></span><br><span class="line"><span class="meta">            message = &quot;You have to be 18 to drive a car&quot;,</span></span><br><span class="line"><span class="meta">            groups = DriverChecks.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@AssertTrue(</span></span><br><span class="line"><span class="meta">            message = &quot;You first have to pass the driving test&quot;,</span></span><br><span class="line"><span class="meta">            groups = DriverChecks.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> hasDrivingLicense;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">passedDrivingTest</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">        hasDrivingLicense = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GroupSequence(&#123; CarChecks.class, Car.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 14)</span></span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line">    <span class="meta">@Min(2)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seatCount;</span><br><span class="line">    <span class="meta">@AssertTrue(</span></span><br><span class="line"><span class="meta">            message = &quot;The car has to pass the vehicle inspection first&quot;,</span></span><br><span class="line"><span class="meta">            groups = CarChecks.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> passedVehicleInspection;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@ConvertGroup(from = Default.class, to = DriverChecks.class)</span></span><br><span class="line">    <span class="keyword">private</span> Driver driver;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String manufacturer, String licencePlate, <span class="type">int</span> seatCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.licensePlate = licencePlate;</span><br><span class="line">        <span class="built_in">this</span>.seatCount = seatCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPassedVehicleInspection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> passedVehicleInspection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassedVehicleInspection</span><span class="params">(<span class="type">boolean</span> passedVehicleInspection)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.passedVehicleInspection = passedVehicleInspection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Driver <span class="title function_">getDriver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriver</span><span class="params">(Driver driver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a car and validate. The Driver is still null and does not get validated</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>( <span class="string">&quot;VW&quot;</span>, <span class="string">&quot;USD-123&quot;</span>, <span class="number">4</span> );</span><br><span class="line">car.setPassedVehicleInspection( <span class="literal">true</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">0</span>, constraintViolations.size() );</span><br><span class="line"><span class="comment">// create a driver who has not passed the driving test</span></span><br><span class="line"><span class="type">Driver</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>( <span class="string">&quot;John Doe&quot;</span> );</span><br><span class="line">john.setAge( <span class="number">18</span> );</span><br><span class="line"><span class="comment">// now let&#x27;s add a driver to the car</span></span><br><span class="line">car.setDriver( john );</span><br><span class="line">constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;The driver constraint should also be validated as part of the default group&quot;</span>,</span><br><span class="line">        constraintViolations.iterator().next().getMessage(),</span><br><span class="line">        <span class="string">&quot;You first have to pass the driving test&quot;</span></span><br><span class="line">);</span><br><span class="line">```ss the driving test<span class="string">&quot;</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Hibernate Validator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校验 </tag>
            
            <tag> java </tag>
            
            <tag> hibernate validator </tag>
            
            <tag> 分组约束 </tag>
            
            <tag> 人组 </tag>
            
            <tag> 驱动组 </tag>
            
            <tag> 汽车组 </tag>
            
            <tag> 使用验证组 </tag>
            
            <tag> 组继承 </tag>
            
            <tag> 组序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hibernate validator】（六）创建自定义约束</title>
      <link href="/ce362f84.html"/>
      <url>/ce362f84.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="一、创建一个简单的约束"><a href="#一、创建一个简单的约束" class="headerlink" title="一、创建一个简单的约束"></a>一、创建一个简单的约束</h1><h2 id="1-约束注释"><a href="#1-约束注释" class="headerlink" title="1. 约束注释"></a>1. 约束注释</h2><ul><li>枚举表示大小写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CaseMode</span> &#123;</span><br><span class="line">    UPPER,</span><br><span class="line">    LOWER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义@CheckCase约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.ANNOTATION_TYPE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.FIELD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.PARAMETER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.TYPE_USE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class="line"><span class="meta">@Target(&#123; FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE_USE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = CheckCaseValidator.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(List.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckCase &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;org.hibernate.validator.referenceguide.chapter06.CheckCase.&quot;</span> +</span><br><span class="line">            <span class="string">&quot;message&#125;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    CaseMode <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    <span class="meta">@Target(&#123; FIELD, METHOD, PARAMETER, ANNOTATION_TYPE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        CheckCase[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>测试一下吧</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Severity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Info</span> <span class="keyword">extends</span> <span class="title class_">Payload</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Error</span> <span class="keyword">extends</span> <span class="title class_">Payload</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContactDetails</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;Name is mandatory&quot;, payload = Severity.Error.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;Phone number not specified, but not mandatory&quot;,</span></span><br><span class="line"><span class="meta">            payload = Severity.Info.class)</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="Target-定义约束所支持的目标元素类型"><a href="#Target-定义约束所支持的目标元素类型" class="headerlink" title="@Target 定义约束所支持的目标元素类型"></a>@Target 定义约束所支持的目标元素类型</h4><h4 id="Retention-RUNTIME-：指定此类型的注释将在运行时通过反射方式提供"><a href="#Retention-RUNTIME-：指定此类型的注释将在运行时通过反射方式提供" class="headerlink" title="@Retention(RUNTIME)：指定此类型的注释将在运行时通过反射方式提供"></a>@Retention(RUNTIME)：指定此类型的注释将在运行时通过反射方式提供</h4><h4 id="Constraint-validatedBy-CheckCaseValidator-class-：将注释类型标记为约束注释，并指定用于验证元素的验证器"><a href="#Constraint-validatedBy-CheckCaseValidator-class-：将注释类型标记为约束注释，并指定用于验证元素的验证器" class="headerlink" title="@Constraint(validatedBy &#x3D; CheckCaseValidator.class)：将注释类型标记为约束注释，并指定用于验证元素的验证器"></a>@Constraint(validatedBy &#x3D; CheckCaseValidator.class)：将注释类型标记为约束注释，并指定用于验证元素的验证器</h4><h4 id="CheckCase。如果可以在几种数据类型上使用约束，则可以指定几个验证器，每种数据类型一个。"><a href="#CheckCase。如果可以在几种数据类型上使用约束，则可以指定几个验证器，每种数据类型一个。" class="headerlink" title="@CheckCase。如果可以在几种数据类型上使用约束，则可以指定几个验证器，每种数据类型一个。"></a>@CheckCase。如果可以在几种数据类型上使用约束，则可以指定几个验证器，每种数据类型一个。</h4><h4 id="Repeatable-List-class-：表示注释可以在同一位置重复多次，通常使用不同的配置"><a href="#Repeatable-List-class-：表示注释可以在同一位置重复多次，通常使用不同的配置" class="headerlink" title="@Repeatable(List.class)：表示注释可以在同一位置重复多次，通常使用不同的配置"></a>@Repeatable(List.class)：表示注释可以在同一位置重复多次，通常使用不同的配置</h4><h2 id="2-约束验证器"><a href="#2-约束验证器" class="headerlink" title="2. 约束验证器"></a>2. 约束验证器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckCaseValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CheckCase, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> CaseMode caseMode;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CheckCase constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.caseMode = constraintAnnotation.value();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String object, ConstraintValidatorContext constraintContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( object == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( caseMode == CaseMode.UPPER ) &#123;</span><br><span class="line">            <span class="keyword">return</span> object.equals( object.toUpperCase() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> object.equals( object.toLowerCase() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义错误消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckCaseValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CheckCase, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> CaseMode caseMode;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CheckCase constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.caseMode = constraintAnnotation.value();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String object, ConstraintValidatorContext constraintContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( object == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> isValid;</span><br><span class="line">        <span class="keyword">if</span> ( caseMode == CaseMode.UPPER ) &#123;</span><br><span class="line">            isValid = object.equals( object.toUpperCase() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            isValid = object.equals( object.toLowerCase() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !isValid ) &#123;</span><br><span class="line">            constraintContext.disableDefaultConstraintViolation();</span><br><span class="line">            constraintContext.buildConstraintViolationWithTemplate(</span><br><span class="line">                    <span class="string">&quot;&#123;org.hibernate.validator.referenceguide.chapter06.&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;constraintvalidatorcontext.CheckCase.message&#125;&quot;</span></span><br><span class="line">            )</span><br><span class="line">            .addConstraintViolation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HibernateConstraintValidator（对原版进行扩展）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFutureValidator</span> <span class="keyword">implements</span> <span class="title class_">HibernateConstraintValidator</span>&lt;MyFuture, Instant&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Clock clock;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> orPresent;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConstraintDescriptor&lt;MyFuture&gt; constraintDescriptor,</span></span><br><span class="line"><span class="params">            HibernateConstraintValidatorInitializationContext initializationContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orPresent = constraintDescriptor.getAnnotation().orPresent();</span><br><span class="line">        <span class="built_in">this</span>.clock = initializationContext.getClockProvider().getClock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Instant instant, ConstraintValidatorContext constraintContext)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将有效负载传递给约束验证器"><a href="#将有效负载传递给约束验证器" class="headerlink" title="将有效负载传递给约束验证器"></a>将有效负载传递给约束验证器</h3><h3 id="在ValidatorFactory初始化期间定义约束验证器有效载荷"><a href="#在ValidatorFactory初始化期间定义约束验证器有效载荷" class="headerlink" title="- 在ValidatorFactory初始化期间定义约束验证器有效载荷"></a>- 在ValidatorFactory初始化期间定义约束验证器有效载荷</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ValidatorFactory</span> <span class="variable">validatorFactory</span> <span class="operator">=</span> Validation.byProvider( HibernateValidator.class )</span><br><span class="line">        .configure()</span><br><span class="line">        .constraintValidatorPayload( <span class="string">&quot;US&quot;</span> )</span><br><span class="line">        .buildValidatorFactory();</span><br><span class="line"><span class="type">Validator</span> <span class="variable">validator</span> <span class="operator">=</span> validatorFactory.getValidator();</span><br></pre></td></tr></table></figure><ul><li>使用Validator上下文定义约束验证器有效载荷</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HibernateValidatorFactory</span> <span class="variable">hibernateValidatorFactory</span> <span class="operator">=</span> Validation.byDefaultProvider()</span><br><span class="line">        .configure()</span><br><span class="line">        .buildValidatorFactory()</span><br><span class="line">        .unwrap( HibernateValidatorFactory.class );</span><br><span class="line"><span class="type">Validator</span> <span class="variable">validator</span> <span class="operator">=</span> hibernateValidatorFactory.usingContext()</span><br><span class="line">        .constraintValidatorPayload( <span class="string">&quot;US&quot;</span> )</span><br><span class="line">        .getValidator();</span><br><span class="line"><span class="comment">// [...] US specific validation checks</span></span><br><span class="line">validator = hibernateValidatorFactory.usingContext()</span><br><span class="line">        .constraintValidatorPayload( <span class="string">&quot;FR&quot;</span> )</span><br><span class="line">        .getValidator();</span><br><span class="line"><span class="comment">// [...] France specific validation checks</span></span><br></pre></td></tr></table></figure><ul><li>在约束验证器中使用约束验证器有效载荷</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ZipCode, String&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> String countryCode;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String object, ConstraintValidatorContext constraintContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( object == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">countryCode</span> <span class="operator">=</span> constraintContext</span><br><span class="line">                .unwrap( HibernateConstraintValidatorContext.class )</span><br><span class="line">                .getConstraintValidatorPayload( String.class );</span><br><span class="line">        <span class="keyword">if</span> ( <span class="string">&quot;US&quot;</span>.equals( countryCode ) ) &#123;</span><br><span class="line">            <span class="comment">// checks specific to the United States</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="string">&quot;FR&quot;</span>.equals( countryCode ) ) &#123;</span><br><span class="line">            <span class="comment">// checks specific to France</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-错误讯息"><a href="#3-错误讯息" class="headerlink" title="3. 错误讯息"></a>3. 错误讯息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.hibernate.validator.referenceguide.chapter06.CheckCase.message = 案例模式必须为&#123;value&#125;。</span><br></pre></td></tr></table></figure><h2 id="4-使用约束"><a href="#4-使用约束" class="headerlink" title="4. 使用约束"></a>4. 使用约束</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 14)</span></span><br><span class="line">    <span class="meta">@CheckCase(CaseMode.UPPER)</span></span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line">    <span class="meta">@Min(2)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seatCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String manufacturer, String licencePlate, <span class="type">int</span> seatCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.licensePlate = licencePlate;</span><br><span class="line">        <span class="built_in">this</span>.seatCount = seatCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用约束验证对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//invalid license plate</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>( <span class="string">&quot;Morris&quot;</span>, <span class="string">&quot;dd-ab-123&quot;</span>, <span class="number">4</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =</span><br><span class="line">        validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;Case mode must be UPPER.&quot;</span>,</span><br><span class="line">        constraintViolations.iterator().next().getMessage()</span><br><span class="line">);</span><br><span class="line"><span class="comment">//valid license plate</span></span><br><span class="line">car = <span class="keyword">new</span> <span class="title class_">Car</span>( <span class="string">&quot;Morris&quot;</span>, <span class="string">&quot;DD-AB-123&quot;</span>, <span class="number">4</span> );</span><br><span class="line">constraintViolations = validator.validate( car );</span><br><span class="line">assertEquals( <span class="number">0</span>, constraintViolations.size() );</span><br></pre></td></tr></table></figure><h1 id="二、类级别约束"><a href="#二、类级别约束" class="headerlink" title="二、类级别约束"></a>二、类级别约束</h1><ul><li>实现一个类级别约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; TYPE, ANNOTATION_TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123; ValidPassengerCountValidator.class &#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ValidPassengerCount &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;org.hibernate.validator.referenceguide.chapter06.classlevel.&quot;</span> +</span><br><span class="line">            <span class="string">&quot;ValidPassengerCount.message&#125;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidPassengerCountValidator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ValidPassengerCount, Car&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ValidPassengerCount constraintAnnotation)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Car car, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( car == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> car.getPassengers().size() &lt;= car.getSeatCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义属性路径"><a href="#自定义属性路径" class="headerlink" title="自定义属性路径"></a>自定义属性路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidPassengerCountValidator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ValidPassengerCount, Car&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ValidPassengerCount constraintAnnotation)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Car car, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( car == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> car.getPassengers().size() &lt;= car.getSeatCount();</span><br><span class="line">        <span class="keyword">if</span> ( !isValid ) &#123;</span><br><span class="line">            constraintValidatorContext.disableDefaultConstraintViolation();</span><br><span class="line">            constraintValidatorContext</span><br><span class="line">                    .buildConstraintViolationWithTemplate( <span class="string">&quot;&#123;my.custom.template&#125;&quot;</span> )</span><br><span class="line">                    .addPropertyNode( <span class="string">&quot;passengers&quot;</span> ).addConstraintViolation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、交叉级别约束"><a href="#三、交叉级别约束" class="headerlink" title="三、交叉级别约束"></a>三、交叉级别约束</h1><ul><li>交叉级别约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = ConsistentDateParametersValidator.class)</span></span><br><span class="line"><span class="meta">@Target(&#123; METHOD, CONSTRUCTOR, ANNOTATION_TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConsistentDateParameters &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;org.hibernate.validator.referenceguide.chapter04.&quot;</span> +</span><br><span class="line">            <span class="string">&quot;crossparameter.ConsistentDateParameters.message&#125;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通用和交叉级别约束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SupportedValidationTarget(ValidationTarget.PARAMETERS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsistentDateParametersValidator</span> <span class="keyword">implements</span></span><br><span class="line">        <span class="title class_">ConstraintValidator</span>&lt;ConsistentDateParameters, Object[]&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConsistentDateParameters constraintAnnotation)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Object[] value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( value.length != <span class="number">2</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>( <span class="string">&quot;Illegal method signature&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//leave null-checking to @NotNull on individual parameters</span></span><br><span class="line">        <span class="keyword">if</span> ( value[<span class="number">0</span>] == <span class="literal">null</span> || value[<span class="number">1</span>] == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !( value[<span class="number">0</span>] <span class="keyword">instanceof</span> Date ) || !( value[<span class="number">1</span>] <span class="keyword">instanceof</span> Date ) ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;Illegal method signature, expected two &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;parameters of type Date.&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ( (Date) value[<span class="number">0</span>] ).before( (Date) value[<span class="number">1</span>] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = &#123;</span></span><br><span class="line"><span class="meta">        ScriptAssertObjectValidator.class,</span></span><br><span class="line"><span class="meta">        ScriptAssertParametersValidator.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123; TYPE, FIELD, PARAMETER, METHOD, CONSTRUCTOR, ANNOTATION_TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ScriptAssert &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;org.hibernate.validator.referenceguide.chapter04.&quot;</span> +</span><br><span class="line">            <span class="string">&quot;crossparameter.ScriptAssert.message&#125;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    String <span class="title function_">script</span><span class="params">()</span>;</span><br><span class="line">    ConstraintTarget <span class="title function_">validationAppliesTo</span><span class="params">()</span> <span class="keyword">default</span> ConstraintTarget.IMPLICIT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指定通用和交叉参数约束的目标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ScriptAssert(script = &quot;arg1.size() &lt;= arg0&quot;, validationAppliesTo = ConstraintTarget.PARAMETERS)</span></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">buildCar</span><span class="params">(<span class="type">int</span> seatCount, List&lt;Passenger&gt; passengers)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、约束构成"><a href="#四、约束构成" class="headerlink" title="四、约束构成"></a>四、约束构成</h1><ul><li>创建一个合成约束 @ValidLicensePlate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size(min = 2, max = 14)</span></span><br><span class="line"><span class="meta">@CheckCase(CaseMode.UPPER)</span></span><br><span class="line"><span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, TYPE_USE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123; &#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ValidLicensePlate &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;org.hibernate.validator.referenceguide.chapter06.&quot;</span> +</span><br><span class="line">            <span class="string">&quot;constraintcomposition.ValidLicensePlate.message&#125;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组合约束的应用 ValidLicensePlate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@ValidLicensePlate</span></span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用@ReportAsSingleViolation</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReportAsSingleViolation</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ValidLicensePlate &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;org.hibernate.validator.referenceguide.chapter06.&quot;</span> +</span><br><span class="line">            <span class="string">&quot;constraintcomposition.reportassingle.ValidLicensePlate.message&#125;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br><span class="line">```ayload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Hibernate Validator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校验 </tag>
            
            <tag> hibernate validator </tag>
            
            <tag> 校验注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hibernate validator】（四）内插约束错误消息</title>
      <link href="/a3ee2715.html"/>
      <url>/a3ee2715.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="一、默认消息插值"><a href="#一、默认消息插值" class="headerlink" title="一、默认消息插值"></a>一、默认消息插值</h1><ul><li>替换默认提示消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter04;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;The manufacturer name must not be null&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="comment">//constructor, getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-需要转义的字符"><a href="#1-需要转义的字符" class="headerlink" title="1. 需要转义的字符"></a>1. 需要转义的字符</h2><ul><li>{ 被认为是文字 {</li><li>} 被认为是文字 }</li><li>$ 被认为是文字 $</li><li>\ 被认为是文字 \</li></ul><h2 id="2-消息表达式插值替换"><a href="#2-消息表达式插值替换" class="headerlink" title="2. 消息表达式插值替换"></a>2. 消息表达式插值替换</h2><ul><li>指定消息描述符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hibernate.validator.referenceguide.chapter04.complete;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line">    <span class="meta">@Size(</span></span><br><span class="line"><span class="meta">            min = 2,</span></span><br><span class="line"><span class="meta">            max = 14,</span></span><br><span class="line"><span class="meta">            message = &quot;The license plate &#x27;$&#123;validatedValue&#125;&#x27; must be between &#123;min&#125; and &#123;max&#125; characters long&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line">    <span class="meta">@Min(</span></span><br><span class="line"><span class="meta">            value = 2,</span></span><br><span class="line"><span class="meta">            message = &quot;There must be at least &#123;value&#125; seat$&#123;value &gt; 1 ? &#x27;s&#x27; : &#x27;&#x27;&#125;&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seatCount;</span><br><span class="line">    <span class="meta">@DecimalMax(</span></span><br><span class="line"><span class="meta">            value = &quot;350&quot;,</span></span><br><span class="line"><span class="meta">            message = &quot;The top speed $&#123;formatter.format(&#x27;%1$.2f&#x27;, validatedValue)&#125; is higher &quot; +</span></span><br><span class="line"><span class="meta">                    &quot;than &#123;value&#125;&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> topSpeed;</span><br><span class="line">    <span class="meta">@DecimalMax(value = &quot;100000&quot;, message = &quot;Price must not be higher than $&#123;value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(</span></span><br><span class="line"><span class="params">            String manufacturer,</span></span><br><span class="line"><span class="params">            String licensePlate,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> seatCount,</span></span><br><span class="line"><span class="params">            <span class="type">double</span> topSpeed,</span></span><br><span class="line"><span class="params">            BigDecimal price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="built_in">this</span>.licensePlate = licensePlate;</span><br><span class="line">        <span class="built_in">this</span>.seatCount = seatCount;</span><br><span class="line">        <span class="built_in">this</span>.topSpeed = topSpeed;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getters and setters ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>预期的错误消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>( <span class="literal">null</span>, <span class="string">&quot;A&quot;</span>, <span class="number">1</span>, <span class="number">400.123456</span>, BigDecimal.valueOf( <span class="number">200000</span> ) );</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> validator.validateProperty( car, <span class="string">&quot;manufacturer&quot;</span> )</span><br><span class="line">        .iterator()</span><br><span class="line">        .next()</span><br><span class="line">        .getMessage();</span><br><span class="line">assertEquals( <span class="string">&quot;must not be null&quot;</span>, message );</span><br><span class="line">message = validator.validateProperty( car, <span class="string">&quot;licensePlate&quot;</span> )</span><br><span class="line">        .iterator()</span><br><span class="line">        .next()</span><br><span class="line">        .getMessage();</span><br><span class="line">assertEquals(</span><br><span class="line">        <span class="string">&quot;The license plate &#x27;A&#x27; must be between 2 and 14 characters long&quot;</span>,</span><br><span class="line">        message</span><br><span class="line">);</span><br><span class="line">message = validator.validateProperty( car, <span class="string">&quot;seatCount&quot;</span> ).iterator().next().getMessage();</span><br><span class="line">assertEquals( <span class="string">&quot;There must be at least 2 seats&quot;</span>, message );</span><br><span class="line">message = validator.validateProperty( car, <span class="string">&quot;topSpeed&quot;</span> ).iterator().next().getMessage();</span><br><span class="line">assertEquals( <span class="string">&quot;The top speed 400.12 is higher than 350&quot;</span>, message );</span><br><span class="line">message = validator.validateProperty( car, <span class="string">&quot;price&quot;</span> ).iterator().next().getMessage();</span><br><span class="line">assertEquals( <span class="string">&quot;Price must not be higher than $100000&quot;</span>, message );</span><br></pre></td></tr></table></figure><h1 id="二、自定义消息插值"><a href="#二、自定义消息插值" class="headerlink" title="二、自定义消息插值"></a>二、自定义消息插值</h1><ul><li>必须实现javax.validation.MessageInterpolator接口并且实现必须是线程安全的</li><li></li><li>使用特定的资源包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Validator</span> <span class="variable">validator</span> <span class="operator">=</span> Validation.byDefaultProvider()</span><br><span class="line">        .configure()</span><br><span class="line">        .messageInterpolator(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ResourceBundleMessageInterpolator</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">PlatformResourceBundleLocator</span>( <span class="string">&quot;MyMessages&quot;</span> )</span><br><span class="line">                )</span><br><span class="line">        )</span><br><span class="line">        .buildValidatorFactory()</span><br><span class="line">        .getValidator();</span><br></pre></td></tr></table></figure><ul><li>使用 AggregateResourceBundleLocator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Validator</span> <span class="variable">validator</span> <span class="operator">=</span> Validation.byDefaultProvider()</span><br><span class="line">        .configure()</span><br><span class="line">        .messageInterpolator(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ResourceBundleMessageInterpolator</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AggregateResourceBundleLocator</span>(</span><br><span class="line">                                Arrays.asList(</span><br><span class="line">                                        <span class="string">&quot;MyMessages&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;MyOtherMessages&quot;</span></span><br><span class="line">                                )</span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">        )</span><br><span class="line">        .buildValidatorFactory()</span><br><span class="line">        .getValidator();</span><br><span class="line">```     .getValidator();</span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Hibernate Validator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校验 </tag>
            
            <tag> hibernate validator </tag>
            
            <tag> 消息插值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【插件】Java开发规范配套Idea阿里巴巴代码扫描规范插件</title>
      <link href="/41f7cf00.html"/>
      <url>/41f7cf00.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/s://blog.zysicyj.top/">https://blog.zysicyj.top/s://blog.zysicyj.top/</a></p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>这个是三方优化版，如果不喜欢可以去下载官方的<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-26/100924704657900.png"></p><p>插件官网地址<br><a href="https://plugins.jetbrains.com/plugin/22381-alibaba-java-coding-guidelines-fix-some-bug-">https://plugins.jetbrains.com/plugin/22381-alibaba-java-coding-guidelines-fix-some-bug-</a></p><h1 id="手动启动插件"><a href="#手动启动插件" class="headerlink" title="手动启动插件"></a>手动启动插件</h1><p>插件默认是开启自动实时扫描的，如果感觉太卡，可以关掉实时扫描<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-26/101423503727700.png"></p><h1 id="查看问题清单"><a href="#查看问题清单" class="headerlink" title="查看问题清单"></a>查看问题清单</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-26/101522019517000.png"></p><h1 id="快速修复"><a href="#快速修复" class="headerlink" title="快速修复"></a>快速修复</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-26/101573983608100.png"></p><h1 id="git配置插件检测"><a href="#git配置插件检测" class="headerlink" title="git配置插件检测"></a>git配置插件检测</h1><p>保证必须通过代码扫描的代码才能提交<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-26/101741218435600.png"></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> idea </tag>
            
            <tag> 安装 </tag>
            
            <tag> java开发规范 </tag>
            
            <tag> 阿里巴巴代码扫描规范 </tag>
            
            <tag> 手动启动 </tag>
            
            <tag> 问题清单 </tag>
            
            <tag> 快速修复 </tag>
            
            <tag> git配置 </tag>
            
            <tag> 检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开发规范系列】（二）：Java后台开发规范</title>
      <link href="/624f2c29.html"/>
      <url>/624f2c29.html</url>
      
        <content type="html"><![CDATA[<h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>提到Java开发规范，那么大家能想到的基本就是<strong>阿里巴巴Java开发手册</strong>，这个手册的内容很丰富，但是呢篇幅太长，很多人都记不住，那么怎么办呢？好在阿里巴巴提供了代码扫描插件，方便我们开发时发现问题并及时修改。</p><h1 id="如何使用该插件？"><a href="#如何使用该插件？" class="headerlink" title="如何使用该插件？"></a>如何使用该插件？</h1><p><a href="https://blog.zysicyj.top/41f7cf00">参考这篇文章：【插件】Java开发规范配套Idea阿里巴巴代码扫描</a></p><h1 id="手册内容"><a href="#手册内容" class="headerlink" title="手册内容"></a>手册内容</h1><div class="row">    <embed src="/static/pdf/Java开发手册(黄山版).pdf" width="100%" height="550" type="application/pdf"></div><h1 id="项目统一规约"><a href="#项目统一规约" class="headerlink" title="项目统一规约"></a>项目统一规约</h1><ul><li>工具类统一使用Hutool，非必要不要自定义工具类</li><li>controller返回的每个实体需要新建一个Vo封装</li><li>controller接受的参数统一使用Param封装</li><li>Do类不允许添加额外字段</li><li>业务之间传输使用Dto类封装</li><li>跨模块，接口调用不允许直接传DO，需要封装成Dto</li><li>单机事务必须加上@Transactional注解</li><li>分布式事务必须加上@Seata注解</li><li>统一使用Mybatis语法，不要使用JPA</li><li>ID统一使用Leaf雪花算法获取</li><li>参数传递使用POJO传递，尽量不要使用Map</li><li>方法参数超出屏幕宽度（一般3到5个）封装成对象接收</li><li>方法命名规则<ul><li>删除：del***</li><li>更新：update***</li><li>添加：insert***</li><li>单个查询：select***</li><li>批量查询：list***</li><li>分页：page***</li><li>导出：export***</li><li>导入：import***</li><li>返回布尔值的方法：iz***</li><li>校验：check***</li><li>填充：fill***</li></ul></li><li>类名命名规则<ul><li>拦截器：***Handler</li><li>过滤器：***Filter</li><li>枚举：***Enum</li><li>常量：***Constant</li><li>监听器：***Listener</li><li>配置类：***Config</li></ul></li><li>变量命名规则（全部驼峰）<ul><li>静态常量：大写，下划线分隔 例如: USER_NAME_GLOBAL</li><li>局部常量：大写，下划线分隔 例如：USER_NAME</li><li>全局变量：***Global 例如：userNameGlobal</li><li>List类型：***List 例如：userList</li><li>Map类型： ***Map 例如：userByIdMap</li><li>Set类型： ***Set 例如：userSet</li><li>表示数量： ***Num 例如： userTotalNum</li><li>表示判断： iz**** 例如：izLeader</li></ul></li></ul><h1 id="建议阅读文章"><a href="#建议阅读文章" class="headerlink" title="建议阅读文章"></a>建议阅读文章</h1><p>##如何使用校验<br><a href="https://blog.zysicyj.top/caa11a30">【hibernate validator】（二）声明和验证Bean约束</a><br><a href="https://blog.zysicyj.top/9df1ab00">【hibernate validator】（三）声明和验证方法约束</a><br><a href="https://blog.zysicyj.top/a3ee2715">【hibernate validator】（四）内插约束错误消息</a><br><a href="https://blog.zysicyj.top/7394ca34">【hibernate validator】（五）分组约束</a><br><a href="https://blog.zysicyj.top/ce362f84">【hibernate validator】（六）创建自定义约束</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>某人事系统架构搭建设计记录</title>
      <link href="/7aaf60e.html"/>
      <url>/7aaf60e.html</url>
      
        <content type="html"><![CDATA[<h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="先大致列一下基础情况"><a href="#先大致列一下基础情况" class="headerlink" title="先大致列一下基础情况"></a>先大致列一下基础情况</h1><ul><li>架构必须是微服务</li><li>场景上涉及大量查询操作，分析操作</li><li>存在临时大量写入的场景</li><li>并发并不高</li><li>对高可用要求较高，不能挂掉</li><li>对安全要求高</li><li>要能过等保测试等三方测试</li><li>使用人数并不多，十万内</li><li>涉及很多在线编辑，预览等操作</li><li>对大屏展示有需求</li><li>数据库还不确定，如果要求高的话mysql必须换成达梦</li><li>中间件也不确定，要求高的话必须换成东方通</li><li>加密必须是国密</li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好的代码，肯定最基本的有一套开发规范去约束的，不然堆砌的代码肯定成”屎山“。扩展性，性能啥的先不谈，单单维护代码成本就会很高，也很容易出BUG。</p><p>所以呀，我们必须先有一套开发规范，我这里拟了一套规范供内部使用：</p><ol><li><a href="https://blog.zysicyj.top/e1aecfe9">MySQL开发规范</a></li><li><a href="https://blog.zysicyj.top/624f2c29">后台开发规范</a></li><li><a href="https://blog.zysicyj.top/e821a36">前端开发规范</a></li><li><a href="https://blog.zysicyj.top/8e340800">代码提交规范</a></li></ol><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>这里微服务框架我推荐直接使用Spring Cloud Alibaba体系组件，原因如下：</p><ol><li>Spring Cloud Alibaba 已经是国内实际上微服务标准</li><li>服务于阿里集团大大小小各种业务，生产使用稳定</li><li>社区庞大，遇到问题容易解决</li><li>文档齐全，中文文档详细，方便查阅</li><li>与 Spring Cloud 集成，可以充分使用 Spring Cloud 特性</li><li>组件丰富</li></ol><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-26/78785491774100.png" alt="系统架构图"></p><p>高清大图地址：<a href="https://www.processon.com/view/link/64ef11baa8c890267a8a023d">https://www.processon.com/view/link/64ef11baa8c890267a8a023d</a></p><h1 id="聊聊组件选型"><a href="#聊聊组件选型" class="headerlink" title="聊聊组件选型"></a>聊聊组件选型</h1><p>那么，具体我们需要哪些组件呢？这里的组件并不是必须的，需要后续综合考虑</p><ol><li><strong>ES</strong>：数据检索</li><li><strong>Redis</strong>：缓存</li><li><strong>JetCache</strong>：多级缓存</li><li><strong>MySQL</strong>，如果有国产化需求，考虑<strong>达梦</strong>数据库</li><li><strong>Druid</strong>：数据源管理框架</li><li><strong>ShardingSphere</strong>：对数据库进行增强，比如<strong>分库分表，加密</strong>的支持</li><li><strong>Minio</strong>：文件存储</li><li><strong>Seata</strong>：分布式事务</li><li><strong>Spring Cloud Gateway</strong>：由于并发量并不大，所以我们可以不需要<strong>Nginx</strong>网关</li><li><strong>Sentinel</strong>: 熔断限流</li><li><strong>Spring Cloud Alibaba Sidecar</strong>：项目中很有可能涉及其他非 Spring Cloud 应用，此时就需要将其接入 Spring Cloud</li><li>引入<strong>GraalVM</strong>，可以看到，对比 JVM<br>启动速度提升<img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-24/128986692919000.png"></li><li><strong>JimuReport+EasyExcel</strong>：报表设计</li><li><strong>KkFileView</strong>：在线预览各种文件</li><li><strong>Activity</strong>：工作流支持</li><li><strong>Hutool</strong>：最全工具类库</li><li><strong>Nacos</strong>：服务注册和配置中心</li><li><strong>RocketMQ</strong>：消息队列，削峰填谷</li><li><strong>Docker</strong>：使用 Docker 进行容器化部署</li><li><strong>GitLab</strong>：源码管理</li><li><strong>Nexus</strong>：构建仓库</li><li><strong>Jenkins</strong>：部署平台</li><li><strong>SkyWalking</strong>：链路追踪</li><li><strong>SaToken</strong> 或 <strong>Spring Cloud Security+Oauth</strong>：授权</li><li><strong>Leaf</strong>：分布式 ID 生成器</li><li><strong>MybatisFlex</strong>：ORM 框架</li><li><strong>Dubbo</strong> 或 <strong>Feign</strong>：服务间通信</li></ol><h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><p>再次声明一点，业务上是读多写少，分析报表多，所以很多设计上要优化</p><ul><li>MySQL：读写分离，分库分表</li><li>Redis：主从从架构，哨兵集群</li><li>项目使用多级缓存</li><li>数据国密加密</li><li>账号最小权限分配，严格限制超级管理员账号</li><li>统一线程池使用</li></ul><h1 id="打任务量导入导出"><a href="#打任务量导入导出" class="headerlink" title="打任务量导入导出"></a>打任务量导入导出</h1><ul><li>通过优化线程池提高效率</li><li>通过逻辑过滤重复任务</li><li>使用消息队列削峰</li><li>使用缓存优化查询速度</li></ul><h1 id="查询流程"><a href="#查询流程" class="headerlink" title="查询流程"></a>查询流程</h1><ol><li>客户端发送请求</li><li>前端请求加密</li><li>请求发送到网关</li><li>网关校验请求合法性</li><li>网关根据路由规则转发到具体的服务器上处理</li><li>服务器解密请求数据</li><li>查询本地缓存</li><li>若无则查询 Redis</li><li>若无则进行业务流转，最终查询 MySQL</li><li>根据路由规则，查询只读 MySQL 节点并返回数据</li><li>数据本地缓存，然后 Redis 缓存</li><li>返回响应数据</li><li>对响应加密，转发到网关</li><li>网关转发给客户端</li><li>客户端解密，展示数据</li></ol><h1 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol><li>开发提交代码</li><li>基于 GitLab CI&#x2F;CD 自动拉取代码生成 Docker 镜像并提供服务</li></ol><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ol><li>合并代码到测试分支</li><li>基于 GitLab CI&#x2F;CD 自动拉取代码生成 Docker 镜像并提供服务</li></ol><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><ol><li>合并代码到生产分支</li><li>基于 GitLab，手动用 Jenkins 部署项目</li></ol><h1 id="详细部署策略"><a href="#详细部署策略" class="headerlink" title="详细部署策略"></a>详细部署策略</h1><p>如果中台能提供，那肯定是最好的，不用考虑那么多了</p><p>现在假设有10台服务器</p><ol><li><p>服务器1和服务器2：MySQL数据库服务器，部署主从复制架构。</p><ul><li>服务器1作为主数据库（Master），负责写入操作和部分读取操作。</li><li>服务器2作为从数据库（Slave），负责复制主数据库的数据，并提供读取操作，实现读写分离。</li><li>主从复制可以提高数据库的可用性和性能，当主数据库出现故障时，可以快速切换到从数据库。</li></ul></li><li><p>服务器3和服务器4：Redis缓存服务器，部署主从架构。</p><ul><li>服务器3作为主节点（Master），负责处理写入和读取操作。</li><li>服务器4作为从节点（Slave），复制主节点的数据，并提供读取操作。</li><li>Redis主从架构可以提高缓存的可用性和读取性能。</li></ul></li><li><p>服务器5：Minio文件存储服务器，用于存储上传的文件。</p><ul><li>Minio是一个开源的对象存储服务器，提供高可用性和可扩展性的存储解决方案。</li></ul></li><li><p>服务器6和服务器7：Nacos服务注册和配置中心，用于服务的注册和配置管理。</p><ul><li>Nacos提供了服务注册、发现和配置管理的功能，支持高可用和可靠的服务部署。</li></ul></li><li><p>服务器8：RocketMQ消息队列服务器，用于削峰填谷，异步处理导入任务。</p><ul><li>RocketMQ提供了高吞吐量、低延迟的消息传递能力，可以将导入任务放入消息队列中，由异步消费者进行处理。</li></ul></li><li><p>服务器9和服务器10：用于部署应用程序和其他中间件，如Spring Cloud Gateway、Sentinel、SkyWalking等。</p><ul><li>这些服务器用于部署应用程序和其他中间件，如API网关、熔断限流、链路追踪等，提供服务的访问和监控。</li></ul></li></ol><p>将MySQL数据库和Redis缓存部署为主从架构的原因如下：</p><ol><li>高可用性：主从复制可以提供故障容错能力，当主节点出现故障时，可以快速切换到从节点，保证服务的连续性和可用性。</li><li>读写分离：通过将读操作分发到从节点，可以减轻主节点的负载，提高数据库的读取性能。同时，从节点的复制过程对主节点的影响较小，不会对主节点的写入操作产生影响。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TechGrow实现Hexo引流微信公众号</title>
      <link href="/3672160f.html"/>
      <url>/3672160f.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h2 id="前言-前言"><a href="#前言-前言" class="headerlink" title="#(#前言) 前言"></a>#(#前言) 前言</h2><p>Hexo 博客建议安装 <a href="https://github.com/rqh656418510/hexo-readmore">hexo-readmore (opens new window)</a> 插件，将 <a href="https://open.techgrow.cn/">TechGrow (opens new window)</a> 的免费微信公众号引流工具整合到博客中，用户扫码关注微信公众号后可以解锁全站文章，让微信公众号的粉丝数躺着增长。</p><h2 id="特色功能-特色功能"><a href="#特色功能-特色功能" class="headerlink" title="#(#特色功能) 特色功能"></a>#(#特色功能) 特色功能</h2><ul><li>兼容主流的 Hexo 主题</li><li>支持随机为博客添加引流功能</li><li>支持关闭某篇文章的引流功能</li><li>支持查询用户解锁文章的历史记录</li><li>支持自定义或者动态计算文章内容的预览高度</li><li>支持自定义 CSS 样式，轻松适配不同风格的博客</li><li>支持开放 API，灵活接入第三方私有化部署的应用服务</li></ul><h2 id="注册博客-注册博客"><a href="#注册博客-注册博客" class="headerlink" title="#(#注册博客) 注册博客"></a>#(#注册博客) 注册博客</h2><p>浏览器访问 <a href="https://open.techgrow.cn/">TechGrow (opens new window)</a> 的官网 ，注册并登录账号后，进入博客的后台管理页面。首先点击左侧的菜单 <code>博客注册</code>，然后点击 <code>新增</code> 按钮，添加自己博客的信息。博客注册成功后，记录下 <code>博客 ID</code>，后面的步骤会使用到</p><p><img src="https://docs.techgrow.cn/v1/images/guide/717e14eb59dd44dea62d6a0b7549abfd.png"></p><h2 id="设置公众号-设置公众号"><a href="#设置公众号-设置公众号" class="headerlink" title="#(#设置公众号) 设置公众号"></a>#(#设置公众号) 设置公众号</h2><p>在微信公众号的后台管理页面，菜单栏里选择 <code>自动回复</code> - <code>关键词回复</code>，启用 <code>自动回复</code>，然后点击 <code>添加回复</code> 按钮</p><p><img src="https://docs.techgrow.cn/v1/images/guide/em64p7w8wlqtt0rsjop0jjeywx29m25w.png"></p><p>填写 <code>规则名称</code>、<code>关键词（当初你在 TechGrow 中设置的）</code>、<code>回复内容</code> 选择 <code>文字</code>，然后 <code>回复文字</code> 的内容填写获取博客解锁验证码的链接，如下所示（请自行更改 <code>xxxxx-xxxxxxxxx-xxx</code> 为你申请到的博客 ID）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://open.techgrow.cn/#/readmore/captcha/generate?blogId=xxxxx-xxxxxxxxx-xxx&quot;&gt;点击链接，获取博客解锁验证码&lt;/a&gt; </span><br></pre></td></tr></table></figure><p><img src="https://docs.techgrow.cn/v1/images/guide/yd89wbdji196ixtwzgzamw37fbein1ia.png"></p><p>此时，当读者关注你的微信公众号，并输入关键词后（比如我设置的关键词就是 <code>tech</code>），那么读者就会自动接收到获取博客解锁验证码的链接</p><h2 id="安装插件-安装插件"><a href="#安装插件-安装插件" class="headerlink" title="#(#安装插件) 安装插件"></a>#(#安装插件) 安装插件</h2><ul><li>运行 <code>npm install</code> 命令安装插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-readmore --save </span><br></pre></td></tr></table></figure><h2 id="配置-hexo-配置-Hexo"><a href="#配置-hexo-配置-Hexo" class="headerlink" title="#(#配置-hexo) 配置 Hexo"></a>#(#配置-hexo) 配置 Hexo</h2><p>编辑 Hexo 自身的 <code>_config.yml</code> 配置文件，新增插件的配置信息（请自行更改博客相关的信息），如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">readmore:</span><br><span class="line">  # 是否启用</span><br><span class="line">  enable: true</span><br><span class="line">  # 已申请的博客 ID</span><br><span class="line">  blogId: &#x27;18762-1609305354821-257&#x27;</span><br><span class="line">  # 已申请的微信公众号名称</span><br><span class="line">  name: &#x27;全栈技术驿站&#x27;</span><br><span class="line">  # 已申请的微信公众号回复关键词</span><br><span class="line">  keyword: &#x27;tech&#x27;</span><br><span class="line">  # 已申请的微信公众号二维码图片</span><br><span class="line">  qrcode: &#x27;https://www.techgrow.cn/img/wx_mp_qr.png&#x27;</span><br><span class="line">  # 自定义的 JS 资源链接，可用于 CDN 加速</span><br><span class="line">  libUrl: &#x27;https://qiniu.techgrow.cn/readmore/dist/readmore.js&#x27;</span><br><span class="line">  # 自定义的 CSS 资源链接，可用于适配不同风格的博客</span><br><span class="line">  cssUrl: &#x27;https://qiniu.techgrow.cn/readmore/dist/hexo.css&#x27;</span><br><span class="line">  # 命令行终端是否输出日志信息</span><br><span class="line">  debug: true</span><br><span class="line">  # 文章内容的预览高度（例如 300）</span><br><span class="line">  height: &#x27;auto&#x27;</span><br><span class="line">  # 文章解锁后凭证的有效天数</span><br><span class="line">  expires: 365</span><br><span class="line">  # 定时校验凭证有效性的时间间隔（秒）</span><br><span class="line">  interval: 60</span><br><span class="line">  # 是否添加微信公众号引流工具到移动端页面</span><br><span class="line">  allowMobile: false</span><br><span class="line">  # 获取文章主体内容的 JS 选择器，在博客启用了 Pjax 的情况下才需要根据不同的主题进行配置</span><br><span class="line">  pjaxSelector: &#x27;&#x27;</span><br><span class="line">  # Pjax 支持重载的 Css 类名（例如 &#x27;pjax&#x27;），在博客启用了 Pjax 的情况下才需要根据不同的主题进行配置</span><br><span class="line">  pjaxCssClass: &#x27;&#x27;</span><br><span class="line">  # 每篇文章随机添加微信公众号引流工具的概率，有效范围在 0.1 ~ 1 之间，1 则表示所有文章默认都自动添加引流工具</span><br><span class="line">  random: 1 </span><br></pre></td></tr></table></figure><p>或者打开 TechGrow 的<a href="https://open.techgrow.cn/#/readmore/website/register">博客后台管理页面 (opens new window)</a>，点击博客列表中右侧的 <code>使用</code> 链接，将窗口里的 YAML 配置内容复制到 Hexo 自身的 <code>_config.yml</code> 配置文件即可。</p><h2 id="参数说明-参数说明"><a href="#参数说明-参数说明" class="headerlink" title="#(#参数说明) 参数说明"></a>#(#参数说明) 参数说明</h2><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>enable</td><td>Boolean</td><td>是</td><td><code>false</code></td><td>-</td></tr><tr><td>blogId</td><td>String</td><td>是</td><td></td><td>-</td></tr><tr><td>name</td><td>String</td><td>是</td><td></td><td>-</td></tr><tr><td>keyword</td><td>String</td><td>是</td><td></td><td>-</td></tr><tr><td>qrcode</td><td>String</td><td>是</td><td></td><td>-</td></tr><tr><td>libUrl</td><td>String</td><td>否</td><td><code>https://qiniu.techgrow.cn/readmore/dist/readmore.js</code></td><td>-</td></tr><tr><td>cssUrl</td><td>String</td><td>否</td><td><code>https://qiniu.techgrow.cn/readmore/dist/hexo.css</code></td><td>-</td></tr><tr><td>debug</td><td>Boolean</td><td>否</td><td><code>true</code></td><td>-</td></tr><tr><td>height</td><td>String &#x2F; Number</td><td>否</td><td><code>auto</code></td><td>-</td></tr><tr><td>expires</td><td>Number</td><td>否</td><td><code>365</code></td><td>-</td></tr><tr><td>interval</td><td>Number</td><td>否</td><td><code>60</code></td><td>-</td></tr><tr><td>allowMobile</td><td>Boolean</td><td>否</td><td><code>false</code></td><td>-</td></tr><tr><td>pjaxSelector</td><td>String</td><td>否</td><td></td><td>-</td></tr><tr><td>pjaxCssClass</td><td>String</td><td>否</td><td></td><td>-</td></tr><tr><td>random</td><td>Number</td><td>否</td><td><code>1</code></td><td>-</td></tr><tr><td>excludes</td><td>Array</td><td>否</td><td></td><td>-</td></tr></tbody></table><h2 id="构建-hexo-构建-Hexo"><a href="#构建-hexo-构建-Hexo" class="headerlink" title="#(#构建-hexo) 构建 Hexo"></a>#(#构建-hexo) 构建 Hexo</h2><ul><li><p>运行 <code>hexo clean</code> 命令清理本地博客</p></li><li><p>运行 <code>hexo generate</code> 命令构建本地博客</p></li><li><p>运行 <code>hexo server</code> 命令启动本地博客服务</p></li></ul><h2 id="验证插件效果-验证插件效果"><a href="#验证插件效果-验证插件效果" class="headerlink" title="#(#验证插件效果) 验证插件效果"></a>#(#验证插件效果) 验证插件效果</h2><p>打开文章页面，若文章自动隐藏了部分内容，并且出现了 <code>阅读全文</code> 按钮，则说明引流插件正常运行，如下图所示：</p><p><img src="https://docs.techgrow.cn/v1/images/guide/3f53ab36dfa84fb99a6508ae46e5373a.png"></p><p>点击 <code>阅读全文</code> 按钮，会弹出微信公众号的二维码窗口，如下图所示：</p><p><img src="https://docs.techgrow.cn/v1/images/guide/202980a480fd463c814a31d5cc3fb2a1.png"></p><h2 id="取消阅读限制-取消阅读限制"><a href="#取消阅读限制-取消阅读限制" class="headerlink" title="#(#取消阅读限制) 取消阅读限制"></a>#(#取消阅读限制) 取消阅读限制</h2><p>若希望关闭某篇文章的微信公众号导流功能，可以在文章的头模板中使用 <code>readmore: false</code> 配置属性，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:  Hexo版本升级教程</span><br><span class="line">tags: [Hexo]</span><br><span class="line">readmore: false</span><br><span class="line">keywords: [Hexo, 版本升级]</span><br><span class="line">date: 2022-01-12 22:25:49</span><br><span class="line">updated: 2022-01-12 22:25:49</span><br><span class="line">--- </span><br></pre></td></tr></table></figure><p>若希望关闭部分文章的微信公众号引流功能，可以使用插件的 <code>excludes</code> 参数来实现，支持使用路径、通配符的匹配规则。</p><ul><li>根据 URL 路径，关闭某篇文章的引流功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 排除 URL 为 `/notes/637e7b8f.html` 的文章</span><br><span class="line">readmore:</span><br><span class="line">  ....</span><br><span class="line">  excludes:</span><br><span class="line">    - &#x27;/notes/637e7b8f.html&#x27; </span><br></pre></td></tr></table></figure><ul><li>根据 URL 通配符，关闭某个目录下所有文章的引流功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 排除 URL 以 `/fontend` 开头的文章</span><br><span class="line"># 排除 URL 为 `/backend/python/io` 的文章</span><br><span class="line">readmore:</span><br><span class="line">  ....</span><br><span class="line">  excludes:</span><br><span class="line">    - &#x27;/fontend/*&#x27;</span><br><span class="line">    - &#x27;/backend/*/io&#x27; </span><br></pre></td></tr></table></figure><h2 id="pjax-的支持-Pjax-的支持"><a href="#pjax-的支持-Pjax-的支持" class="headerlink" title="#(#pjax-的支持) Pjax 的支持"></a>#(#pjax-的支持) Pjax 的支持</h2><p>如果博客启用了 Pjax，那么 Hexo 引流插件需要使用 <code>pjaxCssClass</code> 参数指定 Pjax 支持重载的 Css 类名（例如 <code>pjax</code>），同时需要使用 <code>pjaxSelector</code> 参数指定获取文章主体内容的 JS 选择器。否则在站点内（如首页、标签页、分类页、归档页等）通过链接访问文章页面时，引流工具不会生效，除非是手动刷新一次页面。值得一提的是，两者都需要根据不同的 Hexo 主题来配置，其中不同主题的配置示例如下：</p><table><thead><tr><th>主题</th><th>pjaxCssClass 配置</th><th>pjaxSelector 配置</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/next-theme/hexo-theme-next">NexT (opens new window)</a></td><td><code>pjaxCssClass: &#39;pjax&#39;</code></td><td><code>pjaxSelector: &#39;div.main-inner&#39;</code></td><td></td></tr><tr><td><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly (opens new window)</a></td><td><code>pjaxCssClass: &#39;js-pjax&#39;</code></td><td><code>pjaxSelector: &#39;main.layout&#39;</code></td><td></td></tr></tbody></table><p>配置提示</p><p>值得一提的是，<code>pjaxCssClass</code> 参数的作用是让 Pjax 重载引流工具的代码段，而 <code>pjaxSelector</code> 参数的作用是通过 JS 选择器获取文章主体内容。当配置了 <code>pjaxSelector</code> 和 <code>pjaxCssClass</code> 参数之后，Hexo 引流插件会往所有渲染后的 HTML 页面自动添加引流代码段，包括 <code>page</code> 和 <code>post</code> 的页面类型。如果两者都不配置，则 Hexo 引流插件默认只会往渲染后的 <code>post</code> 页面添加引流代码段。</p><p>特别注意</p><p>由于 Pjax 非常依赖页面布局的一致性，因此请确保通过 <code>pjaxSelector</code> 参数指定的 JS 选择器在所有页面（包括 <code>page</code> 和 <code>post</code>）都能够获取到唯一的 HTML 标签元素，否则会导致部分页面的 Pjax 或者引流功能不会生效。如果无法满足这一点，则需要手动更改 Hexo 主题的模板代码，使 JS 选择器在所有页面都能够获取到唯一的 HTML 标签元素。Hexo 主题模板代码的修改可以参考 <a href="https://github.com/rqh656418510/hexo-theme-next-8.x/commit/6e259889fdc867ccd8eb1163e9b1f0629493387a">NexT (opens new window)</a>，然后将 <code>pjaxSelector</code> 设置为 <code>div.post-container</code>。</p><h2 id="自定义样式-自定义样式"><a href="#自定义样式-自定义样式" class="headerlink" title="#(#自定义样式) 自定义样式"></a>#(#自定义样式) 自定义样式</h2><p>插件默认使用了定义在 <a href="https://qiniu.techgrow.cn/readmore/dist/hexo.css">hexo.css (opens new window)</a> 的 CSS 样式，你可以使用以下两种方式自定义自己的样式：</p><ul><li>第一种方式：更改博客主题的 CSS 源码文件，将自定义的那部分 CSS 样式添加到里面</li><li>第二种方式：根据 <a href="https://qiniu.techgrow.cn/readmore/dist/hexo.css">hexo.css (opens new window)</a> 创建自己的 CSS 文件（完整的），并将其存放在自己的博客里，同时通过插件的 <code>cssUrl</code> 配置参数来指定其访问的 URL 路径</li></ul><blockquote><p>提示：为了方便日后维护，强烈建议使用第二种方式来添加自定义样式</p></blockquote><h2 id="开放-api-开放-API"><a href="#开放-api-开放-API" class="headerlink" title="#(#开放-api) 开放 API"></a>#(#开放-api) 开放 API</h2><p>若不希望依赖 TechGrow 官方提供的系统服务，可以选择使用开放 API 的方式，让引流插件直接使用私有化部署的后端应用服务，详细介绍请看<a href="https://docs.techgrow.cn/v1/wechat/openapi/api/">这里</a>。</p><h2 id="已兼容的主题-已兼容的主题"><a href="#已兼容的主题-已兼容的主题" class="headerlink" title="#(#已兼容的主题) 已兼容的主题"></a>#(#已兼容的主题) 已兼容的主题</h2><table><thead><tr><th>主题</th><th>GitHub 仓库</th></tr></thead><tbody><tr><td>NexT</td><td><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next (opens new window)</a></td></tr><tr><td>Yilia</td><td><a href="https://github.com/litten/hexo-theme-yilia">https://github.com/litten/hexo-theme-yilia (opens new window)</a></td></tr><tr><td>Icarus</td><td><a href="https://github.com/ppoffice/hexo-theme-icarus">https://github.com/ppoffice/hexo-theme-icarus (opens new window)</a></td></tr><tr><td>Matery</td><td><a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery (opens new window)</a></td></tr><tr><td>Fluid</td><td><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid (opens new window)</a></td></tr><tr><td>Stun</td><td><a href="https://github.com/liuyib/hexo-theme-stun">https://github.com/liuyib/hexo-theme-stun (opens new window)</a></td></tr><tr><td>Butterfly</td><td><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly (opens new window)</a></td></tr></tbody></table><h2 id="常见问题-常见问题"><a href="#常见问题-常见问题" class="headerlink" title="#(#常见问题) 常见问题"></a>#(#常见问题) 常见问题</h2><p>问题一</p><p>Hexo 安装插件后，浏览器的控制台输出警告或者错误信息，且引流工具无法生效</p><p>浏览器访问 Hexo 博客后，按下 <code>F12</code> 快捷键调出调试工具，然后切换到 <code>控制台</code>，最后将警告或者错误信息截图，并发送到 <a href="https://www.techgrow.cn/img/wx-group-qr-techgrow.png">官方微信群 (opens new window)</a> 或者 <code>656418510@qq.com</code> 邮箱，建议留言备注 Hexo 与 Hexo 主题的版本号。</p><p>问题二</p><p>Hexo 安装插件后，移动端的引流工具无法生效，而 PC 端却生效</p><p>考虑到用户体验的问题，在移动端默认是关闭引流功能的。若希望在移动端启用引流功能，可以通过 Hexo 引流插件的 <code>allowMobile: true</code> 配置参数来实现。&#96; 配置参数来实现。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 引流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 2023.2.1 修复版本日志</title>
      <link href="/5bae9190.html"/>
      <url>/5bae9190.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><p><img src="https://secure.gravatar.com/avatar/5deb5fdbb1c42239bffe4344b40a55ce?s=200&r=g"></p><p>我们刚刚发布了 v2023.2 的第一个错误修复更新。</p><p>您可以从 IDE 内部、使用<a href="https://www.jetbrains.com/toolbox-app/">工具箱应用程序</a>或通过快照（如果您使用的是 Ubuntu）更新到此版本。您也可以<a href="https://www.jetbrains.com/idea/download/">直接从我们的网站下载</a>。</p><p>以下是最新版本中包含的最值得注意的改进和修复的列表：</p><ul><li>我们已经解决了主工具栏仅出现在第一个打开的项目上的问题，无论是在 WSL 上还是在 Linux 上使用平铺窗口管理器时，都通过恢复到本机标头。[<a href="https://youtrack.jetbrains.com/issue/IDEA-323700">IDEA-323700</a>]</li><li>现在可以在启用_“与操作系统同步_”选项的情况下从 Windows 同步设置后，在 Linux 上选择一个主题。[<a href="https://youtrack.jetbrains.com/issue/IDEA-283945/">IDEA-283945</a>]</li><li>“_服务”_工具窗口中的控制台不再意外地从其他工具窗口拉取焦点。[<a href="https://youtrack.jetbrains.com/issue/IDEA-219699/Database-console-takes-focus-in-Services-panel">IDEA-219699</a>]</li><li>当 Linux 本机标头关闭时，IDE 不再意外地在辅助监视器上进入全屏模式。 [<a href="https://youtrack.jetbrains.com/issue/IDEA-326021">IDEA-326021</a>]</li><li>现在，将所选文本拖放到装订线将文本按预期移动到所选行，而不是复制它。[<a href="https://youtrack.jetbrains.com/issue/IDEA-324204">IDEA-324204</a>]</li><li>当本机 Linux 标头关闭时，可以再次在辅助显示器上退出全屏模式。 [<a href="https://youtrack.jetbrains.com/issue/IDEA-323706">IDEA-323706</a>]</li><li>修复了在关闭本机标头的 Linux 上使用辅助显示器时导致窗口大小调整和拖放功能出现故障的问题。[IDEA-327169， <a href="https://youtrack.jetbrains.com/issue/IDEA-327169/">IDEA-327723</a><a href="https://youtrack.jetbrains.com/issue/IDEA-327723"></a>]</li><li>_“项目_”工具窗口中的目录列表将再次正确加载。[<a href="https://youtrack.jetbrains.com/issue/IDEA-326394">想法-326394</a>]</li><li>在 Groovy 中指定泛型类型参数时，IDE 不再冻结。[<a href="https://youtrack.jetbrains.com/issue/IDEA-316712">IDEA-316712</a>]</li><li>编辑 XHTML 文件时，IDE 不再冻结。[<a href="https://youtrack.jetbrains.com/issue/IDEA-238917">IDEA-238917</a>]</li><li>打印再次按预期工作。[<a href="https://youtrack.jetbrains.com/issue/IDEA-323747">IDEA-323747</a>]</li><li>更新捆绑的插件不再从 IDE 的安装文件夹中删除插件文件。[<a href="https://youtrack.jetbrains.com/issue/IDEA-326800">IDEA-326800</a>]</li><li>OpenAPI 规范插件在使用 OpenAPI 3.1.0 时不再错误地要求模式类型字段为数组。[<a href="https://youtrack.jetbrains.com/issue/IDEA-317690">IDEA-317690</a>]</li><li>IDE 现在支持 OpenAPI 3.1。[<a href="https://youtrack.jetbrains.com/issue/IDEA-322411">IDEA-322411</a>]</li><li>容器重新启动后，IDE 将再次正确显示所有 Docker 容器日志。[<a href="https://youtrack.jetbrains.com/issue/IDEA-318041">IDEA-318041</a>]</li><li>我们修复了在通过_“新建目录_”对话框创建源文件夹时导致源条目重复的问题。[<a href="https://youtrack.jetbrains.com/issue/IDEA-310739">想法-310739</a>]</li><li>修复了导致 IDE 在编辑批注类型方法名称后错误忽略或错误地报告代码错误的问题。[<a href="https://youtrack.jetbrains.com/issue/IDEA-323331">IDEA-323331</a>]</li><li>再次可以在“_搜索所有位置”_对话框的“文件”选项卡中同时选择和打开多个_文件_。[<a href="https://youtrack.jetbrains.com/issue/IDEA-326262">IDEA-326262</a>]</li><li>在关闭本机标头的 Linux 上使用_高对比度_主题时导致窗口控件被遮挡的问题已得到修复。[<a href="https://youtrack.jetbrains.com/issue/IDEA-326930">IDEA-326930</a>]</li><li>每次打开 JetBrains 客户端时，IDE 将不再显示许可证对话框。[<a href="https://youtrack.jetbrains.com/issue/GTW-5838">GTW-5838</a>]</li></ul><p>从 v2023.2.1 开始，IntelliJ IDEA 捆绑的 Android 插件提供了 Android Studio Giraffe Stable 的功能和错误修复，包括对 Android Gradle 插件 （AGP） 版本 8.0.0 的支持。请注意，该支持不包括需要登录 Firebase 帐户的功能。</p><p>有关此错误修复更新中解决的问题的完整列表，请查看<a href="https://youtrack.jetbrains.com/articles/IDEA-A-2100661651/IntelliJ-IDEA-2023.2.1-232.9559.62-build-Release-Notes">发行说明</a>。请随时与我们分享您的反馈，或使用我们的<a href="https://youtrack.jetbrains.com/issues/IDEA">问题跟踪器</a>报告您遇到的任何错误。</p><p>祝您发展愉快！��</p><p>祝您发展愉快！</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 更新日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试题系列】（一）</title>
      <link href="/ca67f3be.html"/>
      <url>/ca67f3be.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="Redis有哪些数据结构？其底层是怎么实现的？"><a href="#Redis有哪些数据结构？其底层是怎么实现的？" class="headerlink" title="Redis有哪些数据结构？其底层是怎么实现的？"></a>Redis有哪些数据结构？其底层是怎么实现的？</h1><p><a href="https://blog.zysicyj.top/84392d3f">Redis 系列（一）：深入了解 Redis 数据类型和底层数据结构</a></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/image.png"></p><ol><li><p><strong>字符串（String）：</strong> 用于存储文本或二进制数据。可以执行字符串的基本操作，如设置、获取、增加、减少等。</p></li><li><p><strong>哈希表（Hash）：</strong> 存储键值对集合，类似于关联数组。适用于存储对象属性或配置信息。</p></li><li><p><strong>列表（List）：</strong> 使用双向链表实现的有序集合，允许插入和删除元素。可以用于实现队列、栈等数据结构。</p></li><li><p><strong>集合（Set）：</strong> 存储不重复的无序元素集合。支持求交集、并集、差集等操作，适用于数据去重和关联性操作。</p></li><li><p><strong>有序集合（Sorted Set）：</strong> 类似于集合，但每个元素都有一个分数（score），并根据分数进行排序。适用于排行榜、优先级队列等场景。</p></li><li><p><strong>位图（Bitmap）：</strong> 使用字符串来表示位的数据结构，支持位操作。适用于标记、计数等场景。</p></li><li><p><strong>HyperLogLog：</strong> 用于估计集合中唯一元素的个数，占用固定的内存空间，适用于基数统计场景。</p></li><li><p><strong>地理空间（GeoSpatial）：</strong> 存储地理位置信息，支持距离计算和位置查询。</p></li></ol><h1 id="什么是缓存击穿？什么原因？如何解决？"><a href="#什么是缓存击穿？什么原因？如何解决？" class="headerlink" title="什么是缓存击穿？什么原因？如何解决？"></a>什么是缓存击穿？什么原因？如何解决？</h1><p>缓存击穿是指在高并发情况下，一个缓存中不存在但是频繁被请求的数据，导致请求直接打到数据库，增加数据库的负载和延迟。这通常发生在以下情况下：</p><ol><li><p><strong>热点数据失效：</strong> 当某个热点数据过期或被移除时，大量的并发请求同时访问该数据，导致请求绕过缓存直接访问数据库。</p></li><li><p><strong>分布式系统中的节点失效：</strong> 在分布式缓存环境下，如果一个或多个缓存节点失效，会导致请求无法命中缓存，从而打到后端数据库。</p></li></ol><p>解决缓存击穿的方法有多种，其中常见的包括：</p><ol><li><p><strong>设置热点数据永不过期：</strong> 对于热点数据，可以设置永不过期，确保数据始终可用。但要注意，这会占用缓存空间，可能导致其他数据的驱逐。</p></li><li><p><strong>使用互斥锁（Mutex Lock）：</strong> 在缓存失效时，使用互斥锁来控制只有一个请求能够从数据库加载数据，其他请求在等待中，避免并发访问数据库。</p></li><li><p><strong>提前异步加载：</strong> 在数据即将过期时，启动一个异步任务去加载数据到缓存，避免过期时直接请求数据库。</p></li><li><p><strong>使用分布式锁：</strong> 在分布式环境下，可以使用分布式锁来保护缓存数据的加载过程，确保只有一个节点进行加载。</p></li><li><p><strong>使用布隆过滤器：</strong> 布隆过滤器是一种用于判断元素是否存在于集合中的数据结构，可以用来判断某个数据是否需要去数据库加载，减少无效的请求。</p></li><li><p><strong>热点数据预加载：</strong> 提前在系统启动时加载热点数据到缓存，避免在运行时因为缓存失效而引起的问题。</p></li></ol><p>选择哪种方法取决于具体的业务场景和需求，通常需要根据系统的特点和访问模式来综合考虑。</p><h1 id="什么是缓存雪崩？什么原因？如何解决？"><a href="#什么是缓存雪崩？什么原因？如何解决？" class="headerlink" title="什么是缓存雪崩？什么原因？如何解决？"></a>什么是缓存雪崩？什么原因？如何解决？</h1><p>缓存雪崩是指缓存在某个时间段内大面积失效，导致大量请求直接访问后端数据库，造成数据库压力激增和系统性能下降的情况。通常发生在以下情况下：</p><ol><li><p><strong>大量缓存同时失效：</strong> 当多个缓存数据在同一个时间段内同时失效，导致大量请求直接打到后端数据库。</p></li><li><p><strong>缓存服务器宕机：</strong> 如果缓存服务器宕机，缓存数据不可用，请求会直接访问后端数据库。</p></li><li><p><strong>业务高峰期：</strong> 在业务高峰期，访问量剧增，缓存失效导致数据库请求激增。</p></li></ol><p>解决缓存雪崩的方法包括：</p><ol><li><p><strong>使用多级缓存：</strong> 引入多级缓存，将数据同时存储在多个缓存层，降低某个缓存层失效的风险。</p></li><li><p><strong>设置随机过期时间：</strong> 对于相同类型的数据，设置随机的过期时间，避免大量数据同时失效。</p></li><li><p><strong>缓存数据永不过期：</strong> 对于热点数据，可以设置永不过期，确保数据始终可用。</p></li><li><p><strong>异步加载缓存：</strong> 在缓存失效时，启动异步任务去加载数据，避免在缓存失效时直接访问数据库。</p></li><li><p><strong>限流降级：</strong> 在高峰期限制请求的并发数，将部分请求降级处理，避免对后端服务造成过大压力。</p></li><li><p><strong>熔断策略：</strong> 根据系统负载情况，实施熔断策略，避免系统崩溃。</p></li><li><p><strong>缓存预热：</strong> 在系统启动时，预先加载热点数据到缓存，避免系统启动时的大量请求。</p></li><li><p><strong>分布式部署：</strong> 将缓存服务器分布在不同的节点上，降低单点故障的风险。</p></li></ol><p>综合考虑业务需求和系统特点，可以采用上述方法来解决缓存雪崩问题，保障系统的稳定性和性能。</p><h1 id="Redis持久化机制了解吗？"><a href="#Redis持久化机制了解吗？" class="headerlink" title="Redis持久化机制了解吗？"></a>Redis持久化机制了解吗？</h1><p><a href="https://blog.zysicyj.top/52275545">Redis 系列（二）：深入解读 Redis 的两种持久化方式</a></p><p>是的，Redis具有两种主要的持久化机制：RDB（Redis Database）快照和AOF（Append-Only File）日志。这些机制用于将内存中的数据持久化到硬盘上，以防止数据丢失。</p><ol><li><p><strong>RDB快照：</strong></p><ul><li>RDB持久化通过将内存中的数据快照保存到一个二进制文件（例如<code>dump.rdb</code>）中来实现。</li><li>可以手动执行RDB快照，也可以通过配置项定期自动执行。</li><li>优点是文件小，适合备份和恢复，对性能影响较小。</li><li>缺点是数据可能在两次快照之间发生丢失，不适合数据实时性要求较高的场景。</li></ul></li><li><p><strong>AOF日志：</strong></p><ul><li>AOF持久化记录每个写操作（例如SET、DEL）到一个追加的日志文件（例如<code>appendonly.aof</code>）中。</li><li>AOF文件以文本方式记录，可以随时对其进行追加、更新和重写。</li><li>可以通过配置项设置不同的AOF策略：<code>always</code>（每次写操作都记录）、<code>everysec</code>（每秒记录一次）、<code>no</code>（不记录）。</li><li>优点是可以实现更高的数据实时性，适合对数据安全性要求较高的场景。</li><li>缺点是AOF文件相对较大，恢复速度可能较慢。</li></ul></li></ol><p>在实际应用中，可以根据业务需求选择合适的持久化机制，甚至可以同时使用RDB和AOF，以提高数据的安全性和可靠性。另外，Redis还提供了混合持久化的方式（默认使用AOF来恢复数据，而RDB用于备份），以充分发挥两种持久化机制的优势。</p><h1 id="Redis应用场景有哪些？"><a href="#Redis应用场景有哪些？" class="headerlink" title="Redis应用场景有哪些？"></a>Redis应用场景有哪些？</h1><ol><li><p><strong>缓存：</strong> 最常见的用途，将热门数据存储在内存中，以提高访问速度，减轻数据库负担。适用于读取频繁、数据量较大的场景。</p></li><li><p><strong>会话存储：</strong> 将用户会话数据存储在Redis中，实现分布式会话管理，以避免单点故障和状态共享问题。</p></li><li><p><strong>计数器和统计：</strong> Redis的原子操作可以实现计数器功能，用于统计页面访问、点赞、评论等。</p></li><li><p><strong>排行榜&#x2F;热门内容：</strong> 利用有序集合（Sorted Set）数据结构，存储并排名用户、文章、商品等，以实现排行榜或展示热门内容。</p></li><li><p><strong>发布订阅：</strong> Redis的发布订阅机制允许实时地将消息发布给订阅者，用于构建实时通知、聊天室等功能。</p></li><li><p><strong>分布式锁：</strong> 利用Redis的原子操作和过期时间设置，实现分布式环境下的锁机制，保障资源的互斥访问。</p></li><li><p><strong>限流器：</strong> 利用Redis的令牌桶或漏桶算法，实现请求的限流控制，防止突发流量影响系统稳定性。</p></li><li><p><strong>缓存穿透防护：</strong> 将空值或异常数据存储在缓存中，避免缓存穿透引起的数据库查询压力。</p></li><li><p><strong>地理位置服务：</strong> 利用Redis的地理位置数据类型，存储并查询地理位置信息，用于附近的人、地点等功能。</p></li><li><p><strong>任务队列：</strong> 利用列表数据结构，实现异步任务队列，处理后台任务、消息队列等。</p></li><li><p><strong>即时数据分析：</strong> 将实时产生的数据存储在Redis中，供数据分析使用，如实时监控、实时报表等。</p></li></ol><p>这些只是Redis应用场景的一部分，实际上，由于Redis的高性能、低延迟和丰富的数据结构，它在很多领域都有广泛的应用。根据具体的业务需求，可以灵活选择合适的场景来使用Redis。</p><h1 id="Redis为什么这么快？"><a href="#Redis为什么这么快？" class="headerlink" title="Redis为什么这么快？"></a>Redis为什么这么快？</h1><p>Redis之所以具有如此高的性能，主要是由于以下几个方面的设计和优化：</p><ol><li><p><strong>内存存储：</strong> Redis将数据存储在内存中，内存的读写速度远高于磁盘，因此能够实现极低的读写延迟。</p></li><li><p><strong>单线程模型：</strong> Redis采用单线程模型处理客户端请求，避免了多线程的锁竞争和上下文切换开销，减少了性能损耗。</p></li><li><p><strong>非阻塞IO：</strong> Redis使用非阻塞IO和事件驱动的方式来处理客户端连接和网络通信，有效利用了操作系统提供的异步IO机制，提高了并发能力。</p></li><li><p><strong>数据结构优化：</strong> Redis内置了多种高效的数据结构，如哈希表、有序集合、跳表等，针对不同的应用场景选择最合适的数据结构，提高了数据操作的效率。</p></li><li><p><strong>持久化策略：</strong> Redis支持多种持久化方式，如RDB快照和AOF日志，可以根据需求选择合适的持久化策略，保障数据的可靠性。</p></li><li><p><strong>多种网络协议支持：</strong> Redis支持多种网络协议，如HTTP、RESP（Redis Serialization Protocol）等，方便不同编程语言和应用程序与Redis进行交互。</p></li><li><p><strong>数据压缩：</strong> Redis在存储数据时进行了压缩，减小了内存占用，提高了数据的存储密度。</p></li><li><p><strong>预分配内存：</strong> Redis在启动时预先分配一定数量的内存，减少了内存分配的开销，提高了内存使用效率。</p></li><li><p><strong>管道技术：</strong> Redis的管道（Pipeline）技术允许客户端发送多个命令，在一个连接上连续执行，减少了网络通信的开销。</p></li><li><p><strong>高效的排序算法：</strong> 在有序集合（Sorted Set）中，Redis采用跳表（Skip List）作为底层数据结构，实现了高效的排序和检索。</p></li></ol><h1 id="Redis事务如何实现？"><a href="#Redis事务如何实现？" class="headerlink" title="Redis事务如何实现？"></a>Redis事务如何实现？</h1><p>Redis事务是一组命令的集合，可以在一个原子操作内执行多个命令。Redis的事务通过MULTI、EXEC、WATCH、DISCARD等命令来实现，它提供了类似于传统数据库的事务特性，但与传统数据库的事务有一些不同之处。</p><p>以下是Redis事务的实现流程：</p><ol><li><p><strong>MULTI命令：</strong> 事务开始时，客户端发送MULTI命令，告诉Redis开始记录后续的命令序列。</p></li><li><p><strong>多个命令：</strong> 在MULTI和EXEC之间的命令会被加入到事务队列中，但并不会立即执行。</p></li><li><p><strong>EXEC命令：</strong> 当客户端发送EXEC命令时，Redis会依次执行事务队列中的命令。在执行过程中，Redis会将事务队列中的命令依次执行，如果其中的某个命令执行失败，不会影响其他命令的执行。</p></li><li><p><strong>事务执行结果：</strong> EXEC命令执行完成后，Redis会返回事务中所有命令的执行结果，以数组形式返回。如果事务中的某个命令执行失败，对应的结果将是错误信息。</p></li><li><p><strong>DISCARD命令：</strong> 如果在MULTI和EXEC之间，客户端发送了DISCARD命令，那么事务队列中的所有命令都会被清除，事务被取消。</p></li><li><p><strong>WATCH命令：</strong> 为了实现乐观锁的机制，可以使用WATCH命令监视一个或多个键。如果在事务执行前，有其他客户端修改了被监视的键，整个事务会被取消。</p></li></ol><p>Redis事务的特点：</p><ul><li>Redis事务是原子性的：在EXEC执行期间，事务中的所有命令要么都被执行，要么都不被执行。</li><li>Redis事务是隔离的：事务的执行过程不会受到其他客户端的影响。</li><li>Redis事务是不支持回滚的：即使其中某个命令执行失败，不会回滚前面已经执行的命令。</li></ul><p>需要注意的是，虽然Redis事务提供了一种封装多个命令的方式，但是由于Redis的单线程模型，事务中的某些命令可能会因为特定的情况（如阻塞操作）导致整个事务执行的时间较长。因此，在使用Redis事务时，需要考虑事务执行期间可能的性能影响。</p><h1 id="Redis过期键删除策略？"><a href="#Redis过期键删除策略？" class="headerlink" title="Redis过期键删除策略？"></a>Redis过期键删除策略？</h1><p>在Redis中，有两种主要的过期键删除策略，分别是惰性删除和定期删除，还有一些淘汰策略用于释放内存空间。以下是这些策略的详细说明：</p><ol><li><p><strong>惰性删除（Lazy Expiration）：</strong> 这是Redis默认的过期键删除策略。当访问一个已经过期的键时，Redis会立即删除该键并返回空值。这种策略避免了在访问时才删除键，节省了内存和CPU资源。</p></li><li><p><strong>定期删除（定时任务删除）：</strong> Redis会随机抽取一些过期键，并检查它们是否过期。如果过期，就会删除这些键。这种策略通过定期任务进行删除，以避免删除大量过期键对性能造成影响。</p></li><li><p><strong>内存淘汰策略（Eviction Policies）：</strong> 当内存使用达到一定阈值（由<code>maxmemory</code>参数指定）时，Redis会触发淘汰策略来释放空间。常见的淘汰策略包括：</p><ul><li><code>noeviction</code>：当内存不足以容纳新写入数据时，写入操作会报错。</li><li><code>allkeys-lru</code>：从所有键中选择最近最少使用的键进行删除。</li><li><code>volatile-lru</code>：从设置了过期时间的键中选择最近最少使用的键进行删除。</li><li><code>allkeys-random</code>：随机选择一个键进行删除。</li><li><code>volatile-random</code>：从设置了过期时间的键中随机选择一个键进行删除。</li><li><code>volatile-ttl</code>：从设置了过期时间的键中选择剩余时间最短的键进行删除。</li></ul></li></ol><p>这些策略可以通过Redis的配置参数进行设置，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置过期键删除策略为定期删除</span></span><br><span class="line">config set maxmemory-policy noeviction</span><br></pre></td></tr></table></figure><p>需要根据实际场景和需求来选择适合的策略和参数值，以平衡内存使用和性能。</p><h1 id="Redis怎么实现消息队列？"><a href="#Redis怎么实现消息队列？" class="headerlink" title="Redis怎么实现消息队列？"></a>Redis怎么实现消息队列？</h1><p>Redis可以用作轻量级的消息队列，实现基本的消息发布和订阅功能。以下是在Redis中如何实现消息队列的基本步骤：</p><ol><li><p><strong>发布消息：</strong> 在发布者端，使用<code>PUBLISH</code>命令将消息发布到指定的频道（通道）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH channel_name message_content</span><br></pre></td></tr></table></figure></li><li><p><strong>订阅消息：</strong> 在订阅者端，使用<code>SUBSCRIBE</code>命令订阅一个或多个频道，从中接收发布者发布的消息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE channel_name</span><br></pre></td></tr></table></figure></li><li><p><strong>接收消息：</strong> 订阅者在订阅了频道后，会实时接收到发布者发布的消息。</p></li></ol><p>通过上述步骤，你可以实现基本的发布-订阅模式的消息队列。然而，需要注意以下几点：</p><ul><li>Redis的消息队列不支持消息持久化，即如果没有订阅者在线时，消息会丢失。</li><li>如果需要支持持久化、多个消费者、消息确认等高级特性，可能需要考虑使用专门的消息队列中间件，如RabbitMQ、Apache Kafka等。</li></ul><p>在实际应用中，如果需要更多的消息队列特性，可以使用Redis的LIST数据结构来实现简单的队列。将发布者发布的消息插入到LIST中，然后消费者从LIST中弹出消息进行处理。但需要注意的是，Redis并不是专门为消息队列设计的，更适合用于一些简单的消息发布-订阅场景。对于高性能、大规模的消息队列需求，建议使用专门的消息队列中间件。��息队列中间件。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> 面试题精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> redis </tag>
            
            <tag> 缓存击穿 </tag>
            
            <tag> 缓存雪崩 </tag>
            
            <tag> redis持久化 </tag>
            
            <tag> redis应用场景 </tag>
            
            <tag> redis性能优化 </tag>
            
            <tag> redis事务 </tag>
            
            <tag> redis过期键删除策略 </tag>
            
            <tag> redis消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加相册</title>
      <link href="/318af14d.html"/>
      <url>/318af14d.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="视频教学地址"><a href="#视频教学地址" class="headerlink" title="视频教学地址"></a>视频教学地址</h1><p><a href="https://www.bilibili.com/video/BV1Fw411Q7pS/">https://www.bilibili.com/video/BV1Fw411Q7pS/</a></p><h1 id="打开butterfly配置文件，在menu处新增一行"><a href="#打开butterfly配置文件，在menu处新增一行" class="headerlink" title="打开butterfly配置文件，在menu处新增一行"></a>打开butterfly配置文件，在menu处新增一行</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="comment">#   清单||fas fa-list:</span></span><br><span class="line"><span class="comment">#     音乐: /music/ || fas fa-music</span></span><br><span class="line"><span class="comment">#     电影: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="string">相册:</span> <span class="string">/gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-solid</span> <span class="string">fa-image</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">活动日历:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-calendar</span></span><br><span class="line">  <span class="attr">Love:</span> <span class="string">/love/static/index.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h1 id="在source目录下新建gallery目录，并新建index"><a href="#在source目录下新建gallery目录，并新建index" class="headerlink" title="在source目录下新建gallery目录，并新建index"></a>在source目录下新建gallery目录，并新建index</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-24/47660906878700.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br><span class="line">    &#123;% galleryGroup &#x27;宝宝相册&#x27; &#x27;记录宝宝成长！&#x27; &#x27;/gallery/baby&#x27; http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/46201997695900.jpeg %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-24/47801912918300.png"></p><h1 id="在gallery下新建baby-md文件"><a href="#在gallery下新建baby-md文件" class="headerlink" title="在gallery下新建baby.md文件"></a>在gallery下新建baby.md文件</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery true,220,5 %&#125;</span><br><span class="line">![](<span class="link">http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/46201997695900.jpeg</span>)</span><br><span class="line">![](<span class="link">http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/46974523049100.jpeg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h1 id="生成并启动"><a href="#生成并启动" class="headerlink" title="生成并启动"></a>生成并启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>ell<br>hexo g</p><p>hexo s</p><pre><code></code></pre></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 首发博客地址 </tag>
            
            <tag> 相册 </tag>
            
            <tag> 视频教学地址 </tag>
            
            <tag> butterfly配置文件 </tag>
            
            <tag> menu </tag>
            
            <tag> source目录 </tag>
            
            <tag> gallery目录 </tag>
            
            <tag> index </tag>
            
            <tag> gallery-group-main </tag>
            
            <tag> gallerygroup </tag>
            
            <tag> 宝宝相册 </tag>
            
            <tag> 记录宝宝成长 </tag>
            
            <tag> baby.md文件 </tag>
            
            <tag> gallery true </tag>
            
            <tag> 生成并启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错sql_mode=only_full_group_by</title>
      <link href="/42248197.html"/>
      <url>/42248197.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### The error may exist in file[D:\code\cppCode20221025\leader-system\target\classes\mapper\system\TJsonDataMapper.xml]</span><br><span class="line">        ### The error may involve defaultParameterMap</span><br><span class="line">        ### The error occurred <span class="keyword">while</span> setting parameters</span><br><span class="line">        ### SQL:select <span class="title function_">ifnull</span><span class="params">(s.type,<span class="string">&#x27;&#x27;</span>)</span>type,ifnull(GROUP_CONCAT(s.yjzbname,<span class="string">&#x27;:&#x27;</span>,s.num),<span class="string">&#x27;0&#x27;</span>)nums <span class="title function_">from</span><span class="params">(select t.type,(select name from t_norm s where s.id=n.parentId)</span>yjzbname,count(*)num from t_org_ticket o left join t_ticket t on t.id=o.ticket_id and t.project_id=?left join t_norm n on n.model=t.modelid and n.project_id=?where o.org_id=?and t.type=?and n.type=<span class="string">&#x27;02&#x27;</span>GROUP BY parentId)s</span><br><span class="line">        ### Cause:java.sql.SQLSyntaxErrorException:In aggregated query without GROUP BY,expression #1of SELECT list contains nonaggregated column<span class="string">&#x27;s.type&#x27;</span>;<span class="built_in">this</span> is incompatible with sql_mode=only_full_group_by</span><br><span class="line">        ;bad SQL grammar[];nested exception is java.sql.SQLSyntaxErrorException:In aggregated query without GROUP BY,expression #1of SELECT list contains nonaggregated column<span class="string">&#x27;s.type&#x27;</span>;<span class="built_in">this</span> is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/4605477245600.png"></p><h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><ol><li><p><strong>调整GROUP BY子句和SELECT列表：</strong></p><p>保证查询的字段在group by中即可</p></li><li><p><strong>禁用only_full_group_by模式：</strong></p><p>如果你确定查询的逻辑和数据不会引起问题，可以在查询之前执行以下命令来临时禁用only_full_group_by模式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION sql_mode<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这可能会导致一些数据不一致性问题，只有在你非常确定情况下才应该使用。</p><p>如果是需要永久写入，那就需要写到cnf或ini配置中</p><p>mysql中配置文件地址一般是<code>C:\Program Files\MySQL\MySQL Server 5.7\bin\my.ini </code><br>我的在这里额</p></li></ol><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/5485190051400.png"></p><p>查询已经有的sql_mode</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@sql_mode</span></span><br></pre></td></tr></table></figure><p>在ini中添加查询出来的模式配置，然后去掉<code>only_full_group_by</code>模式即可</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>重新设计查询：</strong></p><p>如果无法简单地调整GROUP<br>BY子句和SELECT列表，你可能需要重新设计查询逻辑。这可能涉及到使用子查询、临时表或其他方式来满足only_full_group_by模式的要求。 。p_by模式的要求。 。</p></li></ol></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> mysql </tag>
            
            <tag> 报错 </tag>
            
            <tag> sql_mode=only_full_group_by </tag>
            
            <tag> 解决 </tag>
            
            <tag> 调整group by子句和select列表 </tag>
            
            <tag> 禁用only_full_group_by模式 </tag>
            
            <tag> 重新设计查询 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年8月23日博客更新</title>
      <link href="/119629d3.html"/>
      <url>/119629d3.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="新增相册集和结婚相册"><a href="#新增相册集和结婚相册" class="headerlink" title="新增相册集和结婚相册"></a>新增相册集和结婚相册</h1><p><a href="https://blog.zysicyj.top/gallery/">https://blog.zysicyj.top/gallery/</a></p><p>相册整理不容易呀，后续有机会再慢慢整理吧，相册慢慢加上<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/134768908734000.png"></p><p>我选择了大图展示，这种高清图片，我觉得还是大点的好，默认220有点小了，我设置的1000，然后设置了懒加载，点击一次加载5张，默认是10张。太多了，图片大，就会很慢。。。。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/134824576115100.png"></p><h1 id="新增纪念日页面"><a href="#新增纪念日页面" class="headerlink" title="新增纪念日页面"></a>新增纪念日页面</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/134923622743699.png"></p><p><a href="https://blog.zysicyj.top/love/static/index.html">https://blog.zysicyj.top/love/static/index.html</a></p><p>主要是音乐好听，嘿嘿！</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/135019589258300.png"><br>3-08-23&#x2F;135019589258300.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 更新 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo优化bilibili显示</title>
      <link href="/bb1facb3.html"/>
      <url>/bb1facb3.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p>It has been 1086 days since the last update, the content of the article may be outdated.</p><p>这篇文章属于转载，原地址为<a href="https://hongcyu.cn/posts/hexo-bilibili.html">Hexo博客引用B站视频并自动适配</a></p><p>在进行引用B站用iframe方式引入视频时发现，通过默认的方式导入会使得屏幕很小</p><p><a href="https://cdn.jsdelivr.net/gh/PaddyLin-xum/photo@master/4hgds.jpg"><img src="https://cdn.jsdelivr.net/gh/PaddyLin-xum/photo@master/4hgds.jpg"></a></p><p>一般我们都是自己改width和height来修改大小，但是换成不同的设备就无法正常的显示了。如下</p><p>默认：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=81148317&amp;cid=138878361&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=81148317&amp;cid=138878361&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;720&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即可较好的适配大屏幕，但是到手机上就不太好用了，不能自动适配，怎么办呢，看下面的两种办法：</p><p>外面包裹一个div标签，div标签自适应与屏幕的大小，包裹内iframe以100%顶边撑开。以butterfly主题为例子：在<code>source/css/_ global/function.styl</code><br>下底部添加以下css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.bilibili</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;              </span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">75%</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bilibili</span> <span class="selector-tag">iframe</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入时写成如下形式即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bilibili&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?bvid=BV1hF411C7ks&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p>使用@media属性，对不同屏幕大小的设备，设置宽度和高度。@media可以查询到设备的以下属性</p><ol><li>设备屏幕的高度</li><li>设备的方向（如移动设备横屏）</li><li>可视窗口的宽高</li><li>屏幕解析度</li></ol><p>和上面一样，在指定位置插入css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bilibili</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.bilibili</span> &#123;<span class="attribute">height</span>: <span class="number">15em</span>;<span class="attribute">max-width</span>: <span class="number">25em</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">991px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.bilibili</span> &#123;<span class="attribute">height</span>: <span class="number">20em</span>;<span class="attribute">max-width</span>: <span class="number">30em</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1199px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.bilibili</span> &#123;<span class="attribute">height</span>: <span class="number">30em</span>;<span class="attribute">max-width</span>: <span class="number">40em</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.bilibili</span> &#123;<span class="attribute">height</span>: <span class="number">40em</span>;<span class="attribute">max-width</span>: <span class="number">50em</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接引用B站的iframe代码加上<code>class=&quot;bilibili&quot;</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">&quot;bilibili&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=81148317&amp;cid=138878361&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="B站链接的参数"><a href="#B站链接的参数" class="headerlink" title="B站链接的参数"></a><a href="#B%E7%AB%99%E9%93%BE%E6%8E%A5%E7%9A%84%E5%8F%82%E6%95%B0" title="B站链接的参数"></a>B站链接的参数</h2><p>例如：<code>player.bilibili.com/player.html?aid=81148317&amp;cid=138878361&amp;page=1</code></p><table><thead><tr><th>key</th><th>说明</th></tr></thead><tbody><tr><td>aid</td><td>视频ID 就是B站的av号</td></tr><tr><td>cid</td><td>应该是客户端的id,clientid的缩写（推测） 测试表示不填也不会有什么问题</td></tr><tr><td>page</td><td>第几个视频 也就是分P的 默认是1</td></tr><tr><td>as_wide</td><td>是否宽屏 1：宽屏 0：小屏</td></tr><tr><td>high_quality</td><td>视频质量 1：最高视频质量 0：最低视频质量</td></tr><tr><td>danmaku</td><td>是否开启弹幕 1：开启（默认） 0：关闭</td></tr></tbody></table><h2 id="阻止跳转B站"><a href="#阻止跳转B站" class="headerlink" title="阻止跳转B站"></a><a href="#%E9%98%BB%E6%AD%A2%E8%B7%B3%E8%BD%ACB%E7%AB%99" title="阻止跳转B站"></a>阻止跳转B站</h2><p>在网页上, 用户选择清晰度, 或者点击视频上面的一些图标, 会跳转到B站. 这个可通过设置 iframe 的 sandbox 属性去禁止</p><p><code>sandbox=&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=81148317&amp;cid=138878361&amp;page=1&amp;high_quality=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sandbox</span>=<span class="string">“allow-top-navigation</span> <span class="attr">allow-same-origin</span> <span class="attr">allow-forms</span> <span class="attr">allow-scripts</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改默认视频质量"><a href="#修改默认视频质量" class="headerlink" title="修改默认视频质量"></a><a href="#%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%A7%86%E9%A2%91%E8%B4%A8%E9%87%8F" title="修改默认视频质量"></a>修改默认视频质量</h2><p>B站默认视频质量是最低的，可以通过在src链接后面添加&amp;high_quality&#x3D;1来设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=81148317&amp;cid=138878361&amp;page=1&amp;high_quality=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sandbox</span>=<span class="string">“allow-top-navigation</span> <span class="attr">allow-same-origin</span> <span class="attr">allow-forms</span> <span class="attr">allow-scripts</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">```low-scripts&gt; <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> bilibili </tag>
            
            <tag> 验证器 </tag>
            
            <tag> 字段级别约束 </tag>
            
            <tag> 属性级别约束 </tag>
            
            <tag> 默认消息插值 </tag>
            
            <tag> 转义字符 </tag>
            
            <tag> 统一规约 </tag>
            
            <tag> 工具类 </tag>
            
            <tag> leaf雪花算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老婆七夕快乐</title>
      <link href="/cb2b755d.html"/>
      <url>/cb2b755d.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><div class="bilibili">    <iframe src="//player.bilibili.com/player.html?bvid=BV1hF411C7ks&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>llscreen="true"> </iframe></div></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
            <tag> 七夕 </tag>
            
            <tag> 家人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea插件grep_console最佳实践</title>
      <link href="/3ff56bc4.html"/>
      <url>/3ff56bc4.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p>参考博客：<a href="https://blog.csdn.net/ayunnuo/article/details/123997304">https://blog.csdn.net/ayunnuo/article/details/123997304</a></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-22/79516097317200.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-22/79425341807600.png"></p><h1 id="具体颜色"><a href="#具体颜色" class="headerlink" title="具体颜色"></a>具体颜色</h1><table><thead><tr><th>日志级别</th><th>前景色</th><th>背景色</th></tr></thead><tbody><tr><td>Error</td><td>#FF0000</td><td>#370000</td></tr><tr><td>Warn</td><td>#FFC033</td><td>#1A0037</td></tr><tr><td>Info</td><td>#00FFF3</td><td>无</td></tr><tr><td>Debug</td><td>#808080</td><td>无</td></tr><tr><td>Debug</td><td>#808080</td><td>无</td></tr></tbody></table></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> idea </tag>
            
            <tag> 配置 </tag>
            
            <tag> grep_console </tag>
            
            <tag> 最佳实践 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 日志级别 </tag>
            
            <tag> 前景色 </tag>
            
            <tag> 背景色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win11fn上锁/关锁</title>
      <link href="/c6532956.html"/>
      <url>/c6532956.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn + esc 即可切换</span><br><span class="line">```fn + esc 即可切换</span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列（四）：哨兵机制详解</title>
      <link href="/de091d57.html"/>
      <url>/de091d57.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p>前面我们说过，redis采用了读写分离的方式实现高可靠。后面我们说了，为了防止主节点压力过大，优化成了主-从-从模式</p><h1 id="思考一个问题，主节点此时挂了怎么办"><a href="#思考一个问题，主节点此时挂了怎么办" class="headerlink" title="思考一个问题，主节点此时挂了怎么办"></a>思考一个问题，主节点此时挂了怎么办</h1><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/32212058065400.png"></p><p>这里主从模式下涉及到的几个问题：</p><ol><li>主库真的挂了吗？</li><li>我们应当选择哪个从库作为主库？</li><li>怎样让其他从库知道新的主库信息呢？</li><li>中断的数据如何恢复？</li></ol><p>哨兵机制就完美的解决了以上问题。</p><h1 id="什么是哨兵机制？"><a href="#什么是哨兵机制？" class="headerlink" title="什么是哨兵机制？"></a>什么是哨兵机制？</h1><p>Redis引入哨兵（Sentinel）机制的主要目的是为了增强其高可用性和自动故障恢复能力。在分布式系统中，特别是用作数据存储的数据库系统中，保障高可用性是至关重要的，以确保系统在面对节点故障等情况时能够继续提供服务。</p><p>以下是引入Redis哨兵机制的原因：</p><ol><li><p><strong>故障检测和自动故障切换：</strong> 哨兵允许您配置多个Redis节点，并监视它们的运行状况。如果主节点（Master）出现故障，哨兵可以自动检测到并执行故障切换，将一个可用的从节点（Slave）晋升为新的主节点，从而保证服务的可用性。</p></li><li><p><strong>自动配置更新：</strong> 当Redis节点的拓扑结构发生变化（比如添加或移除节点）时，哨兵能够自动地通知客户端和其他Redis节点进行配置更新，从而确保整个集群的正确配置。</p></li><li><p><strong>监控和报警：</strong> 哨兵不仅监视节点的健康状态，还可以提供有关节点运行状况的信息，例如主从复制是否正常、延迟情况等。这可以帮助管理员及时发现问题并采取措施。</p></li><li><p><strong>无需人工干预的恢复：</strong> 哨兵允许自动故障切换，这意味着当主节点出现问题时，系统可以自动将一个从节点提升为新的主节点，而无需管理员手动介入，从而缩短恢复时间。</p></li></ol><p>Redis引入哨兵机制使得在分布式环境中更容易实现高可用性和故障恢复，而无需太多手动操作。哨兵机制可以确保Redis集群在节点故障时继续提供稳定的服务，对于那些对于高可用性要求较高的应用场景非常有用。</p><h1 id="哨兵机制的基本流程"><a href="#哨兵机制的基本流程" class="headerlink" title="哨兵机制的基本流程"></a>哨兵机制的基本流程</h1><p>哨兵其实就是一个运行在特殊模式下的Redis进程，其随着主从实例同时运行。</p><p>那么哨兵负责哪些活呢？主要是以下三点：</p><ol><li>监控</li><li>选主（选择主库）</li><li>通知</li></ol><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/32978330338599.png" alt="哨兵机制的三项任务与目标"></p><h1 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h1><p>Redis哨兵的监控流程涉及多个步骤，用于实时监控Redis集群中各个节点的状态并采取必要的措施来确保集群的可用性和稳定性。</p><ol><li><p><strong>节点发现和配置：</strong> 哨兵通过配置文件指定要监控的主节点和从节点。启动哨兵后，它会连接到指定的节点，并获取有关其他节点的信息，形成一个初始的监控拓扑。</p></li><li><p><strong>心跳检测：</strong> 哨兵会定期向监控的节点发送PING命令来检测节点是否存活。这些节点可以是主节点、从节点或其他哨兵节点。如果哨兵在一定时间内没有收到响应，它会认为节点不可用。</p></li><li><p><strong>节点状态变更：</strong> 当哨兵连续多次无法连接到一个节点时，它会将该节点标记为主观下线。当多个哨兵都将节点标记为主观下线时，这个节点会被认为是客观下线。</p></li><li><p><strong>故障判断和选举：</strong> 当主节点被标记为客观下线时，哨兵会执行故障判断。它会从剩余的健康主节点中选举一个作为新的主节点，并将该信息广播给其他哨兵和客户端。故障判断的逻辑考虑了多个因素，包括优先级、最近一次复制偏移量等。</p></li><li><p><strong>自动故障切换：</strong> 如果主节点被标记为客观下线，哨兵会通知从节点晋升为新的主节点。同时，哨兵会更新其他从节点的配置，使其复制新的主节点。这确保了即使主节点发生故障，集群仍然可以继续提供服务。</p></li><li><p><strong>监控从节点：</strong> 哨兵还会监控从节点的状态，包括从节点是否与主节点保持同步，以及从节点的复制延迟情况。如果从节点无法同步或者复制延迟过高，哨兵会将其标记为不健康。</p></li><li><p><strong>节点恢复：</strong> 如果一个节点从客观下线状态恢复，哨兵会将其标记为健康，并将其重新纳入集群中。从节点恢复后，它会重新同步主节点的数据。</p></li><li><p><strong>配置更新：</strong> 如果集群的拓扑发生变化，例如添加或移除节点，哨兵会自动更新配置，以便客户端能够正确连接到集群。</p></li><li><p><strong>事件通知：</strong> 哨兵通过发布订阅机制向订阅者（通常是客户端）发送有关集群状态变化的消息。这使得应用程序能够根据实时的集群状态做出相应的决策。</p></li><li><p><strong>持续监控：</strong> 哨兵会持续地监控集群中的节点，定期执行心跳检测、状态更新和故障判断，以确保集群的稳定运行。</p></li></ol><h1 id="主观下线与客观下线"><a href="#主观下线与客观下线" class="headerlink" title="主观下线与客观下线"></a>主观下线与客观下线</h1><p>在Redis的哨兵监控机制中，有两个关键概念：主观下线（Subjective Down）和客观下线（Objective Down）。这些概念帮助哨兵判断节点的可用性和故障状态。</p><ol><li><p><strong>主观下线（Subjective Down）：</strong> 主观下线是指单个哨兵节点认为一个特定的Redis节点（主节点、从节点或其他哨兵）不可用。主观下线是一种主观的判断，是基于单个哨兵节点的观察结果得出的。当一个哨兵无法连接到某个Redis节点，它会将该节点标记为主观下线。多个哨兵节点可能会对同一个节点发出主观下线标记。</p></li><li><p><strong>客观下线（Objective Down）：</strong> 客观下线是指在整个哨兵集合中达成一致，认为某个特定的Redis节点不可用。客观下线是一种更客观的判断，需要多个哨兵节点共同达成一致。当多个哨兵节点都主观下线同一个Redis节点时，这个节点会被认为是客观下线。</p></li></ol><p>举例说明：</p><ul><li><p>假设有三个哨兵节点：Sentinel A、Sentinel B 和 Sentinel C，以及一个主节点 Master 和一个从节点 Slave。如果 Sentinel A 无法连接到 Master 节点，它会将 Master 标记为主观下线。同样地，如果 Sentinel B 也无法连接到 Master 节点，它也会将 Master 标记为主观下线。但这还不足以让 Master 被认为是客观下线。</p></li><li><p>当 Sentinel A 和 Sentinel B 都主观下线了 Master 节点，并且他们相互通信时发现了这个情况，他们就会在达成一致意见后将 Master 节点标记为客观下线。这时，整个哨兵集合达成一致，认为 Master 节点已下线。</p></li></ul><p>客观下线是一个更严格的判断，需要多个哨兵节点一致认为某个节点不可用，才会触发后续的故障判断和自动故障切换等动作。这种机制确保了在一个哨兵节点认为某节点下线时，不会立即触发故障切换，以避免误判造成不必要的切换。只有多个哨兵节点一致认为节点下线，才会触发后续的故障处理流程。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/33314544699200.png" alt="客观下线的判断"></p><h1 id="如何选定新主库"><a href="#如何选定新主库" class="headerlink" title="如何选定新主库"></a>如何选定新主库</h1><p>在Redis Sentinel模式中，当主节点（Master）发生故障导致下线后，哨兵会通过选举过程选择一个新的主节点（Master）来取代原来的主节点。选定新主库的过程如下：</p><ol><li><p><strong>主观下线和客观下线判断：</strong> 当哨兵节点主观下线（单个哨兵认为不可用）一个主节点时，如果多数哨兵都主观下线了同一个主节点，那么这个主节点会被标记为客观下线（多数派共识）。</p></li><li><p><strong>选举新主节点：</strong> 当一个主节点被标记为客观下线后，哨兵节点会开始选举一个新的主节点。选举过程如下：</p><ul><li>哨兵会在所有没有下线的从节点（Slaves）中选择一个作为新主节点。<strong>哨兵会选择一个延迟最小、复制偏移量最大的从节点作为新主节点</strong>。这确保了新主节点是最接近原主节点的从节点。</li><li>如果没有合适的从节点，哨兵会选择一个具备最高优先级的从节点，将其升级为主节点。如果优先级相同，那么哨兵会选择一个复制偏移量最大的从节点。</li></ul></li><li><p><strong>故障转移和切换：</strong> 一旦新主节点被选定，哨兵会发起故障转移操作。旧主节点会变成新主节点的一个从节点。其他从节点会重新配置，指向新的主节点。这个过程会保证尽量不丢失数据，并且保证整个集群的高可用性。</p></li></ol><p>选定新主库的过程是一个由哨兵节点协同工作的流程，确保了在主节点故障的情况下，尽可能地选择一个合适的从节点作为新的主节点，实现集群的高可用性和数据完整性。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/33452451605700.png" alt="新主库的选择"></p><h1 id="如何配置哨兵"><a href="#如何配置哨兵" class="headerlink" title="如何配置哨兵"></a>如何配置哨兵</h1><ol><li><p><strong>哨兵配置文件：</strong> 在Redis 6.x版本中，哨兵的配置文件名称默认为<code>redis-sentinel.conf</code>。</p></li><li><p><strong>配置变化：</strong> Redis 6.x版本引入了一些新的哨兵配置选项，以适应新的功能和改进。以下是一些常见的配置选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2   # 监控名为 &quot;mymaster&quot; 的主节点，2表示至少需要2个哨兵同意主观下线才会执行故障转移</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000   # 主观下线判定为5秒无响应</span><br><span class="line">sentinel parallel-syncs mymaster 1   # 执行故障转移时同时同步的从节点数量</span><br><span class="line">sentinel failover-timeout mymaster 10000   # 故障转移超时时间为10秒</span><br><span class="line">sentinel auth-pass mymaster mypassword   # 主节点的访问密码</span><br></pre></td></tr></table></figure></li><li><p><strong>启动哨兵节点：</strong> 在Redis 6.x版本中，启动哨兵节点的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /path/to/redis-sentinel.conf --sentinel</span><br></pre></td></tr></table></figure></li><li><p><strong>查看哨兵状态：</strong> 使用以下命令查看Redis 6.x版本哨兵节点的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 26379</span><br><span class="line">sentinel master mymaster   <span class="comment"># 查看主节点的信息</span></span><br><span class="line">sentinel slaves mymaster   <span class="comment"># 查看从节点的信息</span></span><br><span class="line">sentinel sentinels mymaster   <span class="comment"># 查看其他哨兵节点的信息</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="哨兵是如何互相发现的？"><a href="#哨兵是如何互相发现的？" class="headerlink" title="哨兵是如何互相发现的？"></a>哨兵是如何互相发现的？</h1><p>我们查看配置可以看到，我们并没有配置从节点的哨兵，我们只配置了主节点地址。</p><p>那么哨兵之间是如何互相发现通信的呢？</p><p>在Redis Sentinel（哨兵）集群中，哨兵节点之间通过发布订阅机制来互相发现和通信。这种方式使得哨兵节点能够监控主节点和从节点的状态，并进行故障检测和故障转移。</p><p>以下是哨兵集群如何通过发布订阅机制互相发现的工作流程：</p><ol><li><p><strong>初始连接：</strong> 在启动时，每个哨兵节点会尝试连接到指定的主节点。这些哨兵节点通过配置文件中的<code>sentinel monitor</code>命令指定要监控的主节点信息。</p></li><li><p><strong>Sentinel命令发布：</strong> 当一个哨兵节点成功连接到主节点后，它会开始定期向主节点发送PING命令，以确保主节点处于活跃状态。如果哨兵节点检测到主节点不可用，它会将一个<code>+switch-master</code>命令发布到频道中，通知其他哨兵节点。</p></li><li><p><strong>发布订阅机制：</strong> Redis的发布订阅机制允许一个节点（发布者）向一个或多个节点（订阅者）广播消息。在哨兵集群中，每个哨兵节点都订阅了一个名为<code>__sentinel__:hello</code>的频道，用于接收其他哨兵节点发送的信息。<img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/34055357267900.png"></p></li><li><p><strong>发现其他哨兵节点：</strong> 当一个哨兵节点成功连接到主节点后，它会向<code>__sentinel__:hello</code>频道发布一个”Hello”消息，其中包含它自己的信息（如IP地址和端口号）。其他哨兵节点通过订阅这个频道，可以获取所有其他哨兵节点的信息。</p></li><li><p><strong>收集哨兵信息：</strong> 每个哨兵节点通过订阅<code>__sentinel__:hello</code>频道，收集到其他哨兵节点的信息。这使得每个哨兵节点都知道了集群中其他哨兵节点的存在。</p></li><li><p><strong>故障检测和转移：</strong> 当一个哨兵节点检测到主节点不可用时，它会通过发布<code>+switch-master</code>命令来通知其他哨兵节点。这个命令包含了新的主节点信息，以及在执行故障转移时需要的其他信息。其他哨兵节点收到这个命令后，会进行判断并可能发起故障转移。</p></li></ol><p>通过以上机制，哨兵节点可以相互发现和通信，共同监控主节点和从节点的状态，并在主节点下线时协同执行故障转移操作。这种发布订阅机制确保了哨兵集群中节点之间的实时信息传递和协作。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/33993466200100.png"></p><h1 id="由哪个哨兵执行主从切换？"><a href="#由哪个哨兵执行主从切换？" class="headerlink" title="由哪个哨兵执行主从切换？"></a>由哪个哨兵执行主从切换？</h1><h2 id="客观下线具体判断流程"><a href="#客观下线具体判断流程" class="headerlink" title="客观下线具体判断流程"></a>客观下线具体判断流程</h2><ol><li><p><strong>故障检测：</strong> 哨兵节点定期向集群中的所有主节点和从节点发送PING命令来检测节点的可用性。如果一个哨兵节点连续一定次数没有收到节点的回复，就会将该节点标记为可能进入客观下线状态。</p></li><li><p><strong>Quorum判断：</strong> 在判断一个节点是否客观下线时，需要考虑Quorum的概念。Quorum是指一个最小的投票数，当达到或超过这个投票数时，哨兵认为节点可能进入客观下线状态。Quorum的值通常设置为哨兵节点数量的一半加一。</p></li><li><p><strong>投票过程：</strong> 当哨兵节点开始怀疑某个节点可能客观下线时，它会向其他哨兵节点发送一个SENTINEL is-master-down-by-addr命令，询问其他哨兵节点是否也认为该节点客观下线。其他哨兵节点会对此做出回应，根据回应的数量来判断是否达到Quorum。</p></li><li><p><strong>达到Quorum：</strong> 如果收到的回应数量达到或超过Quorum，那么哨兵节点就会认为该节点进入客观下线状态。这表示集群中有足够多的哨兵都认为该节点可能下线，进而触发后续的主从切换流程。</p></li><li><p><strong>执行后续操作：</strong> 一旦一个节点被认为客观下线，哨兵节点将开始执行故障转移操作，选择新的主节点并开始同步数据。这将最终导致一个新的主节点被选出，从而实现高可用性。<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/34509565301199.png"></p></li></ol><h2 id="选举Leader流程"><a href="#选举Leader流程" class="headerlink" title="选举Leader流程"></a>选举Leader流程</h2><p>Redis Sentinel（哨兵）是用于监控和管理Redis主从复制以及自动故障切换的工具。当主节点失效时，哨兵会协调选择一个从节点作为新的主节点，这涉及到选举Leader的过程。详细流程如下：</p><ol><li><p><strong>监控主节点：</strong> 哨兵持续监控Redis主节点的状态，包括主节点是否在线，主从复制是否正常，以及哨兵和其他节点的通信情况。</p></li><li><p><strong>检测主节点失效：</strong> 当哨兵检测到主节点失效（例如，无法响应PING命令），它会将主节点标记为“主观下线”。</p></li><li><p><strong>广播主观下线状态：</strong> 一旦主观下线状态被确认，哨兵会广播该信息给其他哨兵和节点，告知主节点已经“主观下线”。</p></li><li><p><strong>投票：</strong> 当其他哨兵收到关于主观下线状态的广播时，它们会进行投票来决定是否需要进行领导者选举。</p></li><li><p><strong>选举Leader：</strong> 如果多个哨兵都认为主节点失效，它们将进入领导者选举过程。选举过程使用了Raft算法的变体。</p></li><li><p><strong>提议投票：</strong> 在选举过程中，哨兵会提议自己作为领导者，然后请求其他哨兵投票支持。</p></li><li><p><strong>投票表决：</strong> 哨兵在收到提议后会表决是否支持该提议。通常，哨兵会投票给具有最高配置版本号的提议者。</p></li><li><p><strong>Quorum判断：</strong> 在选举过程中，哨兵需要收集足够数量的投票，达到Quorum（大多数）的支持才能选举成功。</p></li><li><p><strong>选出新领导者：</strong> 如果某个哨兵获得足够多的投票，超过了Quorum，那么它将被选为新的领导者。</p></li><li><p><strong>通知其他节点：</strong> 新选出的Leader会向其他哨兵和节点广播其成为领导者的消息，确保集群中的所有节点都知道领导者的变更。</p></li><li><p><strong>故障切换：</strong> 一旦新的Leader选举完成，哨兵会协调进行故障切换，将一个从节点提升为新的主节点，使整个集群继续正常运行。</p></li><li><p><strong>恢复正常状态：</strong> 一旦故障切换完成，新的主节点将开始处理客户端请求，集群会恢复到正常运行状态。</p></li></ol><p>需要注意的是，Redis Sentinel的选举Leader过程受到Paxos算法和Raft算法等分布式一致性算法的影响，以保证在主节点失效时能够选择合适的节点作为新的主节点，从而保持数据的一致性和高可用性。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-21/34362039455500.png"></p><h1 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h1><ol><li><p>如果哨兵集群只有 2 个实例，此时，一个哨兵要想成为 Leader，必须获得 2 票，而不是 1 票。所以，如果有个哨兵挂掉了，那么，此时的集群是无法进行主从库切换的。因此，通常我们至少会配置 3 个哨兵实例。</p></li><li><p>要保证所有哨兵实例的配置是一致的，尤其是主观下线的判断值 down-after-milliseconds。down-after-milliseconds。</p></li></ol></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哨兵机制 </tag>
            
            <tag> 高可用性 </tag>
            
            <tag> 故障切换 </tag>
            
            <tag> 监控 </tag>
            
            <tag> 选主 </tag>
            
            <tag> 客观下线 </tag>
            
            <tag> quorum </tag>
            
            <tag> 选举leader </tag>
            
            <tag> 数据一致性 </tag>
            
            <tag> 哨兵配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BUG】Error- module ‘cv2.cv2‘ has no attribute ‘wechat_qrcode_WeChatQRCode‘</title>
      <link href="/8ecf637c.html"/>
      <url>/8ecf637c.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: module &#x27;cv2&#x27; has no attribute &#x27;wechat_qrcode_WeChatQRCode&#x27;</span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br><span class="line">pip install opencv-contrib-python</span><br><span class="line">``` opencv-contrib-python</span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> cv2 </tag>
            
            <tag> attributeerror </tag>
            
            <tag> module </tag>
            
            <tag> cv2.wechat_qrcode_wechatqrcode </tag>
            
            <tag> pip install </tag>
            
            <tag> opencv-python </tag>
            
            <tag> opencv-contrib-python </tag>
            
            <tag> 首发博客地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Pip</title>
      <link href="/ab703f57.html"/>
      <url>/ab703f57.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip --upgrade</span><br><span class="line">```-m ensurepip --upgrade</span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> python </tag>
            
            <tag> ensurepip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码安装mysql5.7</title>
      <link href="/3f760569.html"/>
      <url>/3f760569.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="通过-RPM-包安装-MySQL"><a href="#通过-RPM-包安装-MySQL" class="headerlink" title="通过 RPM 包安装 MySQL"></a>通过 RPM 包安装 MySQL</h1><ol><li><p><strong>下载 MySQL RPM 包：</strong> 首先，您需要从 MySQL 官方网站（<a href="https://dev.mysql.com/downloads/mysql/%EF%BC%89%E4%B8%8B%E8%BD%BD%E9%80%82%E7%94%A8%E4%BA%8E%E6%82%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%92%8C%E6%9E%B6%E6%9E%84%E7%9A%84">https://dev.mysql.com/downloads/mysql/）下载适用于您的操作系统版本和架构的</a> MySQL RPM 包。选择与您的操作系统和系统架构相对应的版本。</p></li><li><p><strong>安装 RPM 包：</strong> 下载完成后，您可以使用 <code>rpm</code> 命令安装 MySQL RPM 包。假设您下载的 RPM 包名为 <code>mysql.rpm</code>，您可以使用以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh mysql.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 MySQL 服务：</strong> 安装完成后，您可以使用以下命令启动 MySQL 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure></li><li><p><strong>设置开机启动：</strong> 若要确保系统重启后 MySQL 服务能够自动启动，可以使用以下命令启用开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysql</span><br></pre></td></tr></table></figure></li><li><p><strong>设置 MySQL 根密码：</strong> 安装 MySQL 后，需要设置 MySQL 根用户的密码。可以使用以下命令进行设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure></li><li><p><strong>访问 MySQL：</strong> 安装和配置完成后，您可以使用以下命令登录到 MySQL 数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li></ol><h1 id="给root用户取消IP配置"><a href="#给root用户取消IP配置" class="headerlink" title="给root用户取消IP配置"></a>给root用户取消IP配置</h1><p>在 MySQL 数据库中，有时默认会限制 root 用户只能通过 localhost（127.0.0.1）连接，以提高安全性。如果您希望允许 root 用户从其他主机连接到 MySQL，您可以按照以下步骤取消 root 用户的 IP 限制：</p><ol><li><p><strong>编辑 MySQL 配置文件：</strong> 打开 MySQL 的配置文件，通常是 <code>/etc/my.cnf</code> 或 <code>/etc/mysql/my.cnf</code>，使用您喜欢的文本编辑器（例如 <code>nano</code> 或 <code>vim</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li><p><strong>在 <code>[mysqld]</code> 段添加 <code>skip-networking</code> 行：</strong> 在配置文件中找到 <code>[mysqld]</code> 段，在该段中添加以下行以禁用 <code>skip-networking</code> 选项，确保其处于注释状态（行前面有 <code>#</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># skip-networking</span><br></pre></td></tr></table></figure></li><li><p><strong>重启 MySQL 服务：</strong> 保存配置文件后，重启 MySQL 服务以应用更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure></li><li><p><strong>登录 MySQL 并更新 root 用户权限：</strong> 现在您可以登录到 MySQL 数据库，并为 root 用户设置允许从其他主机连接的权限。打开终端，输入以下命令登录到 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li><li><p><strong>更新 root 用户的主机设置：</strong> 在 MySQL 命令行中，使用以下 SQL 命令更新 root 用户的主机设置，允许从任何主机连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your_password&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><p>请将 <code>&#39;your_password&#39;</code> 替换为您希望设置的 root 用户密码。</p></li><li><p><strong>刷新权限：</strong> 更新了权限设置后，执行以下 SQL 命令以刷新 MySQL 的权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li><li><p><strong>退出 MySQL 命令行：</strong> 输入以下命令退出 MySQL 命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXIT;</span><br></pre></td></tr></table></figure></li></ol><h1 id="详细解读mysql5-7的配置文件"><a href="#详细解读mysql5-7的配置文件" class="headerlink" title="详细解读mysql5.7的配置文件"></a>详细解读mysql5.7的配置文件</h1><p>��读mysql5.7的配置文件</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 源码 </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum离线安装elasticsearch7.x</title>
      <link href="/943c1545.html"/>
      <url>/943c1545.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p>要在 CentOS 7 上使用 <code>yum</code> 安装 Elasticsearch 7，您可以按照以下步骤进行操作：</p><ol><li><strong>准备yum包</strong></li></ol><p>关注威信【程序员朱永胜】回复【1016】不限速下载<br>2. <strong>安装 Elasticsearch 7：</strong> 上传压缩包后解压。执行以下命令：</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> es</span><br><span class="line">sudo yum install *.rpm</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>配置 Elasticsearch：</strong> 安装完成后，您需要进行一些配置。打开 Elasticsearch 配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/elasticsearch/elasticsearch.yml</span><br></pre></td></tr></table></figure><p>根据您的需求进行配置，例如设置集群名称、节点名称、监听地址等。完成配置后，保存并退出编辑器。</p></li><li><p><strong>启动 Elasticsearch 服务：</strong> 安装和配置完成后，您可以启动 Elasticsearch 服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start elasticsearch</span><br></pre></td></tr></table></figure><p>您还可以将 Elasticsearch 设置为开机自启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> elasticsearch</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 Elasticsearch 状态：</strong> 您可以使用以下命令检查 Elasticsearch 服务的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status elasticsearch</span><br></pre></td></tr></table></figure></li></ol><p>现在，您已经成功在 CentOS 7 上使用 <code>yum</code> 安装了 Elasticsearch 7。您可以根据您的实际需求进行配置和管理。记得在配置文件中设置适当的安全措施和网络访问限制，以确保 Elasticsearch 的安全性。�保 Elasticsearch 的安全性。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yum </tag>
            
            <tag> 离线安装 </tag>
            
            <tag> es </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum离线安装mysql5.7</title>
      <link href="/b1fe8c2a.html"/>
      <url>/b1fe8c2a.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><ol><li><p>下载rpm包<br>在一台能连网的服务器上执行命令:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install --downloadonly --downloaddir=mysql mysql-community-server</span><br></pre></td></tr></table></figure><p>这里我准备了一个离线包：关注威信【程序员朱永胜】回复【1015】不限速下载</p></li><li><p>复制mysql目录及下面所有子文件到离线服务器上</p></li><li><p>在离线环境中执行命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mysql</span><br><span class="line">yum install *.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 MySQL 服务：</strong> 安装完成后，您可以启动 MySQL 5.7 服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure></li><li><p><strong>查看初始密码：</strong> MySQL 5.7 第一次启动后，会生成一个初始密码。您可以使用以下命令查看初始密码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p><strong>设置新密码：</strong> 使用初始密码登录 MySQL，然后设置一个新的密码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;new_password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>将 <code>&#39;new_password&#39;</code> 替换为您想要设置的新密码。</p></li><li><p><strong>重新加载权限：</strong> 修改密码后，重新加载权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li><li><p><strong>设置开机自启动：</strong> 如果您想要 MySQL 在系统启动时自动启动，执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 MySQL 状态：</strong> 您可以使用以下命令检查 MySQL 服务的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysqld</span><br><span class="line">```systemctl status mysqld</span><br></pre></td></tr></table></figure></li></ol></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> yum </tag>
            
            <tag> 离线安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum离线安装nginx</title>
      <link href="/17fdf463.html"/>
      <url>/17fdf463.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><ol><li>下载rpm包<br>在一台能连网的服务器上执行命令: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install --downloadonly --downloaddir=nginx nginx</span><br></pre></td></tr></table></figure>这里我准备了一个离线包：关注威信【程序员朱永胜】回复【1014】不限速下载</li><li>复制nginx目录及下面所有子文件到离线服务器上</li><li>在离线环境中执行命令 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx</span><br><span class="line">yum install *.rpm</span><br></pre></td></tr></table></figure> yum install *.rpm<pre><code></code></pre></li></ol></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yum </tag>
            
            <tag> 离线安装 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列（三）：深入解读Redis主从同步机制</title>
      <link href="/e5ef9f90.html"/>
      <url>/e5ef9f90.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="Redis高可靠靠什么保证？"><a href="#Redis高可靠靠什么保证？" class="headerlink" title="Redis高可靠靠什么保证？"></a>Redis高可靠靠什么保证？</h1><p>为什么要提这个呢，因为Redis主从库目的呢其实就是为了实现高可靠。上篇文章中我们说过Redis的AOF、RDB日志其实就是为了<strong>减少数据丢失</strong>，这是高可靠的一部分。</p><p>这篇文章呢，我们聊聊Redis实现高可靠的另一方面：<strong>尽量减少服务中断</strong>。这里Redis是怎么做的呢？Redis的做法是<strong>增加副本冗余</strong>，将一份数据同时保存在多个实例上。这样某个实例挂掉并不影响其它实例提供对外服务，保证我们的业务正常运行。</p><p>Redis有哪些手段提高高可用呢？</p><ol><li><p><strong>数据持久化</strong>：Redis 支持多种数据持久化方式，包括快照（snapshotting）和日志（append-only file）。快照会定期将内存中的数据保存到磁盘文件，而日志会记录每次写操作，以便在重启时进行恢复。这些持久化方式可以确保即使服务器意外关闭，数据也不会丢失。</p></li><li><p><strong>主从复制</strong>：Redis 支持主从复制机制，其中一个 Redis 实例作为主节点，负责写操作，而其他实例作为从节点，负责复制主节点的数据。这种方式可以实现数据的备份和负载均衡，从而提高可靠性和性能。</p></li><li><p><strong>Sentinel 哨兵</strong>：Redis Sentinel 是一个监控和自动故障恢复系统，可以监控 Redis 实例的健康状态并在主节点故障时自动进行故障切换。它可以确保系统在主节点发生故障时能够自动切换到备用的从节点，保证服务的连续性。</p></li><li><p><strong>Cluster 集群</strong>：Redis Cluster 是一种分布式系统，将数据分布在多个节点上，以提高可用性和扩展性。每个节点都持有部分数据，并且可以容忍部分节点的故障。当节点发生故障时，集群可以自动重新分配数据，确保服务的可靠性和高可用性。</p></li></ol><h1 id="如何保证副本数据一致？"><a href="#如何保证副本数据一致？" class="headerlink" title="如何保证副本数据一致？"></a>如何保证副本数据一致？</h1><p>首先我们要知道，Redis提供了<strong>主从库模式</strong>，以保证副本一致，主从库之间采用的是<strong>读写分离</strong>的方式。</p><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-17/4353139547600.png" alt="Redis主从库和读写分离"></p><h2 id="Redis中的读写分离基本原理和步骤"><a href="#Redis中的读写分离基本原理和步骤" class="headerlink" title="Redis中的读写分离基本原理和步骤"></a>Redis中的读写分离基本原理和步骤</h2><p>Redis 读写分离是一种架构设计，将读操作和写操作分别路由到不同的 Redis 节点上，以提高性能和扩展性。在 Redis 读写分离中，通常会有一个主节点负责写操作，多个从节点负责读操作。</p><ol><li><p><strong>主节点（写节点）</strong>：</p><ul><li>主节点负责处理所有的写操作，包括写入、更新和删除等。</li><li>写操作在主节点上执行，然后主节点将写操作的结果同步到所有从节点。</li></ul></li><li><p><strong>从节点（读节点）</strong>：</p><ul><li>从节点负责处理读操作，例如获取数据、查询等。</li><li>从节点从主节点复制数据，并在本地保存一份与主节点相同的数据副本。</li></ul></li><li><p><strong>读写分离的实现</strong>：</p><ul><li>客户端根据需要的操作类型将请求分发到主节点或从节点。</li><li>读操作可以通过负载均衡策略，将请求分发到不同的从节点，实现负载分担。</li><li>写操作仍然发送给主节点，确保数据的一致性和完整性。</li></ul></li></ol><p>需要注意的是，<strong>Redis 读写分离并不是完全的数据实时同步</strong>，因为从节点的数据可能会有一定的延迟。另外，读写分离适用于大多数场景下的负载均衡和性能优化，但在一些特定情况下，例如有序集合等复杂数据结构的查询，仍然需要访问主节点。</p><p>实现 Redis 读写分离需要正确配置主从节点的关系，以及在客户端中使用合适的策略进行读写操作的路由。同时，需要注意主节点和从节点之间的数据同步和故障处理，以确保系统的稳定性和可靠性。</p><h1 id="Redis主从库第一次同步是如何实现的？"><a href="#Redis主从库第一次同步是如何实现的？" class="headerlink" title="Redis主从库第一次同步是如何实现的？"></a>Redis主从库第一次同步是如何实现的？</h1><ol><li><p><strong>建立连接：</strong> 从服务器会向主服务器发送 <code>PSYNC</code> 命令，表示要进行同步。主服务器收到 <code>PSYNC</code> 命令后，会创建一个专门用于复制的后台线程（replication thread），并等待从服务器的连接。</p></li><li><p><strong>全量复制（第一次同步）：</strong> 当从服务器连接到主服务器后，主服务器会将自己的数据发送给从服务器。这个过程叫做<strong>全量复制</strong>，主服务器会遍历自己的数据集，将所有数据发送给从服务器。</p><ul><li><p>主服务器会在一个 RDB 文件中保存当前数据集的快照，然后<strong>将这个 RDB 文件发送给从服务器</strong>。从服务器接收到 RDB 文件后，会加载这个文件，将自己的数据集替换成主服务器的数据集。</p></li><li><p>在 RDB 文件传输的过程中，主服务器会将在传输期间的写操作记录下来，称为<strong>命令传播</strong>（command propagation）。这样一来，主服务器就能够在发送完 RDB 文件后，将期间的写操作重新发送给从服务器，以保证从服务器的数据集与主服务器保持一致。</p></li></ul></li><li><p><strong>增量复制：</strong> 在完成全量复制后，主从服务器之间会保持一个 TCP 连接，主服务器会将自己的写操作发送给从服务器，从服务器执行这些写操作，从而保持数据一致性。增量复制的数据同步是<strong>异步</strong>的，但通过记录写操作，主从服务器之间的数据最终会达到一致状态。</p></li></ol><p>需要注意的是，在第一次全量复制的过程中，可能会有一些网络故障、主从服务器负载等情况影响同步。为了提高稳定性和安全性，Redis 提供了一些配置选项和机制，如持久化、复制偏移量、主服务器验证等，来确保主从复制的正常进行。<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-17/4716895377800.png" alt="主从库第一次同步的流程"></p><h2 id="PSYNC命令"><a href="#PSYNC命令" class="headerlink" title="PSYNC命令"></a>PSYNC命令</h2><p>当 Redis 主从复制中的从服务器（Slave）需要与主服务器（Master）进行数据同步时，可以使用 PSYNC（Partial SYNC）命令。PSYNC 命令在 Redis 2.8 版本引入，用于提高数据同步的效率和可靠性。</p><p>PSYNC 命令包括两种模式：完全同步（Full Sync）和部分同步（Partial Sync）。</p><ol><li><p><strong>完全同步（Full Sync）：</strong><br>完全同步在以下情况下发生：</p><ul><li>从服务器初次连接主服务器时。</li><li>从服务器需要进行初次同步，或者复制偏移量与主服务器的偏移量差距较大时。</li><li>主服务器没有保存 RDB 快照文件，所以无法进行部分同步。</li></ul><p>完全同步的过程如下：</p><ul><li>从服务器向主服务器发送一条 PSYNC 命令，并附带上自己的复制积压缓冲区的偏移量（offset）和 replid（复制 ID）。</li><li>主服务器使用<code>bgsave</code>命令，生成RDB文件，接着将文件发给从库。</li><li>从库接收到RDB文件后，会先清空当前数据库，然后加载RDB文件。</li></ul></li><li><p><strong>部分同步（Partial Sync）：</strong><br>部分同步在以下情况下发生：</p><ul><li>从服务器已经复制了一部分数据，并且复制偏移量与主服务器的偏移量差距较小时。</li></ul><p>部分同步的过程如下：</p><ul><li>主库将后续所有<strong>写操作</strong>记录到内存中的replication buffer中</li><li>从服务器向主服务器发送一条 PSYNC 命令，并附带上自己的复制积压缓冲区的偏移量和 replid。</li><li>主库将所有保存的写操作发送给从库，具体来说，就是当RDB发送完成后，就会把此时replication buffer中的修改发给从库，从库再重新执行这些操作。这样一来，主从库就实现同步了</li></ul></li></ol><p>PSYNC 命令的目标是在保证数据一致性的前提下，尽可能地减少数据同步所需的数据传输量，从而提高复制效率。完全同步和部分同步的选择取决于从服务器与主服务器之间的复制状态和数据差距。</p><h1 id="主库的烦恼"><a href="#主库的烦恼" class="headerlink" title="主库的烦恼"></a>主库的烦恼</h1><p>这里我们能分析得到主库做全量同步时的两个耗时操作：</p><ol><li>生成RDB文件</li><li>传输RDB文件</li></ol><p>这里设想一个场景，如果是一主多从的架构，那么主节点就要生成多份RDB并传输给从节点，很显然，这种操作是非常耗时的。这里主要占用两块资源</p><ol><li>通过fork子进程生成RDB快照会<strong>阻塞主线程处理请求</strong></li><li>传输RDB文件会占用<strong>网络带宽</strong></li></ol><p>那么有什么方法可以解决这些问题呢？<br>这里呀，我们就引入了“主-从-从”架构，很容易理解，就是主库只需要同步一份给某从库A，其他从库从从库A同步数据。</p><h1 id="如何理解-主-从-从-架构？"><a href="#如何理解-主-从-从-架构？" class="headerlink" title="如何理解 主-从-从 架构？"></a>如何理解 主-从-从 架构？</h1><p>主从（Master-Slave）架构是一种常见的数据库复制和数据备份方案。在这种架构中，存在一个主数据库（主服务器）和一个或多个从数据库（从服务器），主数据库负责处理写操作和读操作，从数据库负责复制主数据库的数据，以提供读取操作和备份。</p><p>主从架构的工作方式如下：</p><ol><li><p><strong>主数据库（主服务器）：</strong></p><ul><li>主数据库是系统的主要数据库，负责处理所有的写操作（数据的插入、更新、删除）和部分读操作。</li><li>当主数据库接收到写操作时，会将这些写操作记录到自己的日志文件（例如 MySQL 的二进制日志）中，并发送给从数据库。</li><li>主数据库也会保存一个复制积压缓冲区（replication backlog buffer），其中存储了一部分的写操作数据，用于满足部分同步和断线重连的需求。</li></ul></li><li><p><strong>从数据库（从服务器）：</strong></p><ul><li>从数据库是主数据库的复制副本，负责从主数据库复制数据以供读取操作和备份。</li><li>从数据库会连接到主数据库，并发送复制请求（如 PSYNC 命令）以获取主数据库的数据更新。</li><li>从数据库会持续地复制主数据库的写操作，将写操作应用到自己的数据副本中，以保持与主数据库的数据一致性。</li><li>从数据库可以处理读取请求，从而减轻主数据库的读取压力。</li></ul></li></ol><p>主从架构的优势：</p><ul><li><strong>负载均衡：</strong> 通过将读操作分发给从数据库，可以分担主数据库的读取压力，提高整体系统的吞吐量。</li><li><strong>高可用性：</strong> 当主数据库出现故障时，可以将其中一个从数据库提升为新的主数据库，从而实现快速故障切换。</li><li><strong>数据备份：</strong> 从数据库可以作为主数据库的数据备份，用于恢复数据和灾难恢复。</li><li><strong>数据分析：</strong> 从数据库可以用于读取操作，以进行数据分析、报表生成等工作，而不影响主数据库的性能。</li></ul><p>需要注意的是，主从架构并不是完全实时的，因为从数据库需要时间来同步主数据库的数据更新。因此，在考虑使用主从架构时，需要权衡数据一致性和性能之间的需求。<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-17/47798493312900.png" alt="级联的“主-从-从”模式"></p><h1 id="如何配置主从从架构呢"><a href="#如何配置主从从架构呢" class="headerlink" title="如何配置主从从架构呢"></a>如何配置主从从架构呢</h1><ol><li><p><strong>安装和配置主服务器（Master）：</strong></p><ul><li>安装Redis主服务器并确保主服务器正常运行。</li><li>在主服务器的配置文件（redis.conf）中开启持久化（通常使用RDB快照或AOF日志）和监听端口，确保配置项如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port 6379</span><br><span class="line">save 900 1</span><br><span class="line">appendonly yes  # 如果使用AOF日志</span><br></pre></td></tr></table></figure></li><li>如果需要对外提供访问，确保防火墙或网络设置允许访问主服务器的6379端口。</li></ul></li><li><p><strong>安装和配置第一个从服务器（Slave1）：</strong></p><ul><li>在从服务器1上安装Redis数据库。</li><li>在从服务器1的配置文件中配置主从关系。在配置文件中添加类似如下的内容，其中<code>masterauth</code>是主服务器的密码，<code>master</code>是主服务器的IP和端口：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slaveof master_ip master_port</span><br><span class="line">masterauth your_master_password</span><br></pre></td></tr></table></figure></li><li>重启从服务器1使配置生效。</li></ul></li><li><p><strong>安装和配置第二个从服务器（Slave2）：</strong></p><ul><li>在从服务器2上安装Redis数据库。</li><li>在从服务器2的配置文件中配置主从关系，与从服务器1相似。确保配置项不冲突。</li><li>重启从服务器2使配置生效。</li></ul></li><li><p><strong>重启主服务器：</strong></p><ul><li>在主服务器上查看主服务器的信息，如IP和端口。通常使用以下命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO server</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>测试主从从架构：</strong></p><ul><li>在主服务器上进行写操作，如插入、更新或删除数据。</li><li>查看从服务器1和从服务器2是否同步了主服务器的数据。</li></ul></li></ol><p>需要注意的是，Redis的主从从架构在部署和配置上与主从架构类似，只是需要在从服务器上再次配置主从关系。另外，Redis还可以配置更多高可用性的功能，如哨兵（Sentinel）和集群（Cluster），以实现更强大的架构。具体配置细节可能会因版本和需求而有所不同，建议参考官方文档或相关资源进行详细了解和配置。</p><h1 id="主从库间网络断了怎么办？"><a href="#主从库间网络断了怎么办？" class="headerlink" title="主从库间网络断了怎么办？"></a>主从库间网络断了怎么办？</h1><p>在 Redis 2.8 之前，如果主从库在命令传播时出现了网络闪断，那么，从库就会和主库重新进行一次全量复制，开销非常大。</p><p>2.8之后呢是支持增量同步的，那么Redis是怎么实现增量同步的呢？<br>当Redis主从库之间的网络断开后，网络恢复时从库需要进行增量同步，以获取在网络断开期间主库中的更新数据。Redis实现增量同步的方式是通过Redis复制机制，具体流程如下：</p><ol><li><p><strong>保存主服务器的数据：</strong> 主服务器会将更新的数据写入内存，并在内存中保存一份副本。同时，主服务器会将更新的数据写入AOF（Append-Only File）日志文件，以便在断电或宕机情况下能够进行数据恢复。</p></li><li><p><strong>记录复制偏移量：</strong> 在主服务器的复制过程中，主服务器会记录一个复制偏移量（replication offset），表示从服务器在主服务器中的数据位置。这个偏移量会随着数据的更新而递增。</p></li><li><p><strong>网络恢复：</strong> 当网络恢复时，从服务器会尝试连接主服务器并请求进行复制。</p></li><li><p><strong>发送SYNC命令：</strong> 从服务器会发送SYNC命令给主服务器。如果是初次连接复制，从服务器发送的SYNC命令中不包含任何参数。如果是增量同步，从服务器会发送带有偏移量参数的SYNC命令。</p></li><li><p><strong>全量复制或部分复制：</strong> 根据情况，主服务器会执行全量复制或部分复制：</p><ul><li><strong>全量复制（初次连接）：</strong> 如果是初次连接复制，主服务器会执行全量复制。它会创建一个RDB快照（数据库快照），将数据库中的数据快照发送给从服务器。这样从服务器就能够拥有主服务器的完整数据集。</li><li><strong>部分复制（增量同步）：</strong> 如果是增量同步，主服务器会从记录的偏移量处开始，将从偏移量后的所有更新数据发送给从服务器。这样从服务器就能够获取在断开网络期间主服务器的更新数据。</li></ul></li><li><p><strong>复制数据传输：</strong> 主服务器会将全量数据或增量数据通过网络传输给从服务器。从服务器会接收并处理这些数据，更新自己的数据集。</p></li><li><p><strong>复制过程继续：</strong> 一旦复制数据传输完成，从服务器会持续地与主服务器保持连接，接收来自主服务器的增量更新。这样，主从库之间的数据保持同步。</p></li></ol><p>需要注意的是，当网络断开时间较长或断开期间数据更新较大时，增量同步可能会导致从服务器落后于主服务器。在网络恢复后，从服务器需要足够的时间来接收和处理更新数据，以保持与主服务器的数据同步。<br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-17/48329170103300.png"></p><h1 id="一般的排查流程"><a href="#一般的排查流程" class="headerlink" title="一般的排查流程"></a>一般的排查流程</h1><ol><li><p><strong>检查网络连接问题：</strong> 首先，确保网络连接问题的确是造成主从库通信中断的原因。检查网络配置、防火墙规则、路由等设置，确保主从库之间可以互相访问。</p></li><li><p><strong>重新连接网络：</strong> 如果网络问题是暂时的，你可以尝试恢复网络连接，让主从库之间恢复通信。</p></li><li><p><strong>检查主从状态：</strong> 在主从库网络连接恢复后，使用<code>INFO replication</code>命令检查主从库的同步状态。确保主库已将数据同步到从库。</p></li><li><p><strong>手动重新同步：</strong> 如果主从库之间的网络断开时间较长，可以考虑进行手动重新同步：</p><ul><li>在从库上，使用<code>SLAVEOF NO ONE</code>命令解除从库状态。</li><li>在从库上，删除持久化文件（RDB文件或AOF文件）。</li><li>在从库上，执行<code>SLAVEOF master_ip master_port</code>命令，将其重新设置为主库的从库。</li><li>在主库上，执行<code>SLAVEOF NO ONE</code>命令解除主库状态。</li><li>在主库上，执行<code>SLAVEOF slave_ip slave_port</code>命令，将其重新设置为从库的主库。</li></ul></li><li><p><strong>手动复制数据：</strong> 如果网络断开时间较长且重新同步不可行，你可能需要手动复制数据。在主库上导出数据，并在从库上导入数据。</p></li><li><p><strong>备份和恢复：</strong> 如果网络问题无法解决，你可能需要在网络恢复后考虑从主库重新备份数据，然后在从库上进行数据恢复。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>文章中介绍了Redis主从库架构以及如何配置、维护和解决主从库网络断开的问题。以下是文章中涉及到的主要内容：</p><ol><li><p><strong>Redis主从库架构及其保证的高可靠性：</strong></p><ul><li>Redis主从库的目的是实现高可靠性，通过数据持久化、主从复制、Sentinel哨兵和Cluster集群等方式来保障数据的安全性和可用性。</li></ul></li><li><p><strong>如何保证副本数据一致：</strong></p><ul><li>Redis通过全量复制和部分复制（增量同步）来保证主从库之间的数据一致性。复制偏移量和复制积压缓冲区等机制用于记录和传输数据。</li></ul></li><li><p><strong>主从库第一次同步的过程：</strong></p><ul><li>主从库之间的第一次同步涉及主服务器创建RDB快照，发送给从服务器，以及记录期间的写操作进行命令传播。</li></ul></li><li><p><strong>PSYNC命令和增量同步：</strong></p><ul><li>PSYNC命令用于主从库网络断开后的增量同步。完全同步用于初次连接，部分同步用于增量同步，从而减少数据传输量。</li></ul></li><li><p><strong>主从从架构及其优势：</strong></p><ul><li>主从从架构是在主从架构基础上的扩展，通过级联的方式减轻主服务器的复制压力，实现更高的可用性和负载均衡。</li></ul></li><li><p><strong>配置主从从架构的步骤：</strong></p><ul><li>安装和配置主服务器，从服务器1和从服务器2。</li><li>重启主服务器，查看主服务器信息。</li><li>进行测试，验证主从库之间是否同步。</li></ul></li><li><p><strong>解决主从库间网络断开问题：</strong></p><ul><li>检查网络连接问题，确保主从库之间可以互相访问。</li><li>重新连接网络，恢复通信。</li><li>检查主从状态，确保同步。</li><li>手动重新同步，尝试恢复数据一致性。</li><li>手动复制数据或备份恢复数据。��或备份恢复数据。</li></ul></li></ol></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 主从同步 </tag>
            
            <tag> 数据持久化 </tag>
            
            <tag> 主从复制 </tag>
            
            <tag> sentinel哨兵 </tag>
            
            <tag> cluster集群 </tag>
            
            <tag> 读写分离 </tag>
            
            <tag> psync命令 </tag>
            
            <tag> 增量同步 </tag>
            
            <tag> 主从从架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键免费部署自己的GPT网站（无需服务器）</title>
      <link href="/43450002.html"/>
      <url>/43450002.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="首发博客地址"><a href="#首发博客地址" class="headerlink" title="首发博客地址"></a>首发博客地址</h1><p><a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><h1 id="先看看效果"><a href="#先看看效果" class="headerlink" title="先看看效果"></a>先看看效果</h1><p><a href="https://chat-gpt-next-web2-xi-three.vercel.app/">https://chat-gpt-next-web2-xi-three.vercel.app</a></p><p>为啥推荐这个呢，其实市面上已经有很多了，这个主要是UI蛮漂亮的，嘿嘿！<br>你要是简单想弄的话，CSDN就能免费搭建一个，这个就自行百度吧，还是很简单的。</p><h2 id="自定义角色"><a href="#自定义角色" class="headerlink" title="自定义角色"></a>自定义角色</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/20230815144403.png"></p><h2 id="详细的配置"><a href="#详细的配置" class="headerlink" title="详细的配置"></a>详细的配置</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/20230815144647.png"><br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/20230815144706.png"><br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/20230815144724.png"></p><h1 id="Fork项目"><a href="#Fork项目" class="headerlink" title="Fork项目"></a>Fork项目</h1><p><a href="https://github.com/zysicyj/ChatGPT-Next-Web2">https://github.com/zysicyj/ChatGPT-Next-Web2</a></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>打开链接：<br><a href="https://vercel.com/new/clone?repository-url=https://github.com/Yidadaa/ChatGPT-Next-Web&env=OPENAI_API_KEY&env=CODE&project-name=chatgpt-next-web&repository-name=ChatGPT-Next-Web">https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FYidadaa%2FChatGPT-Next-Web&amp;env=OPENAI_API_KEY&amp;env=CODE&amp;project-name=chatgpt-next-web&amp;repository-name=ChatGPT-Next-Web</a></p><p>注册后，填写这个<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/20230815145222.png"></p><p>点击部署即可22.png)</p><p>点击部署即可</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一键部署 </tag>
            
            <tag> gpt网站 </tag>
            
            <tag> 无需服务器 </tag>
            
            <tag> ui漂亮 </tag>
            
            <tag> 自定义角色 </tag>
            
            <tag> 配置详细 </tag>
            
            <tag> fork项目 </tag>
            
            <tag> 部署 </tag>
            
            <tag> 注册 </tag>
            
            <tag> 填写信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决国内IDEA AI无法连接问题</title>
      <link href="/5d77a2ac.html"/>
      <url>/5d77a2ac.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="什么是Clash的TUN模式"><a href="#什么是Clash的TUN模式" class="headerlink" title="什么是Clash的TUN模式"></a>什么是Clash的TUN模式</h1><p>Clash的TUN模式是一种网络代理模式，它允许将网络流量通过虚拟网络接口进行转发和处理。TUN（全称为”network TUNnel”<br>）是一种在操作系统内核中创建虚拟网络接口的技术。</p><p>使用Clash的TUN模式，你可以配置Clash作为一个VPN客户端，将所有的网络流量通过TUN接口进行转发。这样，你可以实现在应用层面上对网络流量进行代理和过滤，从而实现网络访问的自由和安全。</p><p>TUN模式的工作原理如下：</p><ol><li>Clash会在操作系统内核中创建一个虚拟网络接口，比如tun0。</li><li>你可以将tun0接口配置为系统的默认网关，使所有的网络流量都通过该接口发送。</li><li>Clash会监听tun0接口上的网络流量，并根据你的配置对流量进行处理，比如执行代理、过滤或其他操作。</li><li>处理后的流量会被发送到目标服务器或者代理服务器上，然后返回响应给应用程序。</li></ol><p>总结起来，Clash的TUN模式提供了一种在应用层面对网络流量进行控制和处理的方式，使你能够自由地配置、代理和过滤网络访问。这对于实现个人隐私保护和访问受限内容非常有用。</p><p>这里呢，我们打开Clash的TUN模式即可</p><p>官方文档：<a href="https://docs.cfw.lbyczf.com/contents/tun.html">https://docs.cfw.lbyczf.com/contents/tun.html</a></p><h1 id="下面简单说说怎么操作，总共呢就两步"><a href="#下面简单说说怎么操作，总共呢就两步" class="headerlink" title="下面简单说说怎么操作，总共呢就两步"></a>下面简单说说怎么操作，总共呢就两步</h1><h2 id="第一步-点击该图标等待变绿"><a href="#第一步-点击该图标等待变绿" class="headerlink" title="第一步,点击该图标等待变绿"></a>第一步,点击该图标等待变绿</h2><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-16/5716146543700.png"><br><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-16/5797233508100.png"></p><h2 id="勾选TUN模式即可"><a href="#勾选TUN模式即可" class="headerlink" title="勾选TUN模式即可"></a>勾选TUN模式即可</h2><p><img src="http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-16/5827036314100.png"><br>23-08-16&#x2F;5827036314100.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clash </tag>
            
            <tag> tun模式 </tag>
            
            <tag> 网络代理 </tag>
            
            <tag> 应用层面 </tag>
            
            <tag> vpn客户端 </tag>
            
            <tag> 网络流量 </tag>
            
            <tag> 自由和安全 </tag>
            
            <tag> 配置 </tag>
            
            <tag> 代理服务器 </tag>
            
            <tag> 隐私保护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚本一键生成通用接口，一分钟实现增删改查</title>
      <link href="/8bb51d72.html"/>
      <url>/8bb51d72.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><p>直接使用无需看此配置</p><p>快速生成通用接口业务配置 ： <a href="https://blog.zysicyj.top/ba6838a7">https://blog.zysicyj.top/ba6838a7</a></p><h2 id="一、插件安装"><a href="#一、插件安装" class="headerlink" title="一、插件安装"></a>一、插件安装</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142150759.png"></p><h2 id="二、脚本"><a href="#二、脚本" class="headerlink" title="二、脚本"></a>二、脚本</h2><p>关注绿色聊天软件【程序员朱永胜】回复：1013 下载</p><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="拷贝到扩展目录下"><a href="#拷贝到扩展目录下" class="headerlink" title="拷贝到扩展目录下"></a>拷贝到扩展目录下</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151774.png"></p><h3 id="修改mybatisCodehelper-vm"><a href="#修改mybatisCodehelper-vm" class="headerlink" title="修改mybatisCodehelper.vm"></a>修改mybatisCodehelper.vm</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151263.png"></p><h3 id="修改init-vm"><a href="#修改init-vm" class="headerlink" title="修改init.vm"></a>修改init.vm</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151447.png"></p><h3 id="右键使用插件生成"><a href="#右键使用插件生成" class="headerlink" title="右键使用插件生成"></a>右键使用插件生成</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151908.png"></p><h3 id="这样配置并确定"><a href="#这样配置并确定" class="headerlink" title="这样配置并确定"></a>这样配置并确定</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142151286.png">&#x2F;blog&#x2F;202308142151286.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> 通用接口 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 插件安装 </tag>
            
            <tag> 扩展目录 </tag>
            
            <tag> mybatiscodehelper.vm </tag>
            
            <tag> init.vm </tag>
            
            <tag> 右键使用插件生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速生成通用接口业务配置</title>
      <link href="/ba6838a7.html"/>
      <url>/ba6838a7.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h2 id="这个是干什么的？"><a href="#这个是干什么的？" class="headerlink" title="这个是干什么的？"></a>这个是干什么的？</h2><p>简单介绍下：</p><p>作用：通过插件一键生成某个表对应的增删改查等基础或者说通用接口，这里面的代码是基础版的，后续改良后，很多业务的通用功能，比如流程的启动，自动下一步，通用导出，通用导入等等。</p><p>原理：核心就是<code>BasicControllerPostProcessor </code>，通过动态生成代理对象，完成逻辑实现。这里呢经过实践呢后续也有不少优化的，后续我总结后发一个新版的</p><h2 id="一、核心处理类"><a href="#一、核心处理类" class="headerlink" title="一、核心处理类"></a>一、核心处理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.ListUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.TimeInterval;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.CommonAnnotationBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载baseMapper，baseDao，baseService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicControllerPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">CommonAnnotationBeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">945664767382485314L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;NullableProblems&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> beanClass.getPackage().getName();</span><br><span class="line">        log.trace(<span class="string">&quot;beanName---&#123;&#125;,packageName:&#123;&#125;&quot;</span>, beanName, packageName);</span><br><span class="line">        List&lt;String&gt; per = ListUtil.of(<span class="string">&quot;com.nari.supervision.daily&quot;</span>);</span><br><span class="line">        List&lt;String&gt; tail = ListUtil.of(<span class="string">&quot;outbound&quot;</span>,<span class="string">&quot;personal&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (per.stream().anyMatch(packageName::contains)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tail.stream().map(v -&gt; v + <span class="string">&quot;.controller&quot;</span>).anyMatch(packageName::contains)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicService&quot;</span>, <span class="string">&quot;Controller&quot;</span>, <span class="string">&quot;Service&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tail.stream().map(v -&gt; v + <span class="string">&quot;.service&quot;</span>).anyMatch(packageName::contains)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicMapper&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;TransformImpl&quot;</span>);</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicDao&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;Mapper&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tail.stream().map(v -&gt; v + <span class="string">&quot;serviceImpl&quot;</span>).anyMatch(packageName::contains)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicMapper&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;TransformImpl&quot;</span>);</span><br><span class="line">                    updateResourceName(beanClass, beanName, <span class="string">&quot;basicDao&quot;</span>, <span class="string">&quot;Service&quot;</span>, <span class="string">&quot;Mapper&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateResourceName</span><span class="params">(Class&lt;?&gt; beanClass, String beanName, String destField, String searchString, String replaceString)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> beanClass.getSuperclass().getDeclaredField(destField);</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">basicMapper</span> <span class="operator">=</span> field.getAnnotation(Resource.class);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> Proxy.getInvocationHandler(basicMapper);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">memberValues</span> <span class="operator">=</span> invocationHandler.getClass().getDeclaredField(<span class="string">&quot;memberValues&quot;</span>);</span><br><span class="line">        memberValues.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) memberValues.get(invocationHandler);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, StringUtils.replace(beanName, searchString, replaceString));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、基础类"><a href="#二、基础类" class="headerlink" title="二、基础类"></a>二、基础类</h2><h3 id="BasicController"><a href="#BasicController" class="headerlink" title="BasicController"></a>BasicController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nari.core.annotation.OperationLog;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.groups.basic.InsertGroup;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.groups.basic.UpdateGroup;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.groups.query.PageQueryGroup;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.ApiResult;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.BaseParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageResult;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiSort;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础接口管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicController</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BasicModel</span>, Q <span class="keyword">extends</span> <span class="title class_">BaseParam</span>, V, D, M <span class="keyword">extends</span> <span class="title class_">BasicMapper</span>&lt;T, Q, D, V&gt;&gt; <span class="keyword">extends</span> <span class="title class_">com</span>.nari.core.web.BaseController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BasicService&lt;T, Q, V, D, M&gt; basicService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.1 添加&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;添加&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = InsertGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">insert</span><span class="params">(<span class="meta">@RequestBody</span> Q query)</span> &#123;</span><br><span class="line">        basicService.insert(query);</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.2 根据id删除&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id删除&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">del</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">        basicService.del(id);</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除-软删除，实际修改标识符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;/weak&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.3 根据id删除-软删除，实际修改标识符&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id删除-软删除，实际修改标识符&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">delWeak</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">        basicService.delWeak(id);</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.4 根据id更新信息&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id更新信息&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = UpdateGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;V&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Q query)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(basicService.update(query));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新信息-批量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;updateBatch&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.5 根据id更新信息-批量&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;根据id更新信息-批量&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = UpdateGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult <span class="title function_">updateBatch</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Q&gt; query)</span> &#123;</span><br><span class="line">        basicService.updateBatch(query);</span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单个数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.6 查询单个数据&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;查询单个数据&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;V&gt; <span class="title function_">select</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(basicService.select(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;1.7 分页&quot;)</span></span><br><span class="line">    <span class="meta">@OperationLog(value = &quot;分页&quot;)</span></span><br><span class="line">    <span class="meta">@Validated(value = PageQueryGroup.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;PageResult&lt;V&gt;&gt; <span class="title function_">listUser</span><span class="params">(Q query)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(basicService.page(query));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicDao"><a href="#BasicDao" class="headerlink" title="BasicDao"></a>BasicDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.BaseParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageParam;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BasicDao</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BasicModel</span>, D, Q <span class="keyword">extends</span> <span class="title class_">BaseParam</span>&gt; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;T&gt; &#123;</span><br><span class="line">    List&lt;D&gt; <span class="title function_">selectPageRel</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> PageParam&lt;D, Q&gt; page, <span class="meta">@Param(&quot;param&quot;)</span> Q param)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicEnum"><a href="#BasicEnum" class="headerlink" title="BasicEnum"></a>BasicEnum</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础枚举</span></span><br><span class="line"><span class="comment"> * 主要用来配合apijson实现枚举展示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/5/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BasicEnum</span> &#123;</span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">getValue</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicMapper"><a href="#BasicMapper" class="headerlink" title="BasicMapper"></a>BasicMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mapstruct.MappingTarget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BasicMapper</span>&lt;T, Q, D, V&gt; &#123;</span><br><span class="line">    T <span class="title function_">query2do</span><span class="params">(Q query)</span>;</span><br><span class="line"></span><br><span class="line">    V <span class="title function_">dto2View</span><span class="params">(D dto)</span>;</span><br><span class="line"></span><br><span class="line">    D <span class="title function_">do2dto</span><span class="params">(T role)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Q query, <span class="meta">@MappingTarget</span> T t)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;V&gt; <span class="title function_">dto2ViewPage</span><span class="params">(List&lt;D&gt; dto)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicModel"><a href="#BasicModel" class="headerlink" title="BasicModel"></a>BasicModel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用模型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/5/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicModel</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;删除标识&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String deleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BasicService"><a href="#BasicService" class="headerlink" title="BasicService"></a>BasicService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.IdUtil;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.BaseParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:njpkhuan@gmail.com&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicService</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BasicModel</span>, Q <span class="keyword">extends</span> <span class="title class_">BaseParam</span>, V, D, M <span class="keyword">extends</span> <span class="title class_">BasicMapper</span>&lt;T, Q, D, V&gt;&gt; &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BasicDao&lt;T, D, Q&gt; basicDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BasicMapper&lt;T, Q, D, V&gt; basicMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="meta">@Valid</span> Q query)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> basicMapper.query2do(query);</span><br><span class="line">        t.setId(IdUtil.simpleUUID());</span><br><span class="line">        basicDao.insert(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(<span class="meta">@NotNull</span> String id)</span> &#123;</span><br><span class="line">        basicDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query @&#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">update</span><span class="params">(<span class="meta">@Valid</span> Q query)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">data</span> <span class="operator">=</span> basicMapper.query2do(query);</span><br><span class="line">        basicDao.updateById(data);</span><br><span class="line">        <span class="type">D</span> <span class="variable">d</span> <span class="operator">=</span> basicMapper.do2dto(data);</span><br><span class="line">        <span class="keyword">return</span> basicMapper.dto2View(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/3/1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">select</span><span class="params">(<span class="meta">@NotNull</span> String id)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">data</span> <span class="operator">=</span> basicDao.selectById(id);</span><br><span class="line">        <span class="type">D</span> <span class="variable">d</span> <span class="operator">=</span> basicMapper.do2dto(data);</span><br><span class="line">        <span class="keyword">return</span> basicMapper.dto2View(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询多条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query &#123;<span class="doctag">@link</span> Q&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:njpkhuan@gmail.com&quot; &gt;朱永胜&lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2021/2/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;V&gt; <span class="title function_">page</span><span class="params">(<span class="meta">@Valid</span> Q query)</span> &#123;</span><br><span class="line">        PageParam&lt;D, Q&gt; page = <span class="keyword">new</span> <span class="title class_">PageParam</span>&lt;&gt;(query);</span><br><span class="line">        page.setDefaultOrder(<span class="string">&quot;create_time desc&quot;</span>);</span><br><span class="line">        List&lt;D&gt; list = basicDao.selectPageRel(page, query);</span><br><span class="line"></span><br><span class="line">        List&lt;V&gt; vList = basicMapper.dto2ViewPage(list);</span><br><span class="line">        log.trace(<span class="string">&quot;&#123;&#125;&quot;</span>, list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(vList, page.getTotal());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 软删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/5/26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delWeak</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> basicDao.selectById(id);</span><br><span class="line">        t.setDeleted(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        basicDao.updateById(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt;朱永胜&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/6/6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBatch</span><span class="params">(List&lt;Q&gt; query)</span> &#123;</span><br><span class="line">        query.forEach(<span class="built_in">this</span>::update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="GenericSuperclassUtil"><a href="#GenericSuperclassUtil" class="headerlink" title="GenericSuperclassUtil"></a>GenericSuperclassUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.core.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericSuperclassUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取泛型类Class对象，不是泛型类则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getActualTypeArgument(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        Class&lt;?&gt; entitiClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (genericSuperclass <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass)</span><br><span class="line">                    .getActualTypeArguments();</span><br><span class="line">            <span class="keyword">if</span> (actualTypeArguments != <span class="literal">null</span> &amp;&amp; actualTypeArguments.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                entitiClass = (Class&lt;?&gt;) actualTypeArguments[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entitiClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取泛型类Class对象，不是泛型类则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; getActualTypeArgument(Class&lt;?&gt; clazz, Integer pos) &#123;</span><br><span class="line">        Class&lt;?&gt; entitiClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (genericSuperclass <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass)</span><br><span class="line">                    .getActualTypeArguments();</span><br><span class="line">            <span class="keyword">if</span> (actualTypeArguments != <span class="literal">null</span> &amp;&amp; actualTypeArguments.length &gt; pos) &#123;</span><br><span class="line">                entitiClass = (Class&lt;?&gt;) actualTypeArguments[pos];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entitiClass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、POM"><a href="#三、POM" class="headerlink" title="三、POM"></a>三、POM</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.5.5.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">```<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> 动态加载 </tag>
            
            <tag> 基础类 </tag>
            
            <tag> 基础接口 </tag>
            
            <tag> 基础枚举 </tag>
            
            <tag> 基础转换 </tag>
            
            <tag> 基础模型 </tag>
            
            <tag> 基础服务 </tag>
            
            <tag> pom </tag>
            
            <tag> mapstruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开发规范系列】（一）：Mysql篇</title>
      <link href="/e1aecfe9.html"/>
      <url>/e1aecfe9.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-编码规范：保障代码质量的关键"><a href="#MySQL-编码规范：保障代码质量的关键" class="headerlink" title="MySQL 编码规范：保障代码质量的关键"></a>MySQL 编码规范：保障代码质量的关键</h1><h2 id="1-流程"><a href="#1-流程" class="headerlink" title="1. 流程"></a>1. 流程</h2><p>数据库表结构的修改需要相关人员和Leader一起评审，保证符合涉及规范。</p><p>不允许使用root账号，所有开发和测试应当分配指定账号，并授予最小数据库权限</p><h2 id="2-数据库与表规范"><a href="#2-数据库与表规范" class="headerlink" title="2. 数据库与表规范"></a>2. 数据库与表规范</h2><h3 id="表命名规范"><a href="#表命名规范" class="headerlink" title="表命名规范"></a>表命名规范</h3><ol><li>常规表表名以 t_开头，t 代表 table 的意思，命名规则即 <strong>t + 模块（包含模块含义的简写）+ 表（包含表含义的简写）</strong><br>，比如用户模块的教育信息表：t_user_eduinfo。</li><li>临时表（RD、QA 或 DBA 同学用于数据临时处理的表），命名规则：<strong>temp 前缀+模块+表+日期后缀</strong>：temp_user_eduinfo_20210719</li><li>备份表（用于保存和归档历史数据或者作为灾备恢复的数据）命名规则，<strong>bak 前缀+模块+表+日期后缀</strong>：bak_user_eduinfo_20210719</li><li>区分位: iz_* [String(1)] 1表示是 0表示否，（禁用 is_,代码生成实体有问题 )</li><li>状态位: *_status [String(1-2)] 状态字段必须加注释说明每个值代表含义</li><li>同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义</li><li>多个单词以下划线 _ 分隔</li><li>常规表表名尽量不超过 30 个字符，temp 表和 bak 表视情况而定，也尽量简短为宜，命名应使用小写</li></ol><h3 id="数据库对象设计规范"><a href="#数据库对象设计规范" class="headerlink" title="数据库对象设计规范"></a>数据库对象设计规范</h3><ol><li>字符集统一使用<code>utf8mb4</code>,排序<code>utf8mb4_general_ci</code></li><li>不允许使用视图、存储过程、触发器</li><li>数据库引擎统一<code>innodb</code></li><li>模块划分和代码中业务模块一致</li></ol><h3 id="表设计规范"><a href="#表设计规范" class="headerlink" title="表设计规范"></a>表设计规范</h3><ol><li>不要使用外键</li><li>表必须有主键，设置为varchar(64)，唯一</li><li>表必须有create_time(timestamp)字段</li><li>表必须有update_time(timestamp)字段</li><li>禁止使用复杂类型，json使用要看情况</li><li><strong>需要json连接的字段，类型必须一致，防止隐式转换</strong></li><li>严禁使用分区表</li><li>单表字段数不要太多，建议最多不要大于50个。过度的宽表对性能也是很大的影响。</li><li>MySQL在处理大表时，性能就开始明显降低，所以建议单表物理大小限制在16GB，表中数据行数控制在2000W内。^[<br>业内的规则是超过2000W性能开始明显降低。但是这个值是灵活的，你可以根据实际情况进行测试来判断，比如阿里的标准就是500W，百度的确是2000W。实际上是否宽表，单行数据所占用的空间都有起到作用的。</li><li>表字段注释，每个字段必须设置注释说明;</li><li>表字段注释，状态类型的字段必须说明取值规则（比如性别sex取值规则）</li></ol><h2 id="3-字段规范"><a href="#3-字段规范" class="headerlink" title="3. 字段规范"></a>3. 字段规范</h2><h4 id="字段命名规范"><a href="#字段命名规范" class="headerlink" title="字段命名规范"></a>字段命名规范</h4><ol><li>字段命名需要表示其实际含义的英文单词或简写，<strong>单词之间用下划线 _ 进行连接</strong>，如 service_ip、service_port。</li><li><strong>各表之间相同意义的字段必须同名</strong>，比如 a 表和 b 表都有创建时间，应该统一为 create_time，不一致会很混乱。</li><li>多个单词以下划线 _ 分隔</li><li>字段名尽量不超过 30 个字符，<strong>命名应该使用小写</strong></li></ol><h4 id="字段设计规范"><a href="#字段设计规范" class="headerlink" title="字段设计规范"></a>字段设计规范</h4><ol><li><strong>对于精确浮点型数据存储，需要使用DECIMAL</strong>，严禁使用FLOAT和DOUBLE</li><li>禁止使用TEXT、BLOG字段，特殊情况除外</li><li><strong>字段使用NOT NULL属性</strong>，可用默认值代替NULL</li><li>区分、状态、类型字段，尽量用String类型，避免数字类型的一些问题</li><li>字段默认值（字段尽量不设置默认值，采用编码方式加默认值）</li><li>逻辑删除字段，del_flag [int(1)]，1表示删除 0表示未删除 ，可选择加</li><li>乐观锁字段， update_count[Integer]，可选择加</li></ol><h2 id="4-索引规范"><a href="#4-索引规范" class="headerlink" title="4. 索引规范"></a>4. 索引规范</h2><h4 id="索引命名规范"><a href="#索引命名规范" class="headerlink" title="索引命名规范"></a>索引命名规范</h4><ol><li>唯一索引使用<strong>uni + 字段名</strong> 来命名：create unique index uni_uid on t_user_basic(uid) 。</li><li>非唯一索引使用<strong>idx + 字段名</strong> 来命名：create index idx_uname_mobile on t_user_basic(uname,mobile) 。</li><li>多个单词以<strong>下划线 _ 分隔</strong>。</li><li>索引名尽量不超过50个字符，命名应该使用小写，组合索引的字段不宜太多，不然也不利于查询效率的提升。</li><li>多单词组成的列名，取尽可能代表意义的缩写，如 test_contact表member_id和friend_id上的组合索引：idx_mid_fid。</li><li><strong>理解组合索引最左前缀原则，避免重复建设索引</strong>，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。</li></ol><h4 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h4><ol><li>索引必须创建在索引选择性（区分度）较高的列上，选择性的计算方式为:  selecttivity &#x3D; count(distinct c_name)&#x2F;count(*) ;<br>如果区分度结果小于0.2，则不建议在此列上创建索引，否则大概率会拖慢SQL执行</li><li>单张表的索引数量理论上应<strong>控制在5个以内</strong>。经常有大批量插入、更新操作表，应尽量少建索引，索引建立的原则理论上是**多读少写的场景<br>**。</li><li><strong>ORDER BY，GROUP BY，DISTINCT的字段需要添加在索引的后面，形成覆盖索引</strong></li><li>联合索引注意<strong>最左匹配原则</strong>：必须按照从左到右的顺序匹配，MySQL会一直向右匹配索引直到遇到范围查询(&gt;、&lt;、between、like)<br>然后停止匹配。如：depno&#x3D;1 and empname&gt;’’ and job&#x3D;1 如果建立(depno,empname,job)顺序的索引，job是用不到索引的。</li><li>应需而取策略，查询记录的时候，<strong>不要一上来就使用</strong>*，只取需要的数据，可能的话尽量只利用索引覆盖，可以减少回表操作，提升效率。</li><li>避免索引失效的原则：<strong>禁止对索引字段使用函数、运算符操作，会使索引失效</strong>。</li><li><strong>避免非必要的类型转换</strong>，字符串字段使用数值进行比较的时候会导致索引无效。</li><li><strong>模糊查询’%value%’会使索引无效</strong>，变为全表扫描，因为无法判断扫描的区间，<strong>但是’value%’是可以有效利用索引</strong>。</li><li><strong>索引覆盖排序字段</strong>，这样可以减少排序步骤，提升查询效率</li><li><strong>尽量的扩展索引，非必要不新建索引</strong>。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li></ol><p>扩展下最左前缀</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这里创建一个索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> users (first_name, last_name);</span><br><span class="line"></span><br><span class="line"># 在这个索引中，first_name 是最左前缀。现在，当您执行类似以下的查询时，索引可以被有效地利用：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> first_name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span> <span class="keyword">AND</span> last_name <span class="operator">=</span> <span class="string">&#x27;Doe&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-SQL-查询编写规范"><a href="#5-SQL-查询编写规范" class="headerlink" title="5. SQL 查询编写规范"></a>5. SQL 查询编写规范</h2><ol><li>不允许使用<code>select *</code></li><li>查询必须加where条件，避免全表扫描</li><li>如果必须有TEXT对象，必须单独加表并关联</li><li>where条件中过滤字段严禁使用任何函数，包括数据类型转换函数</li><li>分页查询必须带排序条件</li><li>用in&#x2F;union替换or，并注意in个数小于300</li><li>如无必要不要使用%前缀进行模糊查询，避免全表查询</li><li>避免使用子查询，转为join连接</li></ol><p>子查询性能差原因</p><p><strong>「·」</strong>子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能<br>会受到一定的影响；</p><p><strong>「·」</strong>特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大；</p><p><strong>「·」</strong>由于子查询会产生大量的临时表也没有索引，所以会消耗过多的CPU和IO资源，产生大量的慢查询。</p><h2 id="6-事务管理和性能优化"><a href="#6-事务管理和性能优化" class="headerlink" title="6. 事务管理和性能优化"></a>6. 事务管理和性能优化</h2><ol><li>所有方法涉及到更新、删除、添加操作需要使用<code>@Transactional</code>注解</li><li>数据量大的情况下， 需要分批次操作</li></ol><h2 id="7-安全性考虑"><a href="#7-安全性考虑" class="headerlink" title="7. 安全性考虑"></a>7. 安全性考虑</h2><ul><li>数据库配置应当使用druid等框架对明文进行加密</li><li>避免拼接SQL</li><li>防止SQL注入��接SQL</li><li>防止SQL注入</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 开发规范 </tag>
            
            <tag> 数据库表结构 </tag>
            
            <tag> 账号权限 </tag>
            
            <tag> 表命名规范 </tag>
            
            <tag> 数据库对象设计 </tag>
            
            <tag> 表设计规范 </tag>
            
            <tag> 字段命名规范 </tag>
            
            <tag> 字段设计规范 </tag>
            
            <tag> 索引命名规范 </tag>
            
            <tag> 索引设计规范 </tag>
            
            <tag> sql查询编写规范 </tag>
            
            <tag> 事务管理 </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 安全性考虑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cmd部署HexoGithub443问题</title>
      <link href="/c46b5f05.html"/>
      <url>/c46b5f05.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy “localhost:7890”</span><br></pre></td></tr></table></figure><p>配置下代理即可&#96;<br>配置下代理即可</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> hexo </tag>
            
            <tag> cmd </tag>
            
            <tag> github </tag>
            
            <tag> 443问题 </tag>
            
            <tag> git config </tag>
            
            <tag> http.proxy </tag>
            
            <tag> 代理配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列（二）：深入解读Redis的两种持久化方式</title>
      <link href="/52275545.html"/>
      <url>/52275545.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><blockquote><p>博客地址：blog.zysicyj.top</p></blockquote><h1 id="Redis为什么要引入持久化机制"><a href="#Redis为什么要引入持久化机制" class="headerlink" title="Redis为什么要引入持久化机制"></a>Redis为什么要引入持久化机制</h1><p>Redis引入持久化机制是为了解决内存数据库的数据安全性和可靠性问题。虽然内存数据库具有高速读写的优势，但由于数据存储在内存中，一旦服务器停止或崩溃，所有数据将会丢失。持久化机制的引入旨在将内存中的数据持久化到磁盘上，从而在服务器重启后能够恢复数据，提供更好的数据保护和可靠性。</p><p>以下是持久化机制的几个主要原因：</p><p><strong>1. 数据安全和可靠性：</strong><br>通过将数据持久化到磁盘上，即使在服务器崩溃或异常停止的情况下，也可以保证数据不会丢失。持久化机制可以防止重要的数据在突发情况下遭受损失。</p><p><strong>2. 数据恢复：</strong><br>持久化机制允许在服务器重启后将数据重新加载到内存中，从而实现数据的恢复。这对于业务的连续性和可用性非常重要。</p><p><strong>3. 数据灾难恢复：</strong><br>持久化机制对于灾难恢复也很有帮助。在不幸发生硬件故障、电力中断等情况下，持久化机制可以帮助恢复数据。</p><p><strong>4. 数据迁移：</strong><br>持久化机制也有助于将数据从一个服务器迁移到另一个服务器。你可以通过备份持久化文件并在另一台服务器上进行恢复来完成数据迁移。</p><p>虽然持久化机制带来了磁盘IO和性能开销，但它为Redis提供了更强大的数据保护能力。根据应用的需求，可以根据数据的重要性和数据丢失的容忍度来选择适当的持久化方式，或者结合两种方式以提供更高的数据保护级别。</p><h1 id="Redis提供了哪些持久化机制"><a href="#Redis提供了哪些持久化机制" class="headerlink" title="Redis提供了哪些持久化机制"></a>Redis提供了哪些持久化机制</h1><p>Redis提供了两种主要的持久化机制，分别是RDB快照（Snapshotting）和AOF日志（Append-Only File）。这两种机制可以根据不同的需求和场景来选择使用。</p><p><strong>1. RDB快照（Snapshotting）：</strong><br>RDB快照是一种全量持久化方式，它会周期性地将内存中的数据以二进制格式保存到磁盘上的RDB文件。RDB文件是一个经过压缩的二进制文件，包含了数据库在某个时间点的数据快照。RDB快照有助于实现紧凑的数据存储，适合用于备份和恢复。</p><p><strong>优点：</strong></p><ul><li>RDB快照在恢复大数据集时速度较快，因为它是全量的数据快照。</li><li>由于RDB文件是压缩的二进制文件，它在磁盘上的存储空间相对较小。</li><li>适用于数据备份和灾难恢复。</li></ul><p><strong>缺点：</strong></p><ul><li>RDB快照是周期性的全量持久化，可能导致某个时间点之后的数据丢失。</li><li>在保存快照时，Redis服务器会阻塞，可能对系统性能造成影响。</li></ul><p><strong>2. AOF日志（Append-Only File）：</strong><br>AOF日志是一种追加式持久化方式，它记录了每个写操作命令，以追加的方式将命令写入AOF文件。通过重新执行AOF文件中的命令，可以重建出数据在内存中的状态。AOF日志提供了更精确的持久化，适用于需要更高数据安全性和实时性的场景。</p><p><strong>优点：</strong></p><ul><li>AOF日志可以实现更精确的数据持久化，每个写操作都会被记录。</li><li>在AOF文件中，数据可以更好地恢复，因为它保存了所有的写操作历史。</li><li>AOF日志适用于需要实时恢复数据的场景，如秒级数据恢复要求。</li></ul><p><strong>缺点：</strong></p><ul><li>AOF日志相对于RDB快照来说，可能会占用更多的磁盘空间，因为它是记录每个写操作的文本文件。</li><li>AOF日志在恢复大数据集时可能会比RDB快照慢，因为需要逐条执行写操作。</li></ul><p>根据不同的需求，可以选择RDB快照、AOF日志或两者结合使用。你可以根据数据的重要性、恢复速度要求以及磁盘空间限制来选择合适的持久化方式。有时候，也可以通过同时使用两种方式来提供更高的数据保护级别。</p><h1 id="AOF日志是如何实现的"><a href="#AOF日志是如何实现的" class="headerlink" title="AOF日志是如何实现的"></a>AOF日志是如何实现的</h1><p>首先，大家要知道，AOF是写后日志，“写后”的意思是Redis先执行命令，把数据写入内存，然后才记录日志，如下图所示：<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131424275.png" alt="Redis AOF操作过程"></p><h2 id="AOF-为什么要先执行命令再记日志呢"><a href="#AOF-为什么要先执行命令再记日志呢" class="headerlink" title="AOF 为什么要先执行命令再记日志呢"></a>AOF 为什么要先执行命令再记日志呢</h2><p>AOF（Append-Only File）持久化机制中，为什么要先执行命令再记录日志，而不是相反，这涉及到数据的一致性和持久性。</p><p>AOF的设计目标之一是保证数据的持久性，即在服务器重启后能够恢复出与重启前一致的数据状态。为了实现这个目标，AOF的操作顺序非常重要。</p><p><strong>先执行命令再记录日志的原因：</strong></p><ol><li><p><strong>数据一致性：</strong> 如果先记录日志再执行命令，假设记录日志成功而执行命令失败（例如服务器崩溃），那么日志中记录的操作实际上没有被应用，会导致数据在重启后与预期不一致。</p></li><li><p><strong>可恢复性：</strong> 先执行命令再记录日志可以保证在服务器重启后，即使在崩溃前未能将操作记录到日志中，也可以通过重新执行AOF日志中的命令，将数据恢复到正确的状态。</p></li><li><p><strong>避免日志丢失：</strong> 如果先记录日志再执行命令，如果在记录日志之前发生了服务器崩溃，会导致操作丢失，而这些操作可能已经影响了数据的一致性。</p></li></ol><p>当然，这里面还有一个非常重要的原因，<strong>它是在命令执行后才记录日志，所以不会阻塞当前的写操作</strong>。</p><p>因此，为了确保数据的持久性和一致性，Redis选择了先执行命令再记录日志的方式。这样可以保证只有在操作真正成功执行后，才会将操作记录到AOF日志中，从而在服务器重启后能够准确地重放这些操作，保持数据的正确性。</p><h2 id="AOF日志里面记录了什么内容呢"><a href="#AOF日志里面记录了什么内容呢" class="headerlink" title="AOF日志里面记录了什么内容呢"></a>AOF日志里面记录了什么内容呢</h2><p>AOF（Append-Only File）日志记录了每个写操作命令，以追加的方式将命令写入AOF文件。这些写操作命令被以一种协议格式（通常是RESP协议）写入AOF文件，以文本形式保存。下面是AOF日志中记录的内容示例：</p><p>假设执行了以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET key1 value1</span><br><span class="line">INCR key2</span><br><span class="line">LPUSH list1 item1</span><br></pre></td></tr></table></figure><p>对应的AOF日志内容可能是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*3\r\n$3\r\nSET\r\n$4\r\nkey1\r\n$6\r\nvalue1\r\n</span><br><span class="line">*2\r\n$4\r\nINCR\r\n$4\r\nkey2\r\n</span><br><span class="line">*3\r\n$5\r\nLPUSH\r\n$5\r\nlist1\r\n$5\r\nitem1\r\n</span><br></pre></td></tr></table></figure><p>在这个示例中，每个写操作都以RESP协议格式记录在AOF文件中，以一系列字节数组来表示命令和参数。每个写操作的记录由多行组成，以\r\n分隔。</p><ul><li><code>*3</code>：表示命令参数的个数为3。</li><li><code>$3\r\nSET\r\n</code>：表示第一个参数为长度为3的字符串 “SET”。</li><li><code>$4\r\nkey1\r\n</code>：表示第二个参数为长度为4的字符串 “key1”。</li><li><code>$6\r\nvalue1\r\n</code>：表示第三个参数为长度为6的字符串 “value1”。</li></ul><p>这样的记录方式允许在AOF文件中按照操作的顺序逐条重放写操作命令，从而实现数据在服务器重启后的恢复。由于AOF记录的是写操作命令本身，所以在执行AOF文件中的命令时，可以完全还原数据的状态。</p><h2 id="AOF日志潜在的问题"><a href="#AOF日志潜在的问题" class="headerlink" title="AOF日志潜在的问题"></a>AOF日志潜在的问题</h2><p>AOF（Append-Only File）写日志是Redis的持久化机制之一，它记录了每个写操作命令，以追加的方式将命令写入AOF文件。尽管AOF具有许多优点，但也存在一些风险和潜在的问题，需要注意和管理：</p><p><strong>1. 磁盘IO开销：</strong><br>AOF日志以追加写入方式工作，每次写入操作都会直接追加到AOF文件末尾。这意味着频繁的写入操作可能会导致磁盘IO开销增加，可能会影响系统的性能和响应时间。</p><p><strong>2. 磁盘空间占用：</strong><br>AOF日志记录的是每个写操作命令本身，相比于RDB快照，AOF文件可能会更大。如果写入操作频繁，AOF文件可能会不断增大，占用过多的磁盘空间。</p><p><strong>3. 数据一致性：</strong><br>尽管AOF的先执行命令再记录日志的机制保证了数据一致性，但如果在记录日志前发生服务器崩溃，尚未记录的操作可能会丢失，可能导致数据一致性问题。</p><p><strong>4. AOF文件损坏：</strong><br>由于AOF文件是以文本格式记录的命令，如果AOF文件在写入或存储过程中受到损坏，可能导致数据恢复时出现问题，甚至无法正确恢复数据。</p><p><strong>5. AOF重写耗时：</strong><br>AOF重写是为了减小AOF文件的大小，但它是一个耗时的操作，可能会对系统性能产生影响，尤其是在大数据集的情况下。</p><p><strong>6. AOF重写可能引发的问题：</strong><br>AOF重写过程中可能会因为各种原因导致数据丢失，例如中断的重写过程、文件系统问题等。在执行AOF重写时，需要谨慎对待，确保数据的完整性。</p><p><strong>7. AOF文件合并：</strong><br>在一些场景下，可能需要将多个AOF文件合并成一个，这样的操作需要小心处理，以避免数据丢失或错误。</p><p><strong>8. 硬件故障：</strong><br>虽然AOF可以提供持久性保证，但硬件故障（例如磁盘故障）可能会导致AOF文件丢失或损坏，需要适当的备份和恢复策略。</p><p>为了减轻AOF写日志带来的风险，可以采取一些措施，如选择适当的AOF同步策略、定期备份AOF文件、监控AOF文件的大小和状态、定期执行AOF重写、备份数据等。这些策略可以帮助减少潜在的问题，并提高系统的可靠性。</p><h2 id="AOF日志三种写回策略"><a href="#AOF日志三种写回策略" class="headerlink" title="AOF日志三种写回策略"></a>AOF日志三种写回策略</h2><p>AOF（Append-Only<br>File）持久化机制在Redis中有三种不同的写回（sync）策略，用于控制何时将AOF缓冲区中的写入操作刷新到磁盘上的AOF文件。这些策略决定了AOF日志的同步频率，影响了数据的持久性和性能。以下是这三种写回策略：</p><p><strong>1. always（始终同步）：</strong><br>在这个策略下，每次执行写入操作之后，Redis都会立即将写入操作刷新到磁盘，确保写入操作已经持久化。虽然这种方式能够提供最高的数据保证，但也是性能开销最大的一种方式，因为每次写入操作都会引起磁盘IO。</p><p><strong>优点：</strong></p><ul><li>最高的数据保证，即使系统崩溃，也只会丢失上一个写入操作。</li></ul><p><strong>缺点：</strong></p><ul><li>性能开销较大，频繁的磁盘IO可能影响系统的性能和响应时间。</li></ul><p><strong>2. everysec（每秒同步）：</strong><br>在这个策略下，Redis会每秒一次将AOF缓冲区中的写入操作批量刷新到磁盘上的AOF文件。这样可以在一定程度上平衡数据保证和性能。</p><p><strong>优点：</strong></p><ul><li>较高的数据保证，每秒一次的同步保证了不会丢失过多的写入操作。</li><li>性能开销相对较低，因为是每秒一次的批量刷新。</li></ul><p><strong>缺点：</strong></p><ul><li>在一秒内的操作可能会丢失。</li></ul><p><strong>3. no（不同步）：</strong><br>这个策略下，Redis不会主动将AOF缓冲区中的写入操作刷新到磁盘，而是由操作系统来决定何时将数据写入磁盘。这是性能开销最小的方式，但数据持久性相对较低。</p><p><strong>优点：</strong></p><ul><li>最小的性能开销，几乎不会影响系统的响应时间。</li><li>最高的性能表现，写入操作不会导致频繁的磁盘IO。</li></ul><p><strong>缺点：</strong></p><ul><li>数据持久性较低，如果系统崩溃，可能会丢失多个写入操作。</li></ul><p>选择合适的AOF写回策略取决于数据的重要性和性能需求。如果数据安全性最为重要，可以选择<code>always</code><br>策略。如果在数据一致性和性能之间需要平衡，可以选择<code>everysec</code><br>策略。如果对性能要求较高，而可以接受一定程度的数据丢失，可以选择<code>no</code>策略。根据实际情况，可以根据需求来配置AOF的写回策略。</p><p>这里呢给大家总结一下各种配置的优缺点<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131434405.png"></p><h2 id="日志文件太大了怎么办"><a href="#日志文件太大了怎么办" class="headerlink" title="日志文件太大了怎么办"></a>日志文件太大了怎么办</h2><p>AOF（Append-Only<br>File）重写是为了减小AOF文件的大小，避免AOF文件不断增大导致的磁盘空间占用问题。AOF重写是一种以全量的方式生成新的AOF文件，其中记录的是一个数据集的写入操作，这个数据集的大小通常比原始AOF文件小很多。</p><p>AOF重写的工作原理如下：</p><ol><li><p><strong>触发重写：</strong><br>AOF重写可以手动触发，也可以根据配置自动触发。当满足一定条件（例如AOF文件大小超过指定百分比或最小大小）时，Redis会启动AOF重写过程。</p></li><li><p><strong>后台进程启动：</strong><br>当AOF重写触发时，Redis会启动一个子进程，这个子进程会负责执行AOF重写操作。</p></li><li><p><strong>创建数据集快照：</strong><br>在子进程中，Redis会创建一个数据集的内存快照，即内存中数据在某个时间点的快照。</p></li><li><p><strong>遍历数据集：</strong><br>子进程开始遍历数据集中的键，并将写操作转换成命令序列。</p></li><li><p><strong>生成新AOF文件：</strong><br>子进程会将遍历期间生成的命令序列追加到新的AOF文件中，这个新文件是紧凑的，只包含了数据集在某个时间点的写入操作。</p></li><li><p><strong>替换原AOF文件：</strong><br>当新的AOF文件生成完成后，子进程会将原始的AOF文件替换为新的AOF文件。这一步通常很快，因为新的AOF文件相对较小。</p></li><li><p><strong>主线程继续服务：</strong><br>在AOF重写过程中，主线程仍然可以继续处理客户端请求，响应读取操作等，不会被阻塞。</p></li></ol><p>AOF重写的优势在于它可以生成一个更小、更紧凑的AOF文件，避免了不断增大的AOF文件所带来的磁盘空间和读写开销。此外，新的AOF文件只包含了写入操作，没有之前的读操作，因此它在恢复数据时不需要考虑之前的读操作。</p><p>AOF重写可以通过多种方式触发：</p><ul><li>手动触发：可以使用<code>BGREWRITEAOF</code>命令手动触发AOF重写。</li><li>自动触发：可以通过设置<code>auto-aof-rewrite-percentage</code>和<code>auto-aof-rewrite-min-size</code><br>来自动触发AOF重写。当AOF文件大小达到指定的百分比或最小大小时，Redis会自动启动AOF重写。</li></ul><p>需要注意的是，AOF重写是一个资源密集型操作，可能会影响系统的性能，特别是在大数据集的情况下。因此，在进行AOF重写时，应该考虑其对系统性能的影响，并确保系统具备足够的资源来执行重写操作。<br>下面举例说明一下：<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131436435.png" alt="AOF重写减少文件大小"><br>这里大家能看到，经过优化后，AOF日志文件会缩小很多，但是，要把整个数据库的最新数据的操作日志都写回磁盘，仍然是一个非常耗时的过程。这时，我们就要继续关注另一个问题了。</p><h2 id="重写会不会阻塞主线程？"><a href="#重写会不会阻塞主线程？" class="headerlink" title="重写会不会阻塞主线程？"></a>重写会不会阻塞主线程？</h2><p>AOF重写不会阻塞Redis的主线程。Redis的AOF重写是作为一个后台进程（子进程）来执行的，不会影响主要的服务线程。</p><p>AOF重写过程中，Redis会创建一个子进程来遍历数据集，将写操作转换为命令序列，并生成新的AOF文件。主线程仍然可以继续处理客户端请求，响应读取操作等。</p><p>这种设计使得Redis能够在不中断服务的情况下执行AOF重写，从而减少对系统的影响。但需要注意的是，虽然AOF重写不会阻塞主线程，但它仍然是一个资源密集型操作，可能会占用较多的CPU和内存资源，因此在进行AOF重写时，需要考虑系统的资源情况，避免影响其他业务操作。</p><h1 id="RDB快照是如何实现的？"><a href="#RDB快照是如何实现的？" class="headerlink" title="RDB快照是如何实现的？"></a>RDB快照是如何实现的？</h1><p>RDB（Redis<br>DataBase）是Redis的一种持久化机制，用于将数据从内存中保存到磁盘上，以便在服务器重启时恢复数据。RDB通过创建一个快照（Snapshot）来保存数据库在某个时间点的数据状态，然后将这个快照保存到磁盘上的一个二进制文件中。</p><p><strong>RDB的实现过程：</strong></p><ol><li><p><strong>创建快照：</strong><br>当RDB持久化被触发时（可以手动触发或根据配置自动触发），Redis会生成一个数据集的内存快照。这个快照包含了数据库在某个时间点的所有键值对以及相关的数据结构信息。</p></li><li><p><strong>快照数据序列化：</strong><br>在创建快照后，Redis会将快照中的数据进行序列化，将键、值、过期时间等信息按照一定的格式编码成二进制数据。</p></li><li><p><strong>保存到文件：</strong><br>将序列化后的数据保存到磁盘上的RDB文件中。RDB文件的扩展名通常为<code>.rdb</code>。</p></li><li><p><strong>持久化完成：</strong><br>一旦RDB文件保存完成，持久化过程结束。这个RDB文件包含了数据库在快照时间点的完整数据状态。</p></li></ol><p><strong>RDB的优缺点：</strong></p><p><strong>优点：</strong></p><ul><li><strong>紧凑的数据格式：</strong> RDB文件是一个二进制文件，采用了紧凑的编码格式，因此在磁盘上占用的空间相对较小。</li><li><strong>快速恢复：</strong> 在恢复数据时，通过加载RDB文件，可以快速地将数据恢复到指定时间点的状态。</li><li><strong>适用于备份和恢复：</strong> RDB文件适用于进行数据备份、迁移和灾难恢复，可以方便地复制到其他服务器上。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>数据丢失：</strong> 由于RDB是周期性的全量持久化，可能会导致某个时间点之后的数据丢失。</li><li><strong>IO开销：</strong> RDB持久化时，需要将整个数据集写入磁盘，可能在大数据集上引起IO开销，影响性能。</li><li><strong>耗时：</strong> 在生成RDB快照的过程中，如果数据集很大，可能会占用较多的CPU资源，导致短时间内的性能下降。</li></ul><p>总的来说，RDB持久化适用于需要紧凑的备份和数据迁移，以及在服务器重启时需要快速恢复数据的场景。但需要注意的是，RDB的全量持久化可能会导致某些数据的丢失，因此在选择持久化方式时需要权衡数据的重要性和性能需求。</p><h2 id="给哪些内存数据做快照？"><a href="#给哪些内存数据做快照？" class="headerlink" title="给哪些内存数据做快照？"></a>给哪些内存数据做快照？</h2><p>在RDB持久化中，Redis会对内存中的各种数据进行快照，将数据保存到RDB文件中。这些内存数据包括：</p><ol><li><p><strong>字符串类型数据：</strong> 包括使用<code>SET</code>命令设置的字符串键值对。</p></li><li><p><strong>哈希表（Hash）：</strong> 包括使用<code>HSET</code>、<code>HMSET</code>等命令设置的哈希键值对。</p></li><li><p><strong>列表（List）：</strong> 包括使用<code>LPUSH</code>、<code>RPUSH</code>等命令添加的列表元素。</p></li><li><p><strong>集合（Set）：</strong> 包括使用<code>SADD</code>等命令添加的集合元素。</p></li><li><p><strong>有序集合（Sorted Set）：</strong> 包括使用<code>ZADD</code>等命令添加的有序集合元素。</p></li><li><p><strong>Bitmaps、HyperLogLogs、Streams：</strong> 包括这些特殊数据类型的内容。</p></li><li><p><strong>过期时间：</strong> 快照会记录每个键的过期时间，以便在恢复数据时进行过期判断。</p></li><li><p><strong>数据库配置：</strong> 包括数据库的配置信息，如数据库编号、键空间的选项等。</p></li><li><p><strong>服务器信息：</strong> 包括服务器的信息，如版本号、运行模式等。</p></li><li><p><strong>客户端连接信息：</strong> 包括客户端连接的信息。</p></li></ol><p>需要注意的是，RDB持久化是一种全量持久化机制，它会在某个时间点生成一个数据库的快照，将所有内存中的数据保存到RDB文件中。这种方式有一些优点，如紧凑的数据格式和快速恢复，但也有缺点，如可能造成数据丢失和IO开销。在选择使用RDB持久化时，需要权衡这些优缺点，根据业务需求来确定是否适合使用。</p><h2 id="哪些命令能生成RDB文件？"><a href="#哪些命令能生成RDB文件？" class="headerlink" title="哪些命令能生成RDB文件？"></a>哪些命令能生成RDB文件？</h2><p>RDB文件是通过执行持久化操作来生成的，而不是通过特定的命令来生成。在Redis中，可以手动触发RDB持久化操作，也可以根据配置自动触发。以下是生成RDB文件的方式：</p><ol><li><p><strong>手动触发：</strong><br>使用<code>SAVE</code>命令可以手动触发RDB持久化操作，该命令会<strong>阻塞服务器</strong>的主线程，直到RDB文件生成完成为止。这个命令适合用于测试或紧急情况下的数据备份。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>后台触发：</strong><br>使用<code>BGSAVE</code>命令可以在后台触发RDB持久化操作，这个命令会派生一个子进程来执行RDB持久化，<strong>不会阻塞服务器</strong><br>的主线程。这是比较常用的生成RDB文件的方式。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BGSAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>自动触发：</strong><br>可以通过配置文件中的参数来自动触发RDB持久化操作。在配置文件（redis.conf）中可以设置<code>save</code>参数，用于指定在何时执行RDB持久化操作，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>这表示当900秒内至少发生1次写操作、300秒内至少发生10次写操作、60秒内至少发生10000次写操作时，自动触发BGSAVE命令。</p></li></ol><p>无论是手动触发还是后台触发，RDB持久化操作都会生成一个RDB文件，其中包含了内存中的数据快照。需要注意的是，RDB持久化是一个资源密集型操作，可能会影响服务器的性能，特别是在数据集较大的情况下。因此，在选择何时执行RDB持久化时，需要根据业务需求和性能要求做出权衡。</p><h2 id="快照时数据能修改吗？"><a href="#快照时数据能修改吗？" class="headerlink" title="快照时数据能修改吗？"></a>快照时数据能修改吗？</h2><p>这里大家可能会想到<code>bgsave</code>命令避免阻塞。这里大家可能会有误区，<strong>避免阻塞和正常处理读写请求并不是一回事</strong><br>。此时，主线程确实没有阻塞，可以正常接收请求，但是，为了保证快照完整性，它只能处理读操作，因为不能修改正在执行快照的数据。<br>那么Redis是如何解决这个问题的呢？<br>实际上，Redis 6.0 版本引入了<strong>写时复制（Copy-On-Write，COW）技术</strong>来保证在执行快照（RDB）时数据是可修改的。这个特性被称为 “<br>RDB快照时复制”（RDB Snapshotting）。</p><p>在 Redis 6.0 中，当进行 RDB 快照持久化时，Redis 会执行以下步骤来确保数据可修改：</p><ol><li>Redis 创建一个子进程。</li><li>在子进程中，将内存中的数据进行写时复制，创建出一个副本，而不会影响主进程的数据。</li><li>子进程将副本数据写入 RDB 文件，这个过程是在子进程的上下文中执行的，不会影响主进程。</li></ol><blockquote></blockquote><p>这个操作在实际执行过程中，是子进程复制了主线程的页表，所以通过页表映射，能读到主线程的原始数据，而当有新数据写入或数据修改时，主线程会把新数据或修改后的数据写到一个新的物理内存地址上，并修改主线程自己的页表映射。所以，子进程读到的类似于原始数据的一个副本，而主线程也可以正常进行修改。</p><p>因此，RDB 快照时，主进程仍然可以继续处理写操作，而子进程则负责将数据写入 RDB 文件。这样，写时复制技术确保了在生成 RDB<br>快照期间，数据是可修改的，同时保持了数据的一致性。</p><p>需要注意的是，这种特性仅适用于 Redis 6.0 及以上版本，并且在 RDB 快照时起作用。在生成 AOF 文件时，Redis 仍然会阻塞主线程以确保数据一致性。<br><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308131501799.png" alt="写时复制机制保证快照期间数据可修改"></p><h2 id="可以每秒做一次快照吗"><a href="#可以每秒做一次快照吗" class="headerlink" title="可以每秒做一次快照吗"></a>可以每秒做一次快照吗</h2><p>虽然理论上可以每秒钟做一次快照（RDB持久化），但实际上这样做可能会对Redis服务器的性能产生显著的影响，特别是在负载较重的情况下。</p><p>每秒钟生成快照会引起以下一些问题：</p><ol><li><p><strong>性能开销：</strong> 快照操作需要遍历内存中的所有数据，并将数据序列化到磁盘中。频繁的快照操作会占用大量的CPU和内存资源，影响服务器的性能，导致响应时间变长。</p></li><li><p><strong>IO压力：</strong> 每秒钟生成的快照会导致频繁的磁盘写入，增加了磁盘IO的负担，可能影响其他应用程序和操作系统的正常运行。</p></li><li><p><strong>数据丢失：</strong> 每秒钟生成的快照可能会导致数据丢失，因为生成快照的操作需要一定的时间，如果在两次快照之间发生了写操作，那么这段时间内的数据会丢失。</p></li></ol><p>通常情况下，每秒钟生成快照并<strong>不是一个推荐的做法</strong><br>。更合理的做法是根据业务需求和系统资源来选择合适的持久化频率。如果数据的一致性要求很高，可以考虑使用AOF持久化机制，它可以在不同程度上提供数据的保护和持久性，而且可以通过设置不同的写回策略来平衡性能和数据保护。如果数据的一致性要求相对较低，可以选择适当的RDB持久化频率，避免频繁的IO和性能开销。</p><h1 id="为什么推荐AOF和RDB混合使用"><a href="#为什么推荐AOF和RDB混合使用" class="headerlink" title="为什么推荐AOF和RDB混合使用"></a>为什么推荐AOF和RDB混合使用</h1><p>推荐在Redis中同时使用AOF（Append-Only File）持久化和RDB（Redis DataBase）持久化的原因是，这两种持久化机制可以相互补充，提供更好的数据保护、恢复能力和性能优化。</p><p>以下是推荐同时使用AOF和快照的主要原因：</p><ol><li><p><strong>数据恢复能力：</strong><br>AOF持久化记录了所有写操作的日志，这使得在发生意外情况时（如服务器崩溃）可以精确地恢复数据到崩溃前的状态。而RDB持久化通过全量快照提供了快速的数据恢复能力。结合使用两者，可以在AOF日志的基础上，通过加载最近的RDB快照来加速恢复。</p></li><li><p><strong>数据安全性：</strong> AOF持久化记录了每个写操作，可以确保每个写操作都被持久化到日志中。RDB持久化则提供了一个点对点的数据备份。同时使用这两种持久化机制可以提供更高的数据安全性。</p></li><li><p><strong>性能优化：</strong> AOF持久化对于读操作的性能影响较小，因为读操作不涉及AOF文件的写入。而RDB持久化对于快速的全量数据恢复很有帮助。通过结合使用AOF和RDB，可以在一定程度上平衡数据保护和性能要求。</p></li><li><p><strong>多层次的备份：</strong> 使用AOF和RDB，您可以获得多层次的数据备份。AOF日志可以提供精确的操作日志，RDB快照可以提供全量备份。这样，即使其中一个持久化机制出现问题，另一个仍然可以提供数据保护。</p></li></ol><p>综上所述，使用AOF和RDB两种持久化机制的组合，能够提供更全面的数据保护、灾难恢复和性能优化。在配置Redis持久化时，根据业务需求和性能要求，结合使用这两种机制，可以实现更好的数据管理和保护。</p><h2 id="如何配置呢"><a href="#如何配置呢" class="headerlink" title="如何配置呢"></a>如何配置呢</h2><p>在 Redis 中，同时使用 AOF 持久化和 RDB 持久化的配置是很常见的，这样可以兼顾数据的持久性和恢复性能。以下是一个将 AOF 持久化和<br>RDB 持久化混合使用的示例配置：</p><ol><li><p>打开 Redis 配置文件，通常是 <code>redis.conf</code>。</p></li><li><p>启用 AOF 持久化：<br>找到以下行并确保其被设置为以下值，以启用 AOF 持久化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>设置 AOF 重写策略（可选）：<br>可以设置 AOF 重写的触发条件，以便控制 AOF 文件的大小和写入频率。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure></li><li><p>启用 RDB 持久化：<br>默认情况下，Redis 会使用 RDB 持久化，但要确保以下行没有被注释掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li><li><p>设置 RDB 快照文件名（可选）：<br>如果希望为 RDB 快照指定特定的文件名，可以添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><p>这会将 RDB 快照文件命名为 <code>dump.rdb</code>。</p></li><li><p>设置 RDB 快照保存路径（可选）：<br>如果希望将 RDB 快照保存到特定的路径，可以添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /path/to/rdb/directory</span><br></pre></td></tr></table></figure><p>这会将 RDB 快照保存到指定的目录。</p></li><li><p>重启 Redis 服务器：<br>在对配置文件进行更改后，需要重新启动 Redis 服务器，以使配置生效。</p></li></ol><p>使用以上配置，Redis 将同时使用 AOF 持久化和 RDB 持久化，提供了多层次的数据保护和恢复机制。AOF 持久化记录写操作，提供操作日志用于数据恢复。RDB<br>持久化提供了全量备份，用于快速恢复整个数据集。混合使用这两种机制可以充分利用它们各自的优点，提供更全面的数据持久性和保护。</p><h1 id="关于AOF和RDB的选择，三点建议"><a href="#关于AOF和RDB的选择，三点建议" class="headerlink" title="关于AOF和RDB的选择，三点建议"></a>关于AOF和RDB的选择，三点建议</h1><ul><li>数据不能丢失时，内存快照和 AOF 的混合使用是一个很好的选择；</li><li>如果允许分钟级别的数据丢失，可以只使用 RDB；</li><li>如果只用 AOF，优先使用 everysec 的配置选项，因为它在可靠性和性能之间取了一个平衡。��能之间取了一个平衡。</li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> rdb </tag>
            
            <tag> aof </tag>
            
            <tag> 快照 </tag>
            
            <tag> 写时复制 </tag>
            
            <tag> 持久化策略 </tag>
            
            <tag> aof重写 </tag>
            
            <tag> 数据恢复 </tag>
            
            <tag> 数据安全性 </tag>
            
            <tag> aof和rdb混合使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列（一）：深入了解Redis数据类型和底层数据结构</title>
      <link href="/84392d3f.html"/>
      <url>/84392d3f.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><p>Redis有以下几种常用的数据类型：</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/image.png"></p><h2 id="redis数据是如何组织的"><a href="#redis数据是如何组织的" class="headerlink" title="redis数据是如何组织的"></a>redis数据是如何组织的</h2><p>为了实现从键到值的快速访问，Redis 使用了一个哈希表来保存所有键值对。</p><p>Redis全局哈希表（Global Hash Table）是指在Redis数据库内部用于存储所有键值对的主要数据结构。它的实现原理涉及到哈希表、字典、渐进式rehash等技术，以下是Redis全局哈希表的实现原理和查询流程：</p><p><strong>实现原理：</strong></p><ol><li><p><strong>哈希表（Hash Table）：</strong></p><p>Redis的全局哈希表是由多个哈希表构成的，每个哈希表称为一个数据库（DB）。数据库的数量可以通过配置进行设置，默认是16个。每个数据库都是一个独立的哈希表，负责存储键值对。</p></li><li><p><strong>字典（Dictionary）：</strong></p><p>每个数据库都使用字典（Dictionary）来实现键值对的存储。字典是一种高效的键值对存储结构，它使用哈希表来支持快速的查找、插入和删除操作。</p></li><li><p><strong>渐进式rehash：</strong></p><p>当数据库的键值对数量较多时，为了保持查询性能，Redis会在不中断服务的情况下，逐步将旧的数据库哈希表中的数据迁移到新的数据库哈希表中，这个过程叫做渐进式rehash。这样，Redis能够平滑地将数据从旧的哈希表迁移到新的哈希表，避免大规模的数据迁移对性能造成影响。</p></li></ol><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121104358.png"></p><p><strong>查询流程：</strong></p><ol><li>客户端发送查询命令，指定要查询的键。</li><li>Redis会根据键通过哈希函数计算哈希槽（hash slot）的索引，确定键在哪个数据库中。</li><li>Redis根据数据库的哈希表，找到对应的字典。</li><li>在字典中，Redis使用键进行查找，通过哈希表查找对应的值。如果找到了值，则将其返回给客户端。</li><li>如果键在当前数据库没有找到对应的值，Redis可以根据需要进行跳转到其他数据库（例如在Redis集群中）。</li></ol><p>整个查询流程涉及到多次哈希计算和哈希表查找，这使得Redis能够在平均时间复杂度为O(1)<br>的情况下，高效地进行键值对的查询操作。由于Redis的全局哈希表是一个核心组件，其优化和设计对于保障Redis的性能和可用性非常重要。</p><p>如果你只是了解了哈希表的 O(1) 复杂度和快速查找特性，那么，当你往 Redis<br>中写入大量数据后，就可能发现操作有时候会突然变慢了。这其实是因为你忽略了一个潜在的风险点，那就是哈希表的冲突问题和 rehash<br>可能带来的操作阻塞。</p><p><strong>为什么哈希表操作变慢了？</strong></p><p>Redis 解决哈希冲突的方式，就是链式哈希。链式哈希也很容易理解，就是指同一个哈希桶中的多个元素用一个链表来保存，它们之间依次用指针连接。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121106905.png"></p><p>哈希冲突是指在使用哈希函数将键映射到哈希表中的索引时，两个或多个键被映射到相同的索引位置。在Redis中，哈希表是通过哈希函数将键映射到一个固定数量的桶（bucket）中的。</p><p>Redis使用MurmurHash2算法作为默认的哈希函数，它是一种快速且低碰撞率的哈希函数。然而，即使使用了高质量的哈希函数，仍然存在哈希冲突的可能性。</p><p>当发生哈希冲突时，Redis使用链地址法（chaining）来解决。具体来说，每个桶中存储的是一个链表，链表中的每个节点都包含了键值对。当多个键被映射到同一个桶时，它们会被添加到链表中，形成一个键值对的集合。</p><p>当执行哈希表的读取操作时，Redis会遍历链表，直到找到匹配的键值对或者链表结束。这个过程的时间复杂度取决于链表的长度，因此，如果哈希冲突较多，链表会变得很长，导致读取操作的性能下降。</p><p><strong>为了减少哈希冲突的发生，可以采取以下措施：</strong></p><ol><li>使用更好的哈希函数：选择一个更具随机性和低碰撞率的哈希函数，可以减少哈希冲突的概率。</li><li>扩大哈希表的大小：增加哈希表的桶数量，可以分散键的分布，减少哈希冲突的可能性。</li><li>使用一致性哈希算法：一致性哈希算法可以将键均匀地映射到多个节点上，减少单个节点上的哈希冲突。</li></ol><p>哈希冲突是不可避免的，但可以通过选择合适的哈希函数和调整哈希表的大小来减少其发生的概率，并且Redis的链地址法能够有效地解决哈希冲突带来的问题。</p><p>但是，这里依然存在一个问题，哈希冲突链上的元素只能通过指针逐一查找再操作。如果哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。对于追求“快”的<br>Redis 来说，这是不太能接受的。</p><p>所以，Redis 会对哈希表做 rehash 操作。rehash 也就是增加现有的哈希桶数量，让逐渐增多的 entry<br>元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。</p><p><strong>那具体怎么做rehash呢？</strong></p><p>Redis的rehash是指在哈希表扩容或缩小时，重新计算并重新分配所有键值对的过程。rehash的目的是为了保持哈希表的负载因子在一个合理的范围内，以提高哈希表的性能。</p><p>在Redis中，rehash是一个渐进式的过程，它不会一次性地将所有键值对重新分配到新的哈希表中，而是分多次进行，每次处理一小部分键值对。这种渐进式的rehash过程可以保证在rehash期间，Redis仍然可以正常处理读取和写入操作，不会阻塞客户端请求。</p><p><strong>具体的rehash过程</strong>如下：</p><ol><li>Redis会创建一个新的空哈希表，大小是当前哈希表的两倍（或更小，如果是缩小操作）。</li><li>Redis会将当前哈希表的rehashidx属性设置为0，表示rehash的起始位置。</li><li>在每次执行读取或写入操作时，Redis会同时对当前哈希表和新哈希表进行操作。</li><li>对于读取操作，Redis首先在当前哈希表中查找键值对，如果找不到，则继续在新哈希表中查找。</li><li>对于写入操作，Redis会将新的键值对添加到新哈希表中，同时保留当前哈希表中的键值对。</li><li>在每次执行完一定数量的操作后，Redis会逐步将当前哈希表中的键值对迁移到新哈希表中，直到迁移完成。</li><li>最后，Redis会将新哈希表设置为当前哈希表，并释放旧的哈希表的内存空间。</li></ol><p>通过<strong>渐进式的rehash过程</strong><br>，Redis可以平滑地将键值对从旧哈希表迁移到新哈希表，避免了一次性的大规模迁移带来的性能问题。同时，由于读取操作可以同时在两个哈希表中进行，所以即使在rehash过程中，Redis仍然可以提供正常的读取服务。</p><p>需要注意的是，rehash过程是一个相对耗时的操作，特别是在哈希表中存储了大量键值对的情况下。因此，在进行rehash时，应该避免对Redis进行大量的写入操作，以免影响性能。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121115732.png"></p><h2 id="底层实现复杂度总结"><a href="#底层实现复杂度总结" class="headerlink" title="底层实现复杂度总结"></a>底层实现复杂度总结</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121119851.png"></p><h2 id="一、字符串（String）"><a href="#一、字符串（String）" class="headerlink" title="一、字符串（String）"></a>一、字符串（String）</h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>字符串（String）类型在Redis中是最常用的数据类型之一，适用于以下场景：</p><ol><li>缓存：字符串类型可以用于缓存数据，例如缓存数据库查询结果、计算结果等。由于Redis的高性能和快速读写能力，使用字符串类型作为缓存可以大大提高系统的响应速度。</li><li>计数器：字符串类型可以用于实现计数器功能，例如统计网站的访问次数、用户的点赞数等。通过使用字符串类型的自增命令，可以方便地对计数器进行增加或减少操作。</li><li>分布式锁：字符串类型可以用于实现分布式锁，保证在分布式环境下的数据一致性和并发控制。通过设置一个唯一的字符串作为锁的值，并利用Redis的原子性操作，可以实现简单而高效的分布式锁机制。</li><li>会话管理：字符串类型可以用于存储用户的会话信息，例如用户登录状态、购物车内容等。通过将会话信息存储在字符串类型中，可以方便地进行读写操作，并且可以设置过期时间来自动清理过期的会话数据。</li><li>消息队列：字符串类型可以用于实现简单的消息队列，例如将消息内容作为字符串存储在Redis中，然后使用列表类型的命令进行消息的发布和订阅。</li><li>分布式缓存：字符串类型可以用于实现分布式缓存，例如将经过序列化的对象存储在字符串类型中，然后通过缓存命中来提高系统的性能和扩展性。</li></ol><h3 id="底层实现是什么"><a href="#底层实现是什么" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>当我们在Redis中存储字符串时，Redis使用了一种称为简单动态字符串（Simple Dynamic String，SDS）的数据结构来表示字符串。</p><p>SDS是Redis自己实现的一种字符串表示方式，相比于传统的C语言字符串，SDS具有许多优势和特点。</p><ol><li>动态调整大小：SDS可以根据字符串的长度动态调整内存大小。这意味着当我们向SDS中添加更多的字符时，SDS会自动分配更多的内存空间来容纳新的字符，而不需要手动管理内存分配和释放。这样可以避免频繁的内存重新分配操作，提高了性能。</li><li>O(1)时间复杂度的长度获取：SDS在内部维护了字符串的长度信息。因此，无论字符串的长度是多少，我们都可以在常数时间内获取字符串的长度，而不需要遍历整个字符串。这使得获取字符串长度的操作非常高效。</li><li>二进制安全：SDS可以存储任意二进制数据，而不仅仅局限于文本字符串。这意味着我们可以在SDS中存储包含空字符（’\0’<br>）在内的任意二进制数据，而不会导致字符串的截断或错误解析。</li><li>缓冲区溢出保护：SDS在内部维护了字符串的长度信息，这使得Redis能够有效地防止缓冲区溢出的问题。当我们向SDS中添加新的字符时，Redis会检查是否有足够的空间来容纳新的字符，如果没有足够的空间，Redis会自动分配更多的内存空间，以避免溢出。</li><li>兼容C字符串：SDS可以通过转换函数与C字符串进行互相转换。这意味着我们可以在Redis中使用SDS来存储字符串，然后将其转换为C字符串，以便与现有的C代码进行交互。反之，我们也可以将C字符串转换为SDS，以便在Redis中使用更多的字符串操作功能。</li></ol><p>SDS的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> len;        <span class="comment">// 字符串的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">free</span>;       <span class="comment">// 未使用的字节长度</span></span><br><span class="line">    <span class="type">char</span> buf[];     <span class="comment">// 字符串的实际内容</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，<code>len</code>表示字符串的长度，<code>free</code>表示未使用的字节长度，<code>buf</code>是一个柔性数组，用于存储字符串的实际内容。</p><p>通过使用简单动态字符串作为底层数据结构，Redis能够高效地处理字符串操作，并提供了丰富的字符串操作命令和功能。这使得Redis成为一个强大的键值存储系统，可以用于各种不同的应用场景。作为新手，了解SDS的特点和结构将有助于你更好地理解和使用Redis中的字符串数据类型。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>要在Redis中使用字符串类型，你可以使用以下命令：</p><ol><li>设置字符串值：使用<code>SET</code>命令可以设置一个字符串键的值。例如，<code>SET key value</code>将键<code>key</code>的值设置为<code>value</code>。</li><li>获取字符串值：使用<code>GET</code>命令可以获取一个字符串键的值。例如，<code>GET key</code>将返回键<code>key</code>的值。</li><li>自增&#x2F;自减操作：使用<code>INCR</code>命令可以将一个字符串键的值自增1，使用<code>DECR</code>命令可以将一个字符串键的值自减1。例如，<code>INCR key</code><br>将键<code>key</code>的值增加1。</li><li>设置过期时间：使用<code>EXPIRE</code>命令可以为一个字符串键设置过期时间，单位为秒。例如，<code>EXPIRE key seconds</code>将键<code>key</code><br>的过期时间设置为<code>seconds</code>秒。</li><li>批量操作：使用<code>MSET</code>命令可以同时设置多个字符串键的值，使用<code>MGET</code>命令可以同时获取多个字符串键的值。</li><li>字符串拼接：使用<code>APPEND</code>命令可以将指定字符串追加到一个字符串键的值的末尾。</li><li>其他操作：Redis还提供了许多其他的字符串操作命令，如获取子字符串、获取字符串长度、设置指定位置的字符等。</li></ol><p>以下是一些示例命令的用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET name <span class="string">&quot;John&quot;</span>          // 设置键为name的值为<span class="string">&quot;John&quot;</span></span><br><span class="line">GET name                 // 获取键为name的值</span><br><span class="line">INCR counter             // 将键为counter的值自增1</span><br><span class="line">EXPIRE key 60            // 设置键为key的过期时间为60秒</span><br><span class="line">MSET key1 value1 key2 value2   // 同时设置多个键值对</span><br><span class="line">MGET key1 key2           // 同时获取多个键的值</span><br><span class="line">APPEND greeting <span class="string">&quot;, welcome!&quot;</span>   // 将<span class="string">&quot;, welcome!&quot;</span>追加到键greeting的值的末尾</span><br></pre></td></tr></table></figure><p>通过使用这些命令，你可以在Redis中灵活地操作字符串类型，实现各种功能和应用场景。记得在使用字符串类型时，根据具体需求选择合适的命令和参数，并注意处理异常情况和错误返回值。</p><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的字符串类型时，有一些需要注意的地方：</p><ol><li>字符串长度限制：Redis的字符串类型最大可以存储512MB的数据。如果需要存储更大的数据，可以考虑使用Redis的其他数据类型或将数据分片存储。</li><li>数据类型转换：当使用字符串类型时，需要注意数据类型的转换。Redis的字符串类型是二进制安全的，可以存储任意二进制数据，但在使用时需要根据具体情况进行数据的序列化和反序列化。</li><li>过期时间设置：通过使用<code>EXPIRE</code>命令可以为字符串键设置过期时间，但需要注意过期时间的合理设置。过期时间过短可能导致频繁的数据失效和重新加载，过期时间过长可能导致数据过期不及时。</li><li>内存使用：由于Redis是内存数据库，使用字符串类型时需要注意内存的使用情况。特别是在存储大量字符串数据时，需要合理控制内存的分配和释放，避免出现内存溢出的问题。</li><li>并发操作：在多线程或多进程环境下使用字符串类型时，需要注意并发操作的问题。Redis提供了原子性操作命令，如自增、自减等，可以保证操作的原子性，但需要注意并发操作可能导致的数据竞争和一致性问题。</li><li>键的命名规范：为了避免键的冲突和混淆，建议在命名字符串键时使用有意义的、具有一定规范的命名方式，以便更好地管理和维护数据。</li><li>数据备份和持久化：Redis提供了数据持久化的机制，可以将数据保存到磁盘上，以防止数据丢失。在使用字符串类型时，可以考虑定期进行数据备份和持久化操作，以保证数据的安全性和可恢复性。</li></ol><p>总之，在使用Redis的字符串类型时，需要根据具体的应用场景和需求，合理选择命令和参数，并注意处理异常情况和错误返回值。同时，合理规划和管理数据，注意内存使用和并发操作，可以更好地利用Redis的字符串类型，提高系统的性能和可靠性。</p><h2 id="二、列表（List）"><a href="#二、列表（List）" class="headerlink" title="二、列表（List）"></a>二、列表（List）</h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><p>列表（List）类型在Redis中是一种非常常用的数据类型，适用于以下场景：</p><ol><li>消息队列：列表类型可以用于实现简单的消息队列。生产者可以使用<code>LPUSH</code>命令将消息添加到列表的头部，消费者可以使用<code>RPOP</code><br>命令从列表的尾部获取消息。这种方式可以实现先进先出（FIFO）的消息处理。</li><li>实时排行榜：列表类型可以用于实现实时排行榜。例如，可以使用<code>LPUSH</code>命令将用户的得分添加到列表中，然后使用<code>LPOP</code>命令获取排行榜的前几名。</li><li>任务队列：列表类型可以用于实现任务队列。生产者可以使用<code>LPUSH</code>命令将任务添加到列表的尾部，消费者可以使用<code>RPOP</code><br>命令从列表的头部获取任务。这种方式可以实现任务的分发和处理。</li><li>消息发布与订阅：列表类型可以用于实现简单的消息发布与订阅。生产者可以使用<code>LPUSH</code><br>命令将消息添加到列表的头部，订阅者可以使用<code>BLPOP</code>命令阻塞地从列表中获取消息。</li><li>历史记录：列表类型可以用于存储历史记录。例如，可以使用<code>LPUSH</code>命令将用户的浏览记录添加到列表中，然后使用<code>LRANGE</code><br>命令获取最近的浏览记录。</li></ol><h3 id="底层实现是什么-1"><a href="#底层实现是什么-1" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>当涉及到Redis中列表类型的底层实现时，有两种可能的数据结构：压缩列表（Ziplist）和双向链表（Doubly Linked List）。</p><ol><li><p>压缩列表（Ziplist）：</p><p>压缩列表是一种紧凑的数据结构，用于存储较小的列表。它将多个列表元素紧密地存储在一起，以减少内存的使用。压缩列表的结构如下：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;zlbytes&gt;&lt;zltail&gt;&lt;zllen&gt;&lt;entry&gt;&lt;entry&gt;...&lt;entry&gt;&lt;zlend&gt;</span></span><br></pre></td></tr></table></figure><pre><code>- `&lt;zlbytes&gt;`：表示压缩列表的总字节数。- `&lt;zltail&gt;`：指向压缩列表的最后一个节点。- `&lt;zllen&gt;`：表示压缩列表中的元素数量。- `&lt;entry&gt;`：表示每个列表元素的存储形式，包括元素长度和元素内容。- `&lt;zlend&gt;`：表示压缩列表的结束标志。压缩列表的优势在于它可以在一定程度上减少内存的使用，并且对于较小的列表，它的性能比双向链表更好。但是，当列表的长度或元素的大小超过一定限制时，Redis会自动将压缩列表转换为双向链表。</code></pre><ol start="2"><li><p>双向链表（Doubly Linked List）：</p><p>双向链表是一种常见的数据结构，用于存储列表元素。每个节点都包含一个指向前一个节点和后一个节点的指针。双向链表的结构如下：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;prev&gt;&lt;entry&gt;&lt;next&gt;</span></span><br></pre></td></tr></table></figure><pre><code>- `&lt;prev&gt;`：指向前一个节点的指针。- `&lt;entry&gt;`：表示节点中存储的列表元素。- `&lt;next&gt;`：指向后一个节点的指针。双向链表的优势在于它可以高效地进行插入、删除和遍历操作。通过指针，可以快速地在链表中移动，并且在任意位置插入或删除节点的开销较小。</code></pre><p>Redis在选择使用压缩列表还是双向链表作为列表的底层实现时，会根据以下两个因素进行判断：</p><ul><li>列表的长度：当列表的长度超过一定限制（默认为512个元素）时，Redis会将压缩列表转换为双向链表，以便更好地处理大型列表。</li><li>列表元素的大小：当列表中的元素大小超过一定限制（默认为64字节）时，Redis会将压缩列表转换为双向链表，以便更好地处理大型元素。</li></ul><p>转换时机是在执行插入或删除操作时进行检查的。如果列表满足转换条件，Redis会自动将压缩列表转换为双向链表，并将数据从压缩列表复制到新的双向链表中。这个转换过程可能会导致一些额外的内存开销，但它使得Redis能够更好地处理大型列表和大型元素。</p><p>通过使用压缩列表和双向链表作为底层实现，Redis的列表类型可以在不同的场景下提供高效的性能和灵活性。</p><h3 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h3><p>在Redis中，可以使用列表（List）类型进行以下操作：</p><ol><li>添加元素：<ul><li>使用<code>LPUSH key value</code>命令将一个或多个元素添加到列表的头部。</li><li>使用<code>RPUSH key value</code>命令将一个或多个元素添加到列表的尾部。</li></ul></li><li>弹出元素：<ul><li>使用<code>LPOP key</code>命令从列表的头部弹出并返回一个元素。</li><li>使用<code>RPOP key</code>命令从列表的尾部弹出并返回一个元素。</li></ul></li><li>获取元素：<ul><li>使用<code>LINDEX key index</code>命令获取列表中指定位置的元素。索引从0开始，负数表示从尾部开始计数。</li><li>使用<code>LRANGE key start stop</code>命令获取列表中指定范围的元素。范围包括起始位置和结束位置，负数表示从尾部开始计数。</li></ul></li><li>获取列表长度：<ul><li>使用<code>LLEN key</code>命令获取列表的长度。</li></ul></li><li>在指定元素前或后插入元素：<ul><li>使用<code>LINSERT key BEFORE|AFTER pivot value</code>命令在列表中指定元素的前或后插入一个元素。</li></ul></li><li>移除指定数量的元素：<ul><li>使用<code>LREM key count value</code>命令从列表中移除指定数量的匹配元素。</li></ul></li><li>获取并设置指定位置的元素：<ul><li>使用<code>LSET key index value</code>命令将列表中指定位置的元素设置为新的值，并返回旧的值。</li></ul></li><li>获取并移动元素：<ul><li>使用<code>RPOPLPUSH source destination</code>命令从一个列表的尾部弹出一个元素，并将它添加到另一个列表的头部。</li></ul></li><li>阻塞弹出元素：<ul><li>使用<code>BLPOP key1 key2 ... timeout</code>命令阻塞地从多个列表中弹出元素，直到有元素可弹出或超时。</li></ul></li></ol><p>这些是列表类型的一些常用操作，可以根据具体的需求选择适合的命令来操作列表。列表类型在Redis中非常灵活和多用途，适用于各种场景，包括消息队列、排行榜、任务队列、消息发布与订阅、历史记录等。</p><h3 id="需要注意的地方-1"><a href="#需要注意的地方-1" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis中的列表数据类型时，有一些注意事项和最佳实践，特别是对于新手来说。以下是一些使用Redis列表时需要注意的地方：</p><ol><li><p><strong>插入顺序和重复：</strong></p><p>列表是有序的数据结构，插入的元素按照插入的顺序排列。允许插入重复的元素，因此列表可以作为一个简单的数据结构来实现队列或栈。</p></li><li><p><strong>左右插入操作：</strong></p><p>Redis提供了 <code>LPUSH</code> 和 <code>RPUSH</code> 命令来在列表的左侧和右侧插入元素。左侧插入类似于栈的操作，右侧插入类似于队列的操作。</p></li><li><p><strong>范围操作：</strong></p><p>使用 <code>LRANGE</code> 命令可以获取列表中的一定范围的元素。这对于分页显示、获取最近的数据等场景非常有用。</p></li><li><p><strong>修剪列表：</strong></p><p>使用 <code>LTRIM</code> 命令可以修剪列表，只保留指定范围的元素，其余的元素会被删除。</p></li><li><p><strong>列表长度：</strong></p><p>使用 <code>LLEN</code> 命令可以获取列表的长度。</p></li><li><p><strong>弹出元素：</strong></p><p>使用 <code>LPOP</code> 和 <code>RPOP</code> 命令可以从列表的左侧和右侧弹出一个元素。这可以用于实现队列和栈的行为。</p></li><li><p><strong>阻塞操作：</strong></p><p>Redis还提供了阻塞版本的弹出操作，例如 <code>BLPOP</code> 和 <code>BRPOP</code>，这些命令可以在列表为空时阻塞等待新元素的到来。</p></li><li><p><strong>遍历操作：</strong></p><p>Redis并没有直接提供像迭代器一样的遍历机制，因此如果需要遍历列表，需要自己实现。</p></li><li><p><strong>内存注意：</strong></p><p>列表虽然很方便，但随着元素的增加，内存占用也会增加。在插入大量元素时要注意内存消耗。</p></li><li><p><strong>不适合大型列表：</strong></p><p>Redis的列表是基于链表实现的，对于大型列表的随机访问效率较低，如果需要频繁的随机访问，请考虑其他数据结构。</p></li><li><p><strong>避免滥用：</strong></p><p>列表适用于有序插入和删除的场景，但不适合用作集合数据的存储。如果需要集合操作，可以考虑使用集合（Set）数据类型。</p></li></ol><p>总之，使用Redis列表时需要根据具体的业务需求和场景来选择。了解Redis列表的特点和限制，可以帮助你更好地规划和使用这一数据类型。</p><h2 id="三、集合（Set）"><a href="#三、集合（Set）" class="headerlink" title="三、集合（Set）"></a>三、集合（Set）</h2><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><p>Redis的Set数据类型是一个无序的字符串集合，它可以存储多个不重复的元素。Set在Redis中有许多实际的使用场景，以下是一些常见的使用场景：</p><ol><li><p><strong>唯一性数据存储：</strong></p><p>最基本的使用场景就是用来存储不重复的数据。你可以使用Set来存储用户ID、IP地址、邮箱地址等，确保数据的唯一性。</p></li><li><p><strong>标签和标记系统：</strong></p><p>Set可以用于创建标签或标记系统。例如，你可以为文章、商品或其他实体创建一个包含相关标签的Set，以便后续快速检索。</p></li><li><p><strong>关注和粉丝系统：</strong></p><p>在社交媒体或用户关系管理中，Set可以用来实现关注和粉丝系统。每个用户可以有一个Set，其中包含他们关注的其他用户或粉丝。</p></li><li><p><strong>在线用户：</strong></p><p>Set可以用于跟踪在线用户。将用户ID添加到一个Set中，表示用户当前在线。通过检查Set中的成员，可以快速查找在线用户。</p></li><li><p><strong>投票系统：</strong></p><p>Set可以用于实现投票系统。每个投票项目可以表示为一个Set，用户投票时将其ID添加到相应的Set中，确保每个用户只能投一次。</p></li><li><p><strong>集合运算：</strong></p><p>Redis提供了多种Set运算，如交集、并集和差集。这些运算可以用于计算多个集合之间的共同元素、合并元素等。</p></li><li><p><strong>排行榜和排名：</strong></p><p>Set可以用于创建排行榜系统。例如，每个元素代表一个玩家，分数作为元素的权重。可以通过有序集合操作获取排名和排行。</p></li><li><p><strong>地理位置标记：</strong></p><p>Set可以用于存储地理位置数据，例如存储用户的经纬度坐标，然后利用Set运算来查找附近的位置。</p></li><li><p><strong>过滤重复事件：</strong></p><p>如果你需要记录一系列事件，并且要确保事件不重复记录，可以使用Set来存储已经发生的事件，防止重复记录。</p></li></ol><p>总的来说，Redis的Set数据类型非常适合需要存储不重复数据、进行集合运算以及需要高效查找元素的场景。无论是在社交网络、实时分析、排行榜、地理位置服务等领域，Set都有着广泛的应用。</p><h3 id="底层实现是什么-2"><a href="#底层实现是什么-2" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>在Redis中，集合（Set）类型的底层实现有两种：哈希表（Hash Table）和跳跃表（Skip List）。</p><ol><li>哈希表（Hash<br>Table）：哈希表是一种使用哈希函数将元素映射到桶（bucket）的数据结构。在Redis中，集合的每个元素都被存储在哈希表的一个桶中。哈希表提供了快速的插入、删除和查找操作，平均情况下的时间复杂度为O(<br>1)。哈希表适用于存储大量元素的集合，并且对于查找操作的性能要求较高。</li><li>跳跃表（Skip<br>List）：跳跃表是一种有序的数据结构，它通过多层链表的方式来提供快速的查找操作。每个节点都包含一个指向下一层和右侧节点的指针。在Redis中，集合的元素按照从小到大的顺序存储在跳跃表中。跳跃表提供了快速的插入、删除和范围查找操作，平均情况下的时间复杂度为O(<br>log n)。跳跃表适用于有序集合的场景，或者对于范围查找操作的性能要求较高。</li></ol><p>在Redis中，当集合的元素数量较少时，底层实现会使用哈希表。当集合的元素数量增加到一定阈值时，Redis会自动将哈希表转换为跳跃表，以提供更好的性能和空间效率。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308121117928.png"></p><p>Redis中的有序集合（Sorted Set）使用的是跳跃表（Skip List）数据结构来实现的。跳跃表是一种用于有序元素存储和检索的数据结构，它的设计使得有序集合的插入、删除和查找操作都能在平均情况下达到<br>O(log n) 的时间复杂度。</p><p><strong>跳跃表（Skip List）实现原理：</strong></p><ol><li><p><strong>多级索引：</strong></p><p>跳跃表的核心思想是使用多级索引来加速查找操作。除了底层的链表结构，跳跃表还有多个级别的索引，每一级索引都是一个较小的有序链表，其中的节点包含指向下一级索引节点的指针。</p></li><li><p><strong>底层链表：</strong></p><p>跳跃表的底层是一个有序链表，节点按照键的大小顺序排列。每个节点包含一个键和对应的值。</p></li><li><p><strong>多级索引节点：</strong></p><p>跳跃表的多级索引节点也是有序链表，但是它的节点数目比底层链表少。每个多级索引节点都存储了指向底层链表中对应范围节点的指针。不同级别的索引通过链式连接在一起。</p></li><li><p><strong>节点的分布：</strong></p><p>节点在不同级别的索引中以一定概率分布，使得跳跃表在查询时能够快速跳过一些不必要的节点，从而达到快速查找的效果。</p></li></ol><p><strong>跳跃表查询流程：</strong></p><ol><li>客户端发送查询命令，指定要查询的成员。</li><li>Redis会从顶级索引（最高级别）开始，逐级向右移动，查找每一级索引中的节点。</li><li>在每一级索引中，Redis会沿着链表移动，比较节点的键与要查找的成员的大小。</li><li>当找到第一个大于等于要查找成员的节点时，如果节点的键等于要查找的成员，查找成功；如果节点的键大于要查找的成员，就会进入下一级索引继续查找。</li><li>如果最底层链表中没有找到匹配的节点，那么查询失败，返回结果为空。</li></ol><p>跳跃表的设计使得它在有序集合中实现高效的查找、插入和删除操作，特别是对于范围查询等操作。通过多级索引和有序链表的结合，Redis的有序集合能够在平均情况下达到<br>O(log n) 的时间复杂度，从而保证了高性能的数据操作。</p><h3 id="如何使用-2"><a href="#如何使用-2" class="headerlink" title="如何使用"></a>如何使用</h3><p>Redis的Set是一种无序、不重复元素的数据结构，类似于数学上的集合。它支持添加、删除和查询元素，并且能够对多个集合进行交集、并集、差集等操作。下面是关于Redis<br>Set的基本使用方法：</p><p><strong>1. 添加元素：</strong></p><p>使用 <code>SADD</code> 命令可以向一个Set中添加一个或多个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SADD myset value1 value2 value3</span><br></pre></td></tr></table></figure><p><strong>2. 删除元素：</strong></p><p>使用 <code>SREM</code> 命令可以从一个Set中删除一个或多个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SREM myset value1 value2</span><br></pre></td></tr></table></figure><p><strong>3. 判断元素是否存在：</strong></p><p>使用 <code>SISMEMBER</code> 命令可以判断一个元素是否存在于Set中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SISMEMBER myset value</span><br></pre></td></tr></table></figure><p><strong>4. 获取集合中的元素数量：</strong></p><p>使用 <code>SCARD</code> 命令可以获取一个Set中元素的数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCARD myset</span><br></pre></td></tr></table></figure><p><strong>5. 获取集合中的所有元素：</strong></p><p>使用 <code>SMEMBERS</code> 命令可以获取一个Set中的所有元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SMEMBERS myset</span><br></pre></td></tr></table></figure><p><strong>6. 集合操作：</strong></p><ul><li>并集：使用 <code>SUNION</code> 命令可以对多个Set进行并集操作。</li><li>交集：使用 <code>SINTER</code> 命令可以对多个Set进行交集操作。</li><li>差集：使用 <code>SDIFF</code> 命令可以对多个Set进行差集操作。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SUNION destination_set set1 set2</span><br><span class="line">SINTER destination_set set1 set2</span><br><span class="line">SDIFF destination_set set1 set2</span><br></pre></td></tr></table></figure><h3 id="需要注意的地方-2"><a href="#需要注意的地方-2" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的Set数据类型时，有一些注意事项和最佳实践可以帮助你更好地利用它。以下是使用Redis Set时需要注意的几个方面：</p><p><strong>1. 唯一性：</strong></p><p>Set是无序、不重复元素的集合。确保你向Set中添加的元素是唯一的，因为Set不会存储重复的值。</p><p><strong>2. 数据量：</strong></p><p>虽然Redis可以处理大量的数据，但仍需谨慎处理数据量较大的Set。当Set中的元素数量变得很大时，查询、插入和删除等操作的性能可能会受到影响。</p><p><strong>3. 考虑使用过期时间：</strong></p><p>可以为Set设置过期时间，让不再需要的数据自动过期，以释放内存资源。</p><p><strong>4. 避免大量的成员操作：</strong></p><p>在某些情况下，如果需要对Set中的大量成员进行操作（如删除），可能会影响性能。如果需要频繁进行大规模操作，可以考虑使用多个小规模的Set，而不是一个包含大量成员的Set。</p><p><strong>5. 集合操作注意事项：</strong></p><p>集合操作（如并集、交集、差集）可能会对性能产生一定影响，特别是在Set的成员数量较大时。在执行集合操作时，应该考虑其对性能的影响，并根据实际情况进行优化。</p><p><strong>6. 避免全量遍历：</strong></p><p>避免使用<code>SMEMBERS</code>等命令获取所有成员，因为在大数据集下会产生性能问题。如果需要遍历成员，可以考虑使用<code>SSCAN</code>命令进行分页式的遍历。</p><p><strong>7. 使用有序集合代替：</strong></p><p>如果你需要有序的集合，可以考虑使用有序集合（Sorted Set）数据类型，它可以同时提供有序性和唯一性，适用于排行榜、计分系统等场景。</p><p><strong>8. 持久化和备份：</strong></p><p>在重要的生产环境中，始终要考虑持久化和备份策略，以确保数据不会因为意外情况而丢失。</p><p>总之，在使用Redis的Set数据类型时，需要根据应用需求和数据量合理规划和优化。了解你的数据模型、数据量以及操作需求，可以帮助你更好地利用Redis的Set功能，并确保系统的性能和稳定性。</p><h2 id="四、有序集合（Sorted-Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。"><a href="#四、有序集合（Sorted-Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。" class="headerlink" title="四、有序集合（Sorted Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。"></a>四、有序集合（Sorted Set）：与集合类似，但每个元素都关联一个分数，可以根据分数进行排序。</h2><h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h3><p>有序集合（Sorted Set）是Redis中的一种特殊数据类型，它在有序性和唯一性的基础上，为存储一组成员（元素）分配了一个分数（score）。这种数据结构使得有序集合在许多应用场景中非常有用。以下是一些适用场景：</p><p><strong>1. 排行榜和计分系统：</strong><br>有序集合非常适合实现排行榜和计分系统。成员的分数可以表示玩家的得分、评分、积分等。你可以通过分数对成员进行排序，快速地获取前几名的排名。</p><p><strong>2. 时间序列数据：</strong><br>如果你需要存储带有时间戳的数据，有序集合可以根据时间戳（作为分数）进行排序，然后按时间范围快速查询数据。</p><p><strong>3. 最新消息：</strong><br>有序集合可以用来存储最新的消息，每个消息的分数可以是消息的时间戳，这样可以方便地获取最新的消息。</p><p><strong>4. 带权重的标签&#x2F;标签云：</strong><br>在社交网络或标签系统中，你可以使用有序集合来存储标签，成员是标签，分数可以表示标签的热度、权重等。这可以用来实现标签云、热门标签等功能。</p><p><strong>5. 范围查询：</strong><br>有序集合允许根据分数范围进行查询，从而可以快速地获取在某个分数范围内的成员。</p><p><strong>6. 唯一性：</strong><br>有序集合保持了成员的唯一性，这意味着你可以方便地存储和查询不重复的元素。</p><p><strong>7. 高级集合运算：</strong><br>Redis提供了对有序集合的集合运算（交集、并集、差集）操作，这可以用来实现多个数据集的交叉分析、数据筛选等。</p><p><strong>8. 范围分页：</strong><br>使用<code>ZRANGE</code>等命令，可以对有序集合进行分页查询，获取指定范围内的成员。</p><p>总之，有序集合适用于需要保持元素有序性、需要快速进行范围查询、具有权重或分数的情况。它在多个场景中都提供了高效的数据存储和操作，使得Redis成为了解决这些问题的有力工具。</p><h3 id="底层实现是什么-3"><a href="#底层实现是什么-3" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>Redis的有序集合（Sorted Set）底层的实现采用了跳跃表（Skip List）和哈希表（Hash<br>Table）的结合。这种设计使得有序集合既能在保持有序性的同时，也能够高效地执行添加、删除、查询等操作。</p><p><strong>跳跃表（Skip List）：</strong><br>跳跃表是用来维护有序集合中的成员的。在有序集合中，每个成员都有一个分数（score），而跳跃表则根据这个分数来排序成员。跳跃表通过多级索引，可以在平均情况下实现<br>O(log n) 的插入、删除和查询操作。</p><p><strong>哈希表（Hash Table）：</strong><br>有序集合在存储成员和分数之间的映射关系时，使用了哈希表。每个成员都会在哈希表中对应一个键值对，其中键是成员，值是分数。通过哈希表，Redis可以在<br>O(1) 时间内查找某个成员的分数。</p><p><strong>结合使用的方式：</strong><br>有序集合的每个元素在底层的哈希表中存储着成员和分数的映射关系，同时在跳跃表中存储了成员的排序信息。通过这种方式，Redis可以在跳跃表中按照成员的分数顺序快速地进行范围查询，而在哈希表中通过成员快速查找分数。</p><p>这种底层实现结合了跳跃表和哈希表的优点，使得Redis有序集合能够同时满足有序性和高效性的需求。这种设计让有序集合在插入、删除、查询和范围操作等场景下都能表现出色。</p><h3 id="如何使用-3"><a href="#如何使用-3" class="headerlink" title="如何使用"></a>如何使用</h3><p>使用Redis的有序集合（Sorted Set）需要掌握一些基本命令和操作。以下是一些常见的有序集合操作示例：</p><p><strong>1. 添加成员：</strong></p><p>使用 <code>ZADD</code> 命令可以向有序集合中添加成员，同时指定成员的分数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZADD myset 10 member1</span><br><span class="line">ZADD myset 20 member2</span><br></pre></td></tr></table></figure><p><strong>2. 获取成员分数：</strong></p><p>使用 <code>ZSCORE</code> 命令可以获取指定成员的分数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSCORE myset member1</span><br></pre></td></tr></table></figure><p><strong>3. 获取成员排名：</strong></p><p>使用 <code>ZRANK</code> 命令可以获取指定成员在有序集合中的排名（从0开始）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANK myset member2</span><br></pre></td></tr></table></figure><p><strong>4. 获取分数范围内的成员：</strong></p><p>使用 <code>ZRANGEBYSCORE</code> 命令可以获取指定分数范围内的成员列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE myset 15 25</span><br></pre></td></tr></table></figure><p><strong>5. 获取排名范围内的成员：</strong></p><p>使用 <code>ZRANGE</code> 命令可以获取指定排名范围内的成员列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGE myset 0 2</span><br></pre></td></tr></table></figure><p><strong>6. 删除成员：</strong></p><p>使用 <code>ZREM</code> 命令可以从有序集合中删除一个或多个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREM myset member1</span><br></pre></td></tr></table></figure><p><strong>7. 获取成员数量：</strong></p><p>使用 <code>ZCARD</code> 命令可以获取有序集合中成员的数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZCARD myset</span><br></pre></td></tr></table></figure><p><strong>8. 集合操作：</strong></p><ul><li>并集：使用 <code>ZUNIONSTORE</code> 命令可以对多个有序集合进行并集操作。</li><li>交集：使用 <code>ZINTERSTORE</code> 命令可以对多个有序集合进行交集操作。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZUNIONSTORE destination_set 2 set1 set2 WEIGHTS 1 2</span><br><span class="line">ZINTERSTORE destination_set 2 set1 set2 WEIGHTS 0.5 0.5</span><br></pre></td></tr></table></figure><p>这只是有序集合的基本操作，你还可以使用其他命令进行更复杂的操作，如获取成员排名、计算分数之差等。使用有序集合时，要根据实际需求选择合适的命令和操作，以充分利用其有序性和高效性。</p><h3 id="需要注意的地方-3"><a href="#需要注意的地方-3" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的有序集合（Sorted Set）时，有一些注意事项可以帮助你避免一些常见的问题，以及优化性能和数据管理。以下是一些需要注意的地方：</p><p><strong>1. 成员的唯一性：</strong><br>有序集合的成员是唯一的，重复的成员不会被插入。确保你向有序集合中添加的成员是唯一的，以免出现预期之外的数据情况。</p><p><strong>2. 分数的重复性：</strong><br>虽然成员是唯一的，但是不同成员之间的分数可以是重复的。这在一些场景中是正常的，但需要根据具体需求处理。</p><p><strong>3. 数据量：</strong><br>尽管有序集合可以处理大量的数据，但仍需谨慎处理数据量较大的有序集合。大数据集合可能会影响性能和内存使用。</p><p><strong>4. 分数范围：</strong><br>在进行范围查询时，确保分数范围是合理的。大范围查询可能会消耗较多的计算资源。</p><p><strong>5. 数据结构选择：</strong><br>有序集合适用于需要有序性的场景，但不适合用于仅仅需要存储唯一性成员的情况。对于仅需要唯一性的数据，使用集合（Set）数据类型更合适。</p><p><strong>6. 集合操作的影响：</strong><br>在执行集合操作（并集、交集、差集）时，考虑其对性能的影响。集合操作可能会消耗更多的计算资源，特别是在有大量成员的情况下。</p><p><strong>7. 选择适当的分数类型：</strong><br>分数可以是整数或浮点数。根据实际需求，选择适合的分数类型。</p><p><strong>8. 性能和内存优化：</strong><br>合理使用Redis的配置参数，考虑分片、持久化、内存管理等策略，以优化性能和内存使用。</p><p><strong>9. 避免全量遍历：</strong><br>避免使用<code>ZRANGE</code>等命令获取所有成员，特别是在大数据集合中。考虑使用<code>ZSCAN</code>进行分页式遍历。</p><p><strong>10. 持久化和备份：</strong><br>在重要的生产环境中，考虑持久化和备份策略，以防止数据丢失。</p><p><strong>11. 内存占用：</strong><br>有序集合会占用一定的内存，要注意监控和管理内存使用，防止内存溢出。</p><p>总之，使用Redis的有序集合时，要根据实际需求合理规划和优化，以保证系统的性能和稳定性。</p><h2 id="五、哈希表（Hash）"><a href="#五、哈希表（Hash）" class="headerlink" title="五、哈希表（Hash）"></a>五、哈希表（Hash）</h2><h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h3><p>Redis的哈希表（Hash）是一种存储键值对的数据结构，其中的键是唯一的，而值则可以是字符串、整数、浮点数等。哈希表适用于许多场景，特别是需要存储和查询多个字段的情况。以下是一些适用场景：</p><p><strong>1. 存储对象信息：</strong><br>如果你需要存储一个对象的多个字段信息，例如用户信息（用户名、年龄、邮箱等），可以使用哈希表来存储每个用户的字段信息。</p><p><strong>2. 缓存数据：</strong><br>哈希表适用于缓存大量的键值对数据，例如缓存数据库查询结果，以减少数据库的访问频率。</p><p><strong>3. 存储配置信息：</strong><br>将配置信息存储在哈希表中，可以方便地获取和修改配置项，而无需在内存中存储多个单独的键。</p><p><strong>4. 计数器：</strong><br>可以使用哈希表来实现计数器功能，每个字段存储一个计数，比如网站的点赞数、阅读数等。</p><p><strong>5. 存储多种属性：</strong><br>如果你需要为一组对象存储多种属性，例如商品的名称、价格、库存等，可以使用哈希表来存储每个商品的多个属性。</p><p><strong>6. 联合索引：</strong><br>在关系型数据库中，联合索引常用于加速多字段的查询。在Redis中，可以使用哈希表来存储多个字段，并通过一个字段作为主键，实现类似的联合索引效果。</p><p><strong>7. 实时统计：</strong><br>哈希表可以用于实时统计信息，例如统计用户每天的登录次数、订单数等。</p><p><strong>8. 用户会话：</strong><br>可以使用哈希表来存储用户会话信息，每个字段存储一个会话属性，如用户ID、登录时间、过期时间等。</p><p><strong>9. 图数据结构：</strong><br>如果需要实现图数据结构，例如社交网络关系图，可以使用哈希表来表示节点和边。</p><p><strong>10. 多字段查询：</strong><br>哈希表适用于存储多个字段，可以更快速地查询和更新多个字段的值。</p><p>总之，哈希表适用于需要存储多个字段信息的情况，可以在一次查询中获取和更新多个字段，从而提高了数据的访问效率。它在多种应用场景中都能发挥作用，特别是需要存储和操作多个属性的数据。</p><h3 id="底层实现是什么-4"><a href="#底层实现是什么-4" class="headerlink" title="底层实现是什么"></a>底层实现是什么</h3><p>Redis的哈希表（Hash）数据类型在底层的实现上是使用哈希表（Hash Table）来存储键值对的。哈希表是一种非常高效的数据结构，它能够在平均情况下以<br>O(1) 的时间复杂度进行插入、删除和查询操作。下面是Redis哈希表底层实现的一些细节：</p><p><strong>1. 散列函数（Hash Function）：</strong><br>在哈希表中，键通过散列函数计算得到一个哈希值（hash），这个哈希值被用作数组（桶）的索引。Redis使用MurmurHash2等散列函数来均匀地将键分散到不同的桶中。</p><p><strong>2. 桶数组：</strong><br>哈希表底层维护了一个桶数组，每个桶中存储了一个或多个键值对。这个数组的大小通常会动态调整，以保证桶的填充因子不会过高。</p><p><strong>3. 冲突处理：</strong><br>由于不同的键可能会经过散列函数映射到同一个桶中，这就产生了冲突。Redis使用链式解决冲突的方法，每个桶中可以存储一个链表，当有多个键映射到同一个桶时，它们会按照插入顺序形成链表。</p><p><strong>4. 动态扩容：</strong><br>当哈希表中的元素数量逐渐增加时，Redis会根据负载因子动态扩容桶数组，以保持桶的填充因子在一个合适的范围内。这可以保证插入、删除和查询操作的高效性。</p><p><strong>5. 迁移：</strong><br>在扩容时，Redis会将原有的键值对重新散列到新的桶数组中。这个过程称为“迁移”，它会在后台进行，以免影响正常的读写操作。</p><p><strong>6. 哈希表的嵌套：</strong><br>在Redis的源码中，哈希表本身也可以被嵌套使用，这种嵌套的哈希表常常用于实现数据类型的复杂结构，例如用于存储集合和有序集合等。</p><p>综上所述，Redis的哈希表底层是通过散列函数、桶数组、链式解决冲突等机制来实现的。这种设计使得Redis能够高效地存储和查询键值对数据，哈希表在Redis中扮演着非常重要的角色。</p><h3 id="如何使用-4"><a href="#如何使用-4" class="headerlink" title="如何使用"></a>如何使用</h3><p>使用Redis的哈希表（Hash）数据类型涉及一系列命令，这些命令可以帮助你对哈希表中的键值对进行添加、查询、删除等操作。以下是一些常见的哈希表操作示例：</p><p><strong>1. 添加键值对：</strong></p><p>使用 <code>HSET</code> 命令可以向哈希表中添加一个键值对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HSET user:id123 name <span class="string">&quot;John&quot;</span> age 30</span><br></pre></td></tr></table></figure><p><strong>2. 获取单个键的值：</strong></p><p>使用 <code>HGET</code> 命令可以获取指定键的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGET user:id123 name</span><br></pre></td></tr></table></figure><p><strong>3. 获取多个键的值：</strong></p><p>使用 <code>HMGET</code> 命令可以同时获取多个键的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMGET user:id123 name age</span><br></pre></td></tr></table></figure><p><strong>4. 获取所有键值对：</strong></p><p>使用 <code>HGETALL</code> 命令可以获取哈希表中所有的键值对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGETALL user:id123</span><br></pre></td></tr></table></figure><p><strong>5. 增加或更新键的值：</strong></p><p>使用 <code>HINCRBY</code> 命令可以为键的值增加一个整数。如果键不存在，会创建一个新的键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HINCRBY user:id123 age 1</span><br></pre></td></tr></table></figure><p><strong>6. 删除键值对：</strong></p><p>使用 <code>HDEL</code> 命令可以从哈希表中删除一个或多个键值对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HDEL user:id123 age</span><br></pre></td></tr></table></figure><p><strong>7. 获取所有键或值：</strong></p><p>使用 <code>HKEYS</code> 命令可以获取哈希表中所有的键，使用 <code>HVALS</code> 命令可以获取哈希表中所有的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKEYS user:id123</span><br><span class="line">HVALS user:id123</span><br></pre></td></tr></table></figure><p><strong>8. 获取键值对数量：</strong></p><p>使用 <code>HLEN</code> 命令可以获取哈希表中键值对的数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HLEN user:id123</span><br></pre></td></tr></table></figure><p><strong>9. 检查键是否存在：</strong></p><p>使用 <code>HEXISTS</code> 命令可以检查指定键是否存在于哈希表中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEXISTS user:id123 name</span><br></pre></td></tr></table></figure><p>这些只是哈希表的基本操作，你还可以使用其他命令来进行更高级的操作，如迭代、批量添加、获取字段数量等。在使用哈希表时，要根据实际需求选择合适的命令和操作，以充分利用其灵活性和高效性。</p><h3 id="需要注意的地方-4"><a href="#需要注意的地方-4" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>在使用Redis的哈希表（Hash）数据类型时，有一些注意事项可以帮助你避免常见问题，优化性能，以及更好地管理数据。以下是一些需要注意的地方：</p><p><strong>1. 键的命名：</strong><br>选择有意义的键名，以便更好地区分不同的哈希表。避免过长或者冗余的键名，以减少内存占用。</p><p><strong>2. 数据量：</strong><br>虽然Redis可以处理大量的数据，但仍需谨慎处理大数据量的哈希表。大数据量可能会影响性能和内存使用。</p><p><strong>3. 单个哈希表的字段数量：</strong><br>虽然Redis能够高效地处理多个字段，但是如果单个哈希表中的字段数量非常多，可能会影响性能。如果需要存储大量的字段，考虑拆分成多个哈希表或其他数据结构。</p><p><strong>4. 复杂度：</strong><br>在哈希表中的字段数量不宜过多，以保持读写操作的高效性。过多的字段可能会增加内存消耗和操作复杂度。</p><p><strong>5. 适用场景：</strong><br>哈希表适用于存储和查询多个字段的情况。如果只需要存储单一的值或者简单的数据，考虑使用字符串（String）数据类型。</p><p><strong>6. 批量操作：</strong><br>如果需要一次操作多个键值对，使用批量操作命令如 <code>HMSET</code>，而不是多次使用单个键的操作命令。</p><p><strong>7. 缓存失效：</strong><br>设置适当的缓存失效时间，避免过期的键值对占用内存。</p><p><strong>8. 键值大小：</strong><br>如果哈希表中的字段值较大，考虑其对内存的影响。大字段值可能会增加内存占用。</p><p><strong>9. 深度嵌套：</strong><br>避免在哈希表中使用太多嵌套的键值对，这可能会增加查找和维护的复杂度。</p><p><strong>10. 数据持久化：</strong><br>对于重要的数据，考虑开启持久化以防止数据丢失。</p><p><strong>11. 数据备份：</strong><br>定期备份数据，以防止意外数据丢失。</p><p>总之，使用哈希表时，要根据实际需求合理规划和优化，以确保系统的性能和稳定性。考虑数据模型、数据量、操作频率等因素，以及根据需要选择合适的Redis配置和命令来使用哈希表。��选择合适的Redis配置和命令来使用哈希表。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
          <category> 系列文章 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跳表 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 有序集合 </tag>
            
            <tag> redis </tag>
            
            <tag> set </tag>
            
            <tag> list </tag>
            
            <tag> hash </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyCode自动生成脚本</title>
      <link href="/5ee71a5e.html"/>
      <url>/5ee71a5e.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>配合优化的项目架构，能够自动生成基础CURUD，实现10秒钟开发新业务接口</p><p><a href="https://brucege.com/doc/#/generateByTemplate">https://brucege.com/doc/#/generateByTemplate</a></p><p>EasyCode自动生成脚本是一个与优化项目架构配合的工具，能够快速生成基础CURUD操作，帮助开发人员在10秒钟内创建新的业务接口。本文介绍了如何使用EasyCode自动生成脚本，并展示了生成的Controller和Mapper类的示例代码。</p><h2 id="自动生成以下类，还有一个xml没截取到"><a href="#自动生成以下类，还有一个xml没截取到" class="headerlink" title="自动生成以下类，还有一个xml没截取到"></a>自动生成以下类，还有一个xml没截取到</h2><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/b730d785-bbf2-4ef6-9a3f-b5aaccb981a6" alt="img"></p><h2 id="生成的controller"><a href="#生成的controller" class="headerlink" title="生成的controller"></a>生成的controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.supervision.daily.outbound.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nari.core.basic.BasicController;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.model.IdLibraryChecklist;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.param.IdLibraryChecklistParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.view.IdLibraryChecklistView;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.transform.IdLibraryChecklistTransform;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.dto.IdLibraryChecklistDto;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.service.IdLibraryChecklistService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证照清单-路由管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt; 朱永胜 &lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-05-26 17:08:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;idLibraryChecklist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdLibraryChecklistController</span> <span class="keyword">extends</span> <span class="title class_">BasicController</span>&lt;IdLibraryChecklist, IdLibraryChecklistParam, IdLibraryChecklistView, IdLibraryChecklistDto, IdLibraryChecklistTransform&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成的mapper"><a href="#生成的mapper" class="headerlink" title="生成的mapper"></a>生成的mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.supervision.daily.outbound.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.model.IdLibraryChecklist;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.param.IdLibraryChecklistParam;</span><br><span class="line"><span class="keyword">import</span> com.nari.supervision.daily.outbound.dto.IdLibraryChecklistDto;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.basic.BasicDao;</span><br><span class="line"><span class="keyword">import</span> com.nari.core.web.PageParam;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证照清单-SQL处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:17602556550@189.cn&quot;&gt; 朱永胜 &lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-05-26 17:08:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IdLibraryChecklistMapper</span> <span class="keyword">extends</span> <span class="title class_">BasicDao</span>&lt;IdLibraryChecklist, IdLibraryChecklistDto, IdLibraryChecklistParam&gt; &#123;</span><br><span class="line">    List&lt;IdLibraryChecklistDto&gt; <span class="title function_">selectPageRel</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> PageParam&lt;IdLibraryChecklistDto, IdLibraryChecklistParam&gt; page, <span class="meta">@Param(&quot;param&quot;)</span> IdLibraryChecklistParam param)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="一、将项目拷贝到该位置"><a href="#一、将项目拷贝到该位置" class="headerlink" title="一、将项目拷贝到该位置"></a>一、将项目拷贝到该位置</h3><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/4ea2b22d-414e-4bf6-9236-0a6468cacf6e" alt="image" title="image"></p><p>我们需要使用的是第三个模板</p><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/2c89ad74-2e9c-4f53-aa57-0f9e70f09d96" alt="image" title="image"></p><h3 id="二、安装插件"><a href="#二、安装插件" class="headerlink" title="二、安装插件"></a>二、安装插件</h3><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/2fc5d35f-b20b-45c8-b4ed-87508b866e26" alt="image" title="image"></p><h3 id="三、右键表，按照图示点击"><a href="#三、右键表，按照图示点击" class="headerlink" title="三、右键表，按照图示点击"></a>三、右键表，按照图示点击</h3><blockquote><p>如果你的idea没有配置db，请自行百度配置下</p></blockquote><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/14f8dab8-8520-4965-903d-a57e9c2b8dcb" alt="image" title="image"></p><h3 id="四、按照图示勾选即可"><a href="#四、按照图示勾选即可" class="headerlink" title="四、按照图示勾选即可"></a>四、按照图示勾选即可</h3><p><img src="https://github.com/zysicyj/EasyCode_hubei/assets/64080867/020af128-fded-441f-a5fa-e58b683cdced" alt="image" title="image"></p><p>总结： EasyCode自动生成脚本是一个强大的工具，可以极大地提高开发效率。通过简单的配置和几个简单的步骤，开发人员可以快速生成基础CURUD操作的代码，从而节省大量的开发时间和精力。生成的Controller和Mapper类示例代码展示了EasyCode的功能和灵活性，使开发人员能够轻松创建和管理业务接口。如果您想要提高开发效率并减少重复劳动，EasyCode自动生成脚本绝对是一个值得尝试的工具。<br>对是一个值得尝试的工具。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> idea </tag>
            
            <tag> java </tag>
            
            <tag> easycode </tag>
            
            <tag> springboot </tag>
            
            <tag> 自动生成脚本 </tag>
            
            <tag> curud </tag>
            
            <tag> controller </tag>
            
            <tag> mapper </tag>
            
            <tag> 开发效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java根据表名导出与导入Sql</title>
      <link href="/60c46e69.html"/>
      <url>/60c46e69.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很粗糙啊，有很多可以优化的地方，而且也不安全，但是临时用还是OK的，我这个是公司里面的单机软件，不联网。</p><p>嗨！我是一名社交媒体增长黑客，很高兴能帮助您优化和丰富关于批量作业导出和导入的文章。这个主题相当技术性，但我会将其分解为易于理解的部分。让我们开始吧！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在当今快节奏的数字世界中，高效地导出和导入批量作业对于企业至关重要。批量作业操作涉及处理大量数据，拥有流畅的流程可以节省时间和精力。在本文中，我们将探讨一种基于Java的解决方案，可以让您无缝地导出和导入批量作业。</p><h2 id="导出批量作业"><a href="#导出批量作业" class="headerlink" title="导出批量作业"></a>导出批量作业</h2><p>提供的代码片段演示了如何使用基于Java的解决方案导出批量作业。以下是代码的详细说明：</p><ol><li><p><code>exportBatchJobs</code> 方法负责导出批量作业。它使用 <code>StringBuilder</code> 构建每个表的 SQL 语句。</p></li><li><p><code>getTableNames</code> 方法使用 <code>SHOW TABLES</code> SQL 查询检索所有表名。</p></li><li><p>对于每个表，都会调用 <code>downloadTable</code> 方法。它查询表数据并为每一行生成 SQL 插入语句。</p></li><li><p>生成的 SQL 语句会追加到 <code>sqlBuilder</code> 中。</p></li><li><p>最后，<code>sqlBuilder</code> 的内容会写入 HTTP 响应，允许用户下载 SQL 文件。</p></li></ol><p>为了优化这段代码，您可以考虑以下改进：</p><ul><li><p>使用 <code>ExecutorService</code> 和 <code>Future</code> 类实现多线程，以并行化导出过程。这可以显著提高性能，特别是在处理大量表时。</p></li><li><p>探索优化 SQL 生成过程的方法。例如，可以使用批量插入而不是单个插入语句来提高效率。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出批次作业</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】 &lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/exportBatchJobs&quot;)</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportBatchJobs</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sqlBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(getTableNames().size());</span><br><span class="line">            List&lt;Future&lt;?&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String tableName : getTableNames()) &#123;</span><br><span class="line">                Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        downloadTable(tableName, sqlBuilder);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                futures.add(future);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Wait for all threads to finish</span></span><br><span class="line">            <span class="keyword">for</span> (Future&lt;?&gt; future : futures) &#123;</span><br><span class="line">                future.get();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set response headers for file download</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=&quot;</span> + format(DateUtil.now(), <span class="string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>) + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(sqlBuilder.toString());</span><br><span class="line"></span><br><span class="line">            executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有表名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】  &lt;/a &gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTableNames</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.queryForList(<span class="string">&quot;SHOW TABLES&quot;</span>, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出指定表SQL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">     *         表明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlBuilder</span></span><br><span class="line"><span class="comment">     *         拼接sql</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】 &lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadTable</span><span class="params">(String tableName, StringBuilder sqlBuilder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 查询表数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM ??&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; tableData = jdbcTemplate.queryForList(sql, tableName);</span><br><span class="line">        <span class="comment">// 拼接SQL插入语句</span></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; row : tableData) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">valuesBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">columnsBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : row.entrySet()) &#123;</span><br><span class="line">                columnsBuilder.append(entry.getKey()).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() <span class="keyword">instanceof</span> <span class="type">byte</span>[]) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] binaryData = (<span class="type">byte</span>[]) entry.getValue();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> bytesToHexString(binaryData);</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;0x&quot;</span>).append(hexString).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;&#x27;&quot;</span>).append(entry.getValue()).append(<span class="string">&quot;&#x27;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">columns</span> <span class="operator">=</span> columnsBuilder.substring(<span class="number">0</span>, columnsBuilder.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> valuesBuilder.substring(<span class="number">0</span>, valuesBuilder.length() - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            sqlBuilder.append(<span class="string">&quot;INSERT INTO &quot;</span>).append(tableName).append(<span class="string">&quot; (&quot;</span>).append(columns).append(<span class="string">&quot;) VALUES (&quot;</span>)</span><br><span class="line">                    .append(values).append(<span class="string">&quot;);\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>导出来的就是这种格式的文件</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308102210122.png" alt="image-20230810221022867"></p><h2 id="导入批量作业"><a href="#导入批量作业" class="headerlink" title="导入批量作业"></a>导入批量作业</h2><p>提供的代码片段演示了如何导入包含批量作业数据的 SQL 文件。以下是代码的详细说明：</p><ol><li><p><code>executeSqlFile</code> 方法处理导入过程。它接受一个 SQL 文件作为 <code>MultipartFile</code> 并读取其内容。</p></li><li><p>使用分号（<code>;</code>）分隔符将 SQL 文件内容拆分为单个语句。</p></li><li><p>使用参数化查询执行每个语句，确保安全性并防止 SQL 注入攻击。</p></li><li><p>如果 SQL 文件成功执行，则方法返回成功消息。否则，它会记录导入过程中出现的任何错误。</p></li></ol><p>为了优化这段代码，您可以考虑以下改进：</p><ul><li><p>实现错误处理，并提供更详细的错误消息，以帮助用户排除导入过程中可能出现的任何问题。</p></li><li><p>考虑在执行语句之前验证 SQL 文件内容。这可以帮助防止由格式错误或不兼容的 SQL 语句引起的潜在错误。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入SQL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.nari.common.core.domain.AjaxResult</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> &lt;a href = &quot;mailto:zysicyj@163.com&quot; &gt; 公众号：【程序员朱永胜】 个人博客：【blog.zysicyj.to】 &lt;/a &gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/8/10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importBatchJobs&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> AjaxResult <span class="title function_">executeSqlFile</span><span class="params">(<span class="meta">@RequestParam(&quot;filePath&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        List&lt;String&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Read the SQL file content</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(file.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Split the SQL file content into individual statements</span></span><br><span class="line">            String[] statements = sql.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Execute each statement using parameterized queries</span></span><br><span class="line">            <span class="keyword">for</span> (String statement : statements) &#123;</span><br><span class="line">                <span class="comment">// Skip empty statements</span></span><br><span class="line">                <span class="keyword">if</span> (statement.trim().isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Execute the statement using parameterized queries</span></span><br><span class="line">                jdbcTemplate.update(statement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> AjaxResult.success(<span class="string">&quot;SQL file executed successfully&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            results.add(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;导入失败的SQL数量:&#123;&#125;,&#123;&#125;&quot;</span>, results.size(), results);</span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，本文探讨了一种基于Java的解决方案，用于导出和导入批量作业。导出过程检索表数据并生成 SQL 插入语句，允许用户下载 SQL 文件。导入过程读取 SQL 文件，将其拆分为单个语句，并使用参数化查询执行这些语句。通过优化代码并实现错误处理，您可以提高批量作业导出和导入功能的效率和可靠性。</p><p>希望这篇优化和丰富的文章能帮助您为读者提供有价值的见解。如果您有任何进一步的问题或需要额外的帮助，请随时提问！</p><p>�助，请随时提问！</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
            <tag> java </tag>
            
            <tag> 批量作业 </tag>
            
            <tag> 导出 </tag>
            
            <tag> 导入 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 参数化查询 </tag>
            
            <tag> 错误处理 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot生成表结构和表数据sql</title>
      <link href="/196b7a2b.html"/>
      <url>/196b7a2b.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>业务背景是需要某单机程序需要把正在进行的任务导出，然后另一台电脑上单机继续运行，我这里选择的方案是同步SQL形式，并保证ID随机，多个数据库不会重复。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nari.</span><br><span class="line">![](image.png)</span><br><span class="line">web.controller.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.InputStreamResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二进制转成十六进制</span></span><br><span class="line"><span class="comment">     * 这里主要是处理图片数据，因为数据库存了图片Base64</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">bytesToHexString</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">0xff</span> &amp; b);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出指定表SQL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/table/&#123;tableName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadTable</span><span class="params">(<span class="meta">@PathVariable</span> String tableName, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 查询表数据</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; tableData = jdbcTemplate.queryForList(<span class="string">&quot;SELECT * FROM &quot;</span> + tableName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询表结构</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; tableStructure = jdbcTemplate.queryForList(<span class="string">&quot;SHOW CREATE TABLE &quot;</span> + tableName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接SQL插入语句</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sqlBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sqlBuilder.append(tableStructure.get(<span class="number">0</span>).get(<span class="string">&quot;Create Table&quot;</span>)).append(<span class="string">&quot;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; row : tableData) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">valuesBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">columnsBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : row.entrySet()) &#123;</span><br><span class="line">                columnsBuilder.append(entry.getKey()).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() <span class="keyword">instanceof</span> <span class="type">byte</span>[]) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] binaryData = (<span class="type">byte</span>[]) entry.getValue();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> bytesToHexString(binaryData);</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;0x&quot;</span>).append(hexString).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    valuesBuilder.append(<span class="string">&quot;&#x27;&quot;</span>).append(entry.getValue()).append(<span class="string">&quot;&#x27;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">columns</span> <span class="operator">=</span> columnsBuilder.substring(<span class="number">0</span>, columnsBuilder.length() - <span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> valuesBuilder.substring(<span class="number">0</span>, valuesBuilder.length() - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            sqlBuilder.append(<span class="string">&quot;INSERT INTO &quot;</span>).append(tableName).append(<span class="string">&quot; (&quot;</span>).append(columns).append(<span class="string">&quot;) VALUES (&quot;</span>).append(values).append(<span class="string">&quot;);\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建响应</span></span><br><span class="line">        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment; filename=&quot;</span> + tableName+<span class="string">&quot;.sql&quot;</span>);</span><br><span class="line">        response.getWriter().write(sqlBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>能看到这边图片已经正常导出了</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308082133731.png" alt="image-20230808213359441"><br>ud.com&#x2F;blog&#x2F;202308082133731.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> jdbc </tag>
            
            <tag> sql </tag>
            
            <tag> 导出 </tag>
            
            <tag> springboot </tag>
            
            <tag> 下载 </tag>
            
            <tag> 表数据 </tag>
            
            <tag> 表结构 </tag>
            
            <tag> 插入语句 </tag>
            
            <tag> 响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化差不多了</title>
      <link href="/c37612c9.html"/>
      <url>/c37612c9.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><p>博客地址：<a href="https://blog.zysicyj.top/">https://blog.zysicyj.top/</a></p><p>这篇文章不是教学博客，后续考虑看是否出教学</p><p>具体优化视频可以观看B站视频</p><p><a href="https://space.bilibili.com/258577429">https://space.bilibili.com/258577429</a></p><p>这个博客是Hexo+Github Pages搭建的，如何搭建可以看我之前的文章，主题是Butterfly，图床是腾讯云COS，老文章使用的是阿里云OOS，换成COS主要是出于成本，腾讯的便宜太多了，而且有很多免费额度<img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072341119.png" alt="image-20230807234107815"></p><p>阿里云已经开始扣费了，价格是0.5元&#x2F;G流量，不包括存储费用，上个月扣了几块钱了。。看了下，最低的流量包是100G。。腾讯是10G好像，价格上也贵不少</p><p>总感觉流量扣的不对，没办法，开始上防盗链了。。。COS和OSS都上了。。后续有时间再把OSS文档迁移到COS吧，╮(╯▽╰)╭</p><h2 id="新增搜索功能"><a href="#新增搜索功能" class="headerlink" title="新增搜索功能"></a>新增搜索功能</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072348757.png" alt="image-20230807234835404"></p><h2 id="新增评论系统"><a href="#新增评论系统" class="headerlink" title="新增评论系统"></a>新增评论系统</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072337879.png" alt="image-20230807233701749"></p><h2 id="新增在线聊天系统"><a href="#新增在线聊天系统" class="headerlink" title="新增在线聊天系统"></a>新增在线聊天系统</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072337780.png" alt="image-20230807233728451"></p><h2 id="语言改为中文"><a href="#语言改为中文" class="headerlink" title="语言改为中文"></a>语言改为中文</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072338122.png" alt="image-20230807233812817"></p><h2 id="去掉了默认那个大图，直接展示文章"><a href="#去掉了默认那个大图，直接展示文章" class="headerlink" title="去掉了默认那个大图，直接展示文章"></a>去掉了默认那个大图，直接展示文章</h2><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072347459.png" alt="image-20230807234701110"></p><h2 id="新增友链"><a href="#新增友链" class="headerlink" title="新增友链"></a>新增友链</h2><p>这个友链也需要完善，时间上不够啊，有时间再弄吧</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072349572.png" alt="image-20230807234921266"><br>log&#x2F;202308072349572.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly安装文档(三)主题配置-1</title>
      <link href="/9effb4a6.html"/>
      <url>/9effb4a6.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>修改站点配置文件 _config.yml</p><p>默认语言是 en</p><p>主题支持三种语言</p><ul><li>default(en)</li><li>zh-CN (简体中文)</li><li>zh-TW (繁体中文)</li></ul><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的_config.yml</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072057104.png" alt="img"></p><h2 id="导航栏设置-Navigation-bar-settings"><a href="#导航栏设置-Navigation-bar-settings" class="headerlink" title="导航栏设置 (Navigation bar settings)"></a>导航栏设置 (Navigation bar settings)</h2><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="comment">#image</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># fixed navigation bar</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072058163.png" alt="image-20230807205821105"></p><h3 id="菜单-目录"><a href="#菜单-目录" class="headerlink" title="菜单&#x2F;目录"></a>菜单&#x2F;目录</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"><span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line"><span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line"><span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>必须是 &#x2F;xxx&#x2F;，后面||分开，然后写图标名。</p><p>如果不希望显示图标，图标名可不写。</p><p>默认子目录是展开的，如果你想要隐藏，在子目录里添加 hide 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">List||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br></pre></td></tr></table></figure><p>注意： 导航的文字可自行更改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">清单||fa</span> <span class="attr">fa-heartbeat:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/Gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072059133.png" alt="img"></p><h2 id="代码-Code-Blocks"><a href="#代码-Code-Blocks" class="headerlink" title="代码 (Code Blocks)"></a>代码 (Code Blocks)</h2><blockquote><p>代码块中的所有功能只适用于 Hexo 自带的代码渲染</p><p>如果使用第三方的渲染器，不一定会有效</p></blockquote><h3 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h3><p>Butterfly 支持6种代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><p>修改 主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><blockquote><p>darker</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072100889.png" alt="img"></p><blockquote><p>pale night</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072100334.png" alt="img"></p><blockquote><p>light</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072100700.png" alt="img"></p><blockquote><p>ocean</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101386.png" alt="img"></p><blockquote><p>mac</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101737.png" alt="img"></p><blockquote><p>mac light</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101442.png" alt="image-20200731175026827"></p><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072101594.png" alt="img"></p><h3 id="代码框展开-关闭"><a href="#代码框展开-关闭" class="headerlink" title="代码框展开&#x2F;关闭"></a>代码框展开&#x2F;关闭</h3><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击&gt;可展开代码</p><ul><li>true 全部代码框不展开，需点击&gt;打开</li><li>false 代码框展开，有&gt;点击按钮</li><li>none 不显示&gt;按钮</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure><blockquote><p>你也可以在post&#x2F;page页对应的markdown文件front-matter添加highlight_shrink来独立配置。</p><p>当主题配置文件中的 highlight_shrink 设为true时，可在front-matter添加highlight_shrink: false来单独配置文章展开代码框。</p><p>当主题配置文件中的 highlight_shrink 设为false时，可在front-matter添加highlight_shrink: true来单独配置文章收缩代码框。</p></blockquote><p><code>highlight_shrink: true</code></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072102616.png" alt="img"></p><p><code>highlight_shrink: false</code></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072103552.png" alt="img"></p><p><code>highlight_shrink: none</code></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072103366.png" alt="img"></p><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><p>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你是使用 highlight 渲染，需要找到你站点的 Hexo 配置文件_config.yml，将line_number改成false:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><p>如果你是使用 prismjs 渲染，需要找到你站点的 Hexo 配置文件_config.yml，将line_number改成false:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>设置code_word_wrap之前:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072104470.png" alt="img"></p><p>设置code_word_wrap之后:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072104153.png" alt="img"></p><h3 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h3><blockquote><p>3.7.0 及以上支持</p></blockquote><p>可配置代码高度限制，超出的部分会隐藏，并显示展开按钮。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>单位是 px，直接添加数字，如 200</li><li>实际限制高度为 highlight_height_limit + 30 px ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。</li><li>不适用于隐藏后的代码块（ css 设置 display: none）</li></ol><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105585.gif" alt="hexo-theme-butterfly-docs-highlight-heigh-limit"></p><h2 id="社交图标-Social-Settings"><a href="#社交图标-Social-Settings" class="headerlink" title="社交图标 (Social Settings)"></a>社交图标 (Social Settings)</h2><p>Butterfly支持 font-awesome v6 图标.</p><p>书写格式 图标名：url || 描述性文字 || color</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span> <span class="string">||</span> <span class="string">&quot;#hdhfbb&quot;</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span> <span class="string">||</span> <span class="string">&quot;#000000&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105121.png" alt="img"></p><p>PC:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105313.png" alt="img"></p><p>Mobile:</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072105225.png" alt="1560603353743"></p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像会一直转圈</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072106042.png" alt="img"></p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><blockquote><p>如果不要显示顶部图，可直接配置 disable_top_img: true</p></blockquote><blockquote><p>顶部图的获取顺序，如果都没有配置，则不显示顶部图。</p><ol><li><p>页面顶部图的获取顺序：</p><p>各自配置的 top_img &gt; 配置文件的 default_top_img</p></li><li><p>文章页顶部图的获取顺序：</p><p>各自配置的 top_img &gt; cover &gt; 配置文件的 default_top_img</p></li></ol></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072106295.png" alt="image-20230807210647228"></p><p>其它页面 （tags&#x2F;categories&#x2F;自建页面）和 文章页 的 top_img ，请到对应的 md 页面设置front-matter中的top_img</p><p>以上所有的 top_img 可配置以下值</p><blockquote><p> 3.2.0 以下版本的配置只支持</p><ul><li>留空，true 和 false - 显示默认的顔色</li><li>img链接 - 显示所配置的图片</li></ul></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072107929.png" alt="image-20230807210721862"></p><p>tag_per_img 和 category_per_img 是 3.2.0 新增的内容，可对 tag 和 category 进行单独的配置</p><p>并不推荐为每个 tag 和每个 category 都配置不同的顶部图，因为配置太多会拖慢生成速度</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tag_per_img：</span></span><br><span class="line">  <span class="attr">aplayer:</span> <span class="string">https://xxxxxx.png</span></span><br><span class="line">  <span class="attr">android:</span> <span class="string">ddddddd.png</span></span><br><span class="line">  </span><br><span class="line"><span class="string">category_per_img：</span></span><br><span class="line">  <span class="string">随想:</span> <span class="string">hdhdh.png</span></span><br><span class="line">  <span class="string">推荐:</span> <span class="string">ddjdjdjd.png</span></span><br></pre></td></tr></table></figure><blockquote><p>top_img: false</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072107443.png" alt="image-20200924224536013"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072107817.png" alt="image-20201027210949089"></p><blockquote><p>top_img: orange</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072108160.png" alt="image-20200924225024153"></p><blockquote><p>top_img: ‘linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)’</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072108023.png" alt="image-20200924225300934"></p><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><p>文章的 markdown 文档上,在 Front-matter 添加 cover ,并填上要显示的图片地址。</p><p>如果不配置 cover,可以设置显示默认的 cover。</p><p>如果不想在首页显示 cover, 可以设置为 false。</p><blockquote><p>文章封面的获取顺序 Front-matter 的 cover &gt; 配置文件的 default_cover &gt; false</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110069.png" alt="image-20230807211011003"></p><p>当配置多张图片时,会随机选择一张作为cover.此时写法应为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110869.png" alt="img"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110295.png" alt="img"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110971.png" alt="img"></p><blockquote><p>left</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072110677.png" alt="img"></p><blockquote><p>right</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072111478.png" alt="img"></p><blockquote><p>both</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072111182.png" alt="img"></p><h2 id="页面-meta-显示"><a href="#页面-meta-显示" class="headerlink" title="页面 meta 显示"></a>页面 meta 显示</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure><blockquote><p>主页</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072111713.png" alt="img"></p><blockquote><p>文章页</p></blockquote><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072112598.png" alt="img"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072112995.png" alt="img"></p><p>date_format 是 3.2.0 新增的内容，配置时间显示明确时间还是相对时间</p><h2 id="主页文章节选-自动节选和文章页description"><a href="#主页文章节选-自动节选和文章页description" class="headerlink" title="主页文章节选(自动节选和文章页description)"></a>主页文章节选(自动节选和文章页description)</h2><p>因为主题UI的关係，主页文章节选只支持自动节选和文章页description。</p><p>在butterfly里，有四种可供选择</p><ol><li>description： 只显示description</li><li>both： 优先选择description，如果没有配置description，则显示自动节选的内容</li><li>auto_excerpt：只显示自动节选</li><li>false： 不显示文章内容</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><p>description在front-matter里添加</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072113793.png" alt="img"></p><h2 id="页面锚点"><a href="#页面锚点" class="headerlink" title="页面锚点"></a>页面锚点</h2><p>开启页面锚点后，当你在进行滚动时，页面链接会根据标题ID进行替换<br>(注意: 每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post , the url will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="attr">button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">always_show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="comment"># the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">auto_update:</span> <span class="literal">false</span> <span class="comment"># when you scroll in post, the URL will update according to header id.</span></span><br></pre></td></tr></table></figure><h2 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h2><p>可开启图片Figcaption描述文字显示</p><p>优先显示图片的 title 属性，然后是 alt 属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072114836.png" alt="img"></p><h2 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h2><p>可配置网站是否可以复制、复制的内容是否添加版权信息</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># copy settings</span></span><br><span class="line"><span class="section"># copyright: Add the copyright information after copied content (复制的内容后面加上版权信息)</span></span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line"><span class="code">    enable: true</span></span><br><span class="line"><span class="code">    limit_count: 50</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072114926.png" alt="image-20230807211429858"></p><blockquote><p>添加版权信息后</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, test link consectetur adipiscing elit. Strong text pellentesque ligula commodo viverra vehicula. Italic text at ullamcorper enim. Morbi a euismod nibh. Underline text non elit nisl. Deleted text tristique, sem id condimentum tempus, metus lectus venenatis mauris, sit amet semper lorem felis a eros. Fusce egestas nibh at sagittis auctor. Sed ultricies ac arcu quis molestie. Donec dapibus nunc in nibh egestas, vitae volutpat sem iaculis. Curabitur sem tellus, elementum nec quam id, fermentum laoreet mi. Ut mollis ullamcorper turpis, vitae facilisis velit ultricies sit amet. Etiam laoreet dui odio, id tempus justo tincidunt id. Phasellus scelerisque nunc sed nunc ultricies accumsan.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">作者: Jerry</span><br><span class="line">连结: http://localhost:4000/posts/bd3c650b/<span class="params">#</span>Paragraph</span><br><span class="line">来源: Butterfly</span><br><span class="line">着作权归作者所有。商业转载请联络作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h2><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072115931.png" alt="image-20210130161913121"></p><h3 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072116217.png" alt="image-20230807211609151"></p><h3 id="为特定的文章配置"><a href="#为特定的文章配置" class="headerlink" title="为特定的文章配置"></a>为特定的文章配置</h3><p>在你的文章md文件的头部，加入toc_number和toc，并配置true或者false即可。</p><p>主题会优先判断文章Markdown的Front-matter是否有配置，如有，则以Front-matter的配置为准。否则，以主题配置文件中的配置为准</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><blockquote><p>当文章封面设置为 false 时，或者没有获取到封面配置，相关文章背景将会显示主题色。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure><h3 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Displays outdated notice for a post (文章过期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span> <span class="comment"># When will it be shown</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span></span><br></pre></td></tr></table></figure><p>limit_day： 距离更新时间多少天才显示文章过期提醒</p><p>message_prev ： 天数之前的文字</p><p>message_next：天数之后的文字</p><h4 id="文章编辑按钮"><a href="#文章编辑按钮" class="headerlink" title="文章编辑按钮"></a>文章编辑按钮</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post edit</span></span><br><span class="line"><span class="comment"># Easily browse and edit blog source code online.</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/</span></span><br><span class="line">  <span class="comment"># For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span></span><br><span class="line">  <span class="attr">url:</span></span><br></pre></td></tr></table></figure><h3 id="文章分页按钮"><a href="#文章分页按钮" class="headerlink" title="文章分页按钮"></a>文章分页按钮</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分页)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072117788.png" alt="image-20230807211745729"></p><h2 id="Footer-设置"><a href="#Footer-设置" class="headerlink" title="Footer 设置"></a>Footer 设置</h2><h3 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure><h2 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span></span><br></pre></td></tr></table></figure><h3 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a>ICP</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;icp链接&quot;&gt;&lt;img</span> <span class="string">class=&quot;icp-icon&quot;</span> <span class="string">src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏设置-aside"><a href="#侧边栏设置-aside" class="headerlink" title="侧边栏设置 (aside)"></a>侧边栏设置 (aside)</h2><h3 id="侧边排版"><a href="#侧边排版" class="headerlink" title="侧边排版"></a>侧边排版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/xxxxxx</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># Order of tags, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="访问人数-busuanzi-UV-和-PV"><a href="#访问人数-busuanzi-UV-和-PV" class="headerlink" title="访问人数 busuanzi (UV 和 PV)"></a>访问人数 busuanzi (UV 和 PV)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果需要修改 busuanzi 的 CDN 链接，可通过 主题配置文件 的 CDN 中的 option 进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">  <span class="attr">busuanzi:</span> <span class="string">xxxxxxxxx</span></span><br></pre></td></tr></table></figure><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">6</span><span class="string">/7/2018</span> <span class="number">00</span><span class="string">:00:00</span>  </span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure><h3 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072120491.png" alt="image-20230807212012418"></p><h3 id="自定义添加栏目"><a href="#自定义添加栏目" class="headerlink" title="自定义添加栏目"></a>自定义添加栏目</h3><p><a href="https://butterfly.js.org/posts/ea33ab97/">https://butterfly.js.org/posts/ea33ab97/</a></p><h2 id="右下角按钮-Bottom-right-button"><a href="#右下角按钮-Bottom-right-button" class="headerlink" title="右下角按钮 (Bottom right button)"></a>右下角按钮 (Bottom right button)</h2><h3 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&quot;繁&quot;</span></span><br><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&quot;简&quot;</span></span><br></pre></td></tr></table></figure><h3 id="閲读模式"><a href="#閲读模式" class="headerlink" title="閲读模式"></a>閲读模式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072121962.png" alt="image-20230807212134887"></p><h3 id="滚动状态百分比"><a href="#滚动状态百分比" class="headerlink" title="滚动状态百分比"></a>滚动状态百分比</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show scroll percent in scroll-to-top button</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="按钮排序"><a href="#按钮排序" class="headerlink" title="按钮排序"></a>按钮排序</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )</span></span><br><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat 不要重复</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="comment"># readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">show:</span> <span class="comment"># toc,chat,comment</span></span><br></pre></td></tr></table></figure><h3 id="标签外挂（Tag-Plugins）"><a href="#标签外挂（Tag-Plugins）" class="headerlink" title="标签外挂（Tag Plugins）"></a>标签外挂（Tag Plugins）</h3><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89</a></p><h2 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB">https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB</a><br>%86%8A%E5%9C%96%E5%BA%AB</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装文档 </tag>
            
            <tag> butterfly </tag>
            
            <tag> 语言 </tag>
            
            <tag> 网站资料 </tag>
            
            <tag> 导航栏设置 </tag>
            
            <tag> 参数设置 </tag>
            
            <tag> 菜单/目录 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 代码高亮主题 </tag>
            
            <tag> 代码复制 </tag>
            
            <tag> 代码框展开/关闭 </tag>
            
            <tag> 代码换行 </tag>
            
            <tag> 代码高度限制 </tag>
            
            <tag> 社交图标 </tag>
            
            <tag> 头像 </tag>
            
            <tag> 顶部图 </tag>
            
            <tag> 图片描述 </tag>
            
            <tag> 复制相关配置 </tag>
            
            <tag> 文章页相关配置 </tag>
            
            <tag> 文章版权 </tag>
            
            <tag> 文章打赏 </tag>
            
            <tag> toc </tag>
            
            <tag> 相关文章 </tag>
            
            <tag> 文章过期提醒 </tag>
            
            <tag> 文章编辑按钮 </tag>
            
            <tag> 文章分页按钮 </tag>
            
            <tag> footer设置 </tag>
            
            <tag> 页脚自定义文本 </tag>
            
            <tag> icp </tag>
            
            <tag> 侧边栏设置 </tag>
            
            <tag> 侧边排版 </tag>
            
            <tag> 访问人数 </tag>
            
            <tag> 运行时间 </tag>
            
            <tag> 最新评论 </tag>
            
            <tag> 自定义添加栏目 </tag>
            
            <tag> 右下角按钮 </tag>
            
            <tag> 简繁转换 </tag>
            
            <tag> 閲读模式 </tag>
            
            <tag> 夜间模式 </tag>
            
            <tag> 滚动状态百分比 </tag>
            
            <tag> 按钮排序 </tag>
            
            <tag> 标签外挂 </tag>
            
            <tag> gallery相册图库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly 安装文档(一) 快速开始</title>
      <link href="/9c175aca.html"/>
      <url>/9c175aca.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在你的Hexo根目录里面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h2 id="升级建议"><a href="#升级建议" class="headerlink" title="升级建议"></a>升级建议</h2><blockquote><p>升级完成后，请到 Github 的 Releases 界面 或者 文档七 查看新版的更新内容。</p><p>里面有标注 _config 文件的变更内容（如有），请根据实际情况更新你的配置内容。</p></blockquote><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做）。</p><p>在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。( 注意: 复制的是主题的 _config.yml ，而不是 hexo 的 _config.yml)</p><blockquote><p>注意： 不要把主题目录的 _config.yml 删掉</p></blockquote><blockquote><p>注意： 以后只需要在 _config.butterfly.yml 进行配置就行。<br>        如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</p></blockquote><p>Hexo会自动合併主题中的 _config.yml 和 _config.butterfly.yml 里的配置，如果存在同名配置，会使用 _config.butterfly.yml 的配置，其优先度较高。</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072043458.png" alt="image-20200805191531090"></p><p>g&#x2F;202308072043458.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 插件 </tag>
            
            <tag> 安装文档 </tag>
            
            <tag> butterfly </tag>
            
            <tag> 主题 </tag>
            
            <tag> pug </tag>
            
            <tag> stylus </tag>
            
            <tag> 升级建议 </tag>
            
            <tag> _config.yml </tag>
            
            <tag> releases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Picgo图床之COS、OSS、Github图床</title>
      <link href="/e27b9279.html"/>
      <url>/e27b9279.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PicGo是一款开源的图片上传和管理工具，它提供了简单易用的界面和丰富的功能，方便用户上传、管理和分享图片。</p><p>以下是PicGo的一些主要特点和功能：</p><ol><li><p>图片上传：PicGo支持将本地图片快速上传到云存储服务，如七牛云、腾讯云、阿里云等。你可以选择自己喜欢的云存储服务，并通过PicGo将图片批量上传到云端。</p></li><li><p>图片压缩：PicGo内置了图片压缩功能，可以帮助你在上传图片之前对图片进行压缩，减小图片文件大小，提高网页加载速度。</p></li><li><p>图片编辑：PicGo提供了简单的图片编辑功能，包括裁剪、旋转、调整亮度、对比度等。你可以在上传图片之前对图片进行一些基本的编辑操作。</p></li><li><p>图片管理：PicGo可以帮助你管理上传的图片，包括查看上传记录、复制图片链接、删除图片等。你可以方便地管理自己上传的图片，并在需要时获取图片链接进行分享。</p></li><li><p>自定义配置：PicGo支持自定义配置，你可以根据自己的需求设置上传的命名规则、存储路径、图片样式等。这样可以更好地满足个性化的需求。</p></li></ol><p>总的来说，PicGo是一款功能强大且易于使用的图片上传和管理工具，适用于个人用户、开发者和博主等多种场景。它可以帮助你更高效地上传、管理和分享图片。</p><h2 id="准备PicGo"><a href="#准备PicGo" class="headerlink" title="准备PicGo"></a>准备PicGo</h2><p>官网下载地址：<a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p><p>关注【程序员朱永胜】回复【1012】获取安装包，免费高速下载</p><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><h3 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072004107.png" alt="image-20230807200430847"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072005596.png"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072005838.png"></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>随便创建一个仓库即可，我创建的是<code>pic</code>仓库</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072007898.png" alt="image-20230807200705649"></p><h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072007590.png"></p><h2 id="配置腾讯云COS"><a href="#配置腾讯云COS" class="headerlink" title="配置腾讯云COS"></a>配置腾讯云COS</h2><h3 id="获取Token-1"><a href="#获取Token-1" class="headerlink" title="获取Token"></a>获取Token</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072008733.png" alt="image-20230807200848497"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072009686.png" alt="image-20230807200924438"></p><h3 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072010800.png"></p><p>设置为公有读私有写</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072011353.png" alt="image-20230807201130106"></p><p>参考下面模版填写</p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072011921.png" alt="image-20230807201157858"></p><h2 id="设置阿里云OSS"><a href="#设置阿里云OSS" class="headerlink" title="设置阿里云OSS"></a>设置阿里云OSS</h2><h3 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072013528.png" alt="image-20230807201312297"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072013156.png" alt="image-20230807201333924"></p><h3 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072014937.png" alt="image-20230807201403715"></p><h3 id="参考下面模版"><a href="#参考下面模版" class="headerlink" title="参考下面模版"></a>参考下面模版</h3><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072014966.png" alt="image-20230807201422903"></p><p><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072015802.png" alt="image-20230807201500562"><br>qcloud.com&#x2F;blog&#x2F;202308072015802.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> github </tag>
            
            <tag> picgo </tag>
            
            <tag> cos </tag>
            
            <tag> oss </tag>
            
            <tag> 图片上传 </tag>
            
            <tag> 图片压缩 </tag>
            
            <tag> 图片编辑 </tag>
            
            <tag> 图片管理 </tag>
            
            <tag> 自定义配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jrebel与Xrebel激活</title>
      <link href="/db82e5f2.html"/>
      <url>/db82e5f2.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JRebel和XRebel是两个非常有用的工具，可以显著提升Java开发人员的生产力和应用程序性能。</p><p>JRebel是一个强大的Java开发工具，它允许开发人员在不重新启动应用程序的情况下进行代码修改和调试。传统上，每次修改Java代码都需要重新编译和重新启动应用程序，这会浪费大量的时间。但是，使用JRebel，你可以即时看到你的代码修改的效果，无需重新启动应用程序。这种即时反馈的能力极大地提高了开发效率，缩短了开发周期。</p><p>JRebel通过在运行时重新加载修改的类文件，使得代码修改能够立即生效。它支持各种Java框架和服务器，包括Spring、Hibernate、Tomcat等。此外，JRebel还提供了与常见IDE（如Eclipse、IntelliJ IDEA）的集成，使得使用JRebel变得更加方便。</p><p>XRebel是另一个强大的工具，专注于Java应用程序的性能监控和优化。它可以实时监测和分析应用程序的性能瓶颈，帮助开发人员快速定位和解决性能问题。XRebel提供了一个直观的用户界面，显示了应用程序的请求和响应时间、数据库查询、HTTP会话等关键指标。它还能够检测潜在的性能问题，如慢查询、内存泄漏等，并提供相应的建议和解决方案。</p><p>XRebel支持各种Java应用程序，包括Web应用程序、企业应用程序等。它可以与常见的Java开发工具和服务器集成，如Eclipse、IntelliJ IDEA、Tomcat等。</p><p>综上所述，JRebel和XRebel是两个非常有用的工具，可以极大地提升Java开发人员的生产力和应用程序性能。JRebel允许即时查看代码修改的效果，而XRebel帮助开发人员实时监测和优化应用程序的性能。这两个工具的结合将为你的Java开发带来更高效和优化的体验。</p><h2 id="下载代理软件"><a href="#下载代理软件" class="headerlink" title="下载代理软件"></a>下载代理软件</h2><p>请关注某绿色软件【程序员朱永胜】回复<code>1011</code>获取</p><h2 id="双击打开"><a href="#双击打开" class="headerlink" title="双击打开"></a>双击打开</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308072033983.png" alt="image-20230806204843304"></h2><h2 id="获取UUID"><a href="#获取UUID" class="headerlink" title="获取UUID"></a>获取UUID</h2><p>打开<a href="https://www.guidgen.com/">https://www.guidgen.com/</a> 生成一个UUID</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308062049509.png" alt="image-20230806204943298"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>拷贝UUID到这里即可激活</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308062051024.png" alt="image-20230806205133975"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308062052295.png"><br>com&#x2F;202308062052295.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发效率 </tag>
            
            <tag> jrebel </tag>
            
            <tag> xrebel </tag>
            
            <tag> java开发工具 </tag>
            
            <tag> 即时查看代码修改的效果 </tag>
            
            <tag> 实时监测和优化应用程序的性能 </tag>
            
            <tag> 开发周期 </tag>
            
            <tag> 性能监控 </tag>
            
            <tag> 性能瓶颈 </tag>
            
            <tag> 性能问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 2023.2 最新变化</title>
      <link href="/571b0dbd.html"/>
      <url>/571b0dbd.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><p>IntelliJ IDEA 2023.2 引入 AI Assistant，通过一组由 AI 提供支持的功能助力开发。 升级的 IntelliJ 分析器现在提供编辑器内提示，使分析进程更加直观详尽。 此版本还包括有助于简化开发工作流的 GitLab 集成，以及其他多项值得关注的更新和改进，如下所述：</p><h1 id="主要更新"><a href="#主要更新" class="headerlink" title="主要更新"></a>主要更新</h1><p> <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959533.png">  </p><h3 id="AI-Assistant"><a href="#AI-Assistant" class="headerlink" title="AI Assistant"></a>AI Assistant</h3><p>限定访问 Ultimate 在此版本中，我们为 IntelliJ IDEA 引入了一项重要补充 – AI Assistant。 AI Assistant 当前具备一组由 AI 提供支持的初始功能，提供集成式 AI 聊天，可以完成一些任务，例如自动编写文档注释、建议名称、生成提交消息等。 JetBrains AI 服务为 AI Assistant 提供技术支持，此服务目前可以连接到 OpenAI，后续还将包含其他语言模型提供商。 要访问 Assistant 的 AI 功能，您需要安装 AI Assistant 插件并使用 JetBrains Account 登录 JetBrains AI 服务。 JetBrains AI 服务的初始可用性可能受限。 有关 AI Assistant 的更多信息以及访问说明，请查阅<a href="https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/">这篇博文</a>。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959642.png"></p><h3 id="编辑器内性能提示"><a href="#编辑器内性能提示" class="headerlink" title="编辑器内性能提示"></a>编辑器内性能提示</h3><p>Ultimate 在 IntelliJ IDEA 2023.2 中，我们增强了 IntelliJ 分析器，为应用程序性能提供更有价值且易于理解的洞察。 新的编辑器内提示可供快速逐行分析代码性能，帮助您更快识别和解决问题。 编辑器装订区域中的颜色编码注解可以高亮显示关键方法，让您专注于性能瓶颈。 因此，您不再需要使用 _Flame Graph_（火焰图）和 _Call Tree_（调用树）视图执行彻底、耗时的分析。 在这篇<a href="https://blog.jetbrains.com/idea/2023/05/intellij-idea-2023-2-eap/#In-editorperformancehints">博文</a>中了解详情。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959607.png"> </p><h3 id="GitLab-集成"><a href="#GitLab-集成" class="headerlink" title="GitLab 集成"></a>GitLab 集成</h3><p> IntelliJ IDEA 2023.2 引入了与 GitLab 的集成，帮助简化您的开发工作流。 现在，您可以直接在 IDE 中使用 _Merge Requests_（合并请求）功能：查看请求列表、检查更改、留下评论，以及导航到相关视图。 <a href="https://blog.jetbrains.com/2023/07/25/gitlab-support-in-jetbrains-ides/">了解详情</a>。 </p><h1 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959553.png"> </p><h3 id="Search-Everywhere-（随处搜索）中的文本搜索"><a href="#Search-Everywhere-（随处搜索）中的文本搜索" class="headerlink" title="Search Everywhere_（随处搜索）中的文本搜索"></a>Search Everywhere_（随处搜索）中的文本搜索</h3><p>Search Everywhere_（随处搜索）（按两次 Shift）主要用于搜索文件、类、方法、操作和设置。 在此更新后，它将包含类似于 _Find in Files_（在文件中查找）的文本搜索功能。 现在，当给定查询的其他搜索结果很少或没有时，将显示文本搜索结果。 此功能默认启用，可以在 _Settings&#x2F;Preferences | Advanced Settings | Search Everywhere_（设置&#x2F;偏好设置 | 高级设置 | 随处搜索）中管理。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959581.png"> </p><h3 id="新-UI-中的彩色项目标题"><a href="#新-UI-中的彩色项目标题" class="headerlink" title="新 UI 中的彩色项目标题"></a>新 UI 中的彩色项目标题</h3><p>IntelliJ IDEA 2023.2 引入了彩色标题，可以简化多个打开的项目之间的导航。 现在，您可以为每个项目分配唯一的颜色和图标，使其在工作区中更易区分。 标题现在默认带有预定义的颜色，但您也可以自定义。 要为项目设置新的颜色，首先右键点击标题，然后访问上下文菜单。 然后，选择 _Change Project Color_（更改项目颜色）选项，并从建议的列表中选择所需颜色，或者浏览调色盘。 如果您想禁用此功能，只需在上下文菜单中取消选择 _Show Project Gradient_（显示项目渐变）选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959569.png"> </p><h3 id="在-Windows-和-Linux-上的主工具栏中重做了汉堡包菜单"><a href="#在-Windows-和-Linux-上的主工具栏中重做了汉堡包菜单" class="headerlink" title="在 Windows 和 Linux 上的主工具栏中重做了汉堡包菜单"></a>在 Windows 和 Linux 上的主工具栏中重做了汉堡包菜单</h3><p>我们改进了 Windows 和 Linux 上新 UI 中主工具栏汉堡包菜单的行为。 点击菜单图标后，元素现在水平显示在工具栏上方。 此外，现在还有一个选项可以将此菜单转换为单独的工具栏，此选项的路径为 _View | Appearance | Main menu as a Separate Toolbar_（视图 | 外观 | 主菜单作为单独的工具栏）。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959104.png"> </p><h3 id="在-Project-（项目）视图中按修改时间对文件进行排序"><a href="#在-Project-（项目）视图中按修改时间对文件进行排序" class="headerlink" title="在 _Project_（项目）视图中按修改时间对文件进行排序"></a>在 _Project_（项目）视图中按修改时间对文件进行排序</h3><p>IntelliJ IDEA 2023.2 添加了备受期待的功能，让您可以根据修改时间在 _Project_（项目）视图中排列文件。 每当项目中有更改被保存时，这个新功能就会自动重排文件。 要启用此功能，首先打开 _Project_（项目）视图中的竖三点菜单，然后选择 _Tree Appearance | Sort by Modification Time_（树外观 | 按修改时间排序）。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959174.png"> </p><h3 id="新-UI-中带有浅色标题的浅色主题"><a href="#新-UI-中带有浅色标题的浅色主题" class="headerlink" title="新 UI 中带有浅色标题的浅色主题"></a>新 UI 中带有浅色标题的浅色主题</h3><p>在 v2023.2 中，我们通过引入替代的 _Light with Light Header_（带有浅色标题的浅色主题）选项提升了_浅色_主题的用户体验，该选项可为窗口标题、工具提示和通知气球提供匹配的浅色。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959161.png"> </p><h3 id="更新了-macOS-上的窗口控件"><a href="#更新了-macOS-上的窗口控件" class="headerlink" title="更新了 macOS 上的窗口控件"></a>更新了 macOS 上的窗口控件</h3><p>在 macOS 上以全屏模式使用新 UI 时，窗口控件现在将在主工具栏上显示，而不是像以前一样在浮动栏上显示。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959213.png"> </p><h3 id="在新-UI-中移除了-Linux-上的标题栏"><a href="#在新-UI-中移除了-Linux-上的标题栏" class="headerlink" title="在新 UI 中移除了 Linux 上的标题栏"></a>在新 UI 中移除了 Linux 上的标题栏</h3><p>为了方便 Linux 用户，新 UI 中移除了操作系统的原生标题，使界面更加整洁。 默认将显示 IDE 的自定义标题，该标题提供了一系列工作区自定义选项。 如果您希望将标题还原为之前的外观，请取消选择 _Settings | Appearance &amp; Behavior | Appearance | UI Options_（设置 | 外观与行为 | 外观 | UI 选项）中的 <em>Merge main menu with window title</em> （将主菜单与窗口标题合并）选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959154.png"></p><h3 id="检查描述中的语法高亮显示"><a href="#检查描述中的语法高亮显示" class="headerlink" title="检查描述中的语法高亮显示"></a>检查描述中的语法高亮显示</h3><p>在 _Settings &#x2F; Preferences | Editor | Inspections_（设置&#x2F;偏好设置 | 编辑器 | 检查）中，代码示例现在将包含语法高亮显示，让您可以更容易理解是什么触发了检查并决定使其处于活跃状态还是停用状态。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959183.png"> </p><h3 id="在项目目录之间单击导航"><a href="#在项目目录之间单击导航" class="headerlink" title="在项目目录之间单击导航"></a>在项目目录之间单击导航</h3><p>在 _Project_（项目）视图中，新增了 _Open Directories with Single Click_（单击打开目录）选项，可以更快展开和收起项目文件夹，更快响应。 点击竖三点菜单后，可以从下拉菜单中选择该选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959630.png"> </p><h3 id="改进了主工具栏自定义"><a href="#改进了主工具栏自定义" class="headerlink" title="改进了主工具栏自定义"></a>改进了主工具栏自定义</h3><p>我们扩展了新 UI 主工具栏的自定义选项。 现在，您可以使用下拉菜单快速选择要添加到工具栏的操作。 右键点击任意微件，选择 _Add to Main Toolbar_（添加到主工具栏），然后浏览可用选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959584.png"> </p><h3 id="Settings-Preferences-（设置-偏好设置）中的推荐插件"><a href="#Settings-Preferences-（设置-偏好设置）中的推荐插件" class="headerlink" title="Settings&#x2F;Preferences_（设置&#x2F;偏好设置）中的推荐插件"></a>Settings&#x2F;Preferences_（设置&#x2F;偏好设置）中的推荐插件</h3><p>为了让您可以更轻松地为特定项目配置 IDE 以及通过插件扩展其功能，我们更新了 _Settings&#x2F;Preferences | Plugins_（设置&#x2F;偏好设置 | 插件）部分的 UI。 它现在包含一组推荐插件，根据您的项目具体情况自动定义，并在列表顶部显示。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959577.png"> </p><h3 id="更新了Services（服务）工具窗口中-Run-Debug-（运行-调试）"><a href="#更新了Services（服务）工具窗口中-Run-Debug-（运行-调试）" class="headerlink" title="更新了Services（服务）工具窗口中 _Run&#x2F;Debug_（运行&#x2F;调试）"></a>更新了Services（服务）工具窗口中 _Run&#x2F;Debug_（运行&#x2F;调试）</h3><p>微件的 UI 我们重做了 _Services_（服务）工具窗口中运行和调试操作的 UI，使工具栏外观与主 _Run&#x2F;Debug_（运行&#x2F;调试）微件一致。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959619.png"> </p><h3 id="在-Run-（运行）微件中固定运行配置"><a href="#在-Run-（运行）微件中固定运行配置" class="headerlink" title="在 _Run_（运行）微件中固定运行配置"></a>在 _Run_（运行）微件中固定运行配置</h3><p>为了简化多个运行配置的管理，我们在 _Run_（运行）微件中实现了固定首选配置的选项。 要将运行配置添加到 _Pinned_（固定）部分，首先打开其名称旁边的竖三点菜单，然后选择 _Pin_（固定）。 如果有多个固定的配置，在列表中拖放即可轻松排列。<br>#Java </p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959626.png"> </p><h3 id="新检查和其他代码分析改进"><a href="#新检查和其他代码分析改进" class="headerlink" title="新检查和其他代码分析改进"></a>新检查和其他代码分析改进</h3><p>我们改进并扩展了 Java 检查，帮助您维护优质代码并更有效地检测潜在问题。 当模式引用与实参不匹配时，新的 _Incorrect ‘MessageFormat’ pattern_（’MessageFormat’ 模式不正确）检查会发出警告，并且它还会检测 <code>MessageFormat</code> 模式中引号和大括号的错误用法。 此外，IDE 现在将报告带有显式 <code>ChronoField</code> 或 <code>ChronoUnit</code> 实参的调用，并建议将其替换为更具体的方法的调用，从而简化代码。 在这篇<a href="https://blog.jetbrains.com/idea/2023/05/intellij-idea-2023-2-eap-2/#Newinspectionsandothercodeanalysisimprovementss_and_other_improvements">博文</a>中详细了解 IntelliJ IDEA 2023.2 中的新检查和其他代码分析改进。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959640.png"> </p><h3 id="格式字符串的代码高亮显示和导航"><a href="#格式字符串的代码高亮显示和导航" class="headerlink" title="格式字符串的代码高亮显示和导航"></a>格式字符串的代码高亮显示和导航</h3><p>现在，将文本光标置于格式说明符上后，IDE 将高亮显示相应实参和指向它的其他说明符。 此外，您现在可以使用 _Go To Declaration_（转到声明）(Ctrl+B) 跳转到特定格式字符串占位符的关联代码位置。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959020.png"> </p><h3 id="改进了对-Javadoc-注释中-snippet-标记的支持"><a href="#改进了对-Javadoc-注释中-snippet-标记的支持" class="headerlink" title="改进了对 Javadoc 注释中 @snippet 标记的支持"></a>改进了对 Javadoc 注释中 <code>@snippet</code> 标记的支持</h3><p>IntelliJ IDEA 改进了 Javadoc 注释中的 <code>@snippet</code> 标记功能。 它允许在 <code>@snippet</code> 标记内添加标记注释，并在文档中正确呈现。 代码区域已得到支持，您可以指定要在 Javadoc 注释中引用的代码部分。 此外，IDE 现在还支持在 <code>@snippet</code> 标记内包含外部代码段，这将允许您引用存储在单独文件或源中的代码段，并将其包含在 Javadoc 文档中。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959078.png"> </p><h3 id="扩展了多个选定成员的重构选项"><a href="#扩展了多个选定成员的重构选项" class="headerlink" title="扩展了多个选定成员的重构选项"></a>扩展了多个选定成员的重构选项</h3><p>我们添加了新方式，可供同时将特定重构应用于多个成员。 现在，您可以在 _Project_（项目）或 _Structure_（结构）工具窗口中直接选择多个成员，同时对其调用 _Extract Delegate_（提取委托）、_Extract Interface_（提取接口）、_Extract Superclass_（提取超类）、_Pull Members Up_（向上拉取成员）和 _Push Members Down_（向下推送成员）。 此外，IntelliJ IDEA 现在支持以多文本光标选择进行扩展范围的重构，包括 _Encapsulate Fields_（封装字段）、_Move Static Members_（移动 static 成员）、_Extract Delegate_（提取委托）、_Extract Interface_（提取接口）和 _Extract Superclass_（提取超类）。 要利用此功能，请将文本光标放置在您希望应用重构的各成员中，IDE 将自动在重构对话框中预选并检查这些成员。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959060.png"> </p><h3 id="改进了堆栈跟踪分析的导航"><a href="#改进了堆栈跟踪分析的导航" class="headerlink" title="改进了堆栈跟踪分析的导航"></a>改进了堆栈跟踪分析的导航</h3><p>为了改进堆栈跟踪分析并更快地解决 bug，IntelliJ IDEA 现在可以准确猜测报告中方法的位置，即使行号不可用或已偏离。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959089.png"> </p><h3 id="增强了动态-SQL-查询的污点分析"><a href="#增强了动态-SQL-查询的污点分析" class="headerlink" title="增强了动态 SQL 查询的污点分析"></a>增强了动态 SQL 查询的污点分析</h3><p>Ultimate IntelliJ IDEA 现在可以更好地分析 Java 和 Kotlin 中 SQL 的串联和内插，检测潜在的不安全查询，使代码避免可能的 SQL 注入漏洞。 </p><h1 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959113.png"> </p><h3 id="更出色的-Scala-3-支持"><a href="#更出色的-Scala-3-支持" class="headerlink" title="更出色的 Scala 3 支持"></a>更出色的 Scala 3 支持</h3><p>IntelliJ IDEA 2023.2 增强了 Scala 3 支持，专注于简化开发体验。 值得注意的改进包括对 Scala 3 枚举高亮显示的修正、枚举定义导航，以及多种上下文中枚举 case 的正确解析。 TASTy 反编译器得到显著增强，确保对 Akka、Cats、Play、ZIO 等流行 Scala 库进行准确的反编译。 此外，调试器中的 <code>scala-expression-compiler</code> 集成也将为 Scala 开发者提供更好的调试体验。 其他改进包括 Scala 3 通用应用方法的增强补全提示、对 IArray 的编辑器内支持，以及对“更少大括号”语法的改进支持。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959170.png"> </p><h3 id="更好的-sbt-支持"><a href="#更好的-sbt-支持" class="headerlink" title="更好的 sbt 支持"></a>更好的 sbt 支持</h3><p>此版本对 IntelliJ IDEA 的 sbt 支持进行了许多改进。 重新打开项目后，为 sbt 设置的环境变量将被保留并正确处理。 重新设计的设置页面 _File | Settings | Build, Execution, Deployment | Build Tools | sbt_（文件 | 设置 | 构建、执行、部署 | 构建工具 | sbt）更为易用，并新增了 _Environment variables_（环境变量）字段，因此，您可以将自定义环境变量传递到 sbt-shell 进程。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959482.png"> </p><h3 id="ScalaDoc-呈现"><a href="#ScalaDoc-呈现" class="headerlink" title="ScalaDoc 呈现"></a>ScalaDoc 呈现</h3><p>在这个版本中，ScalaDoc 的快速文档与 Javadoc 的更加一致。 现在，显示的声明中的注解、关键字和文字将根据所选主题高亮显示。 如果超出可用空间，扩展的特征和类的列表将分成多行。 此外，文档中现在也支持 Scala 3 关键字。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959505.png"> </p><h3 id="修正了类型推断错误"><a href="#修正了类型推断错误" class="headerlink" title="修正了类型推断错误"></a>修正了类型推断错误</h3><p>新版本对某些复杂或罕见情况下的无效类型推断进行了许多修正，例如类型具有复杂边界、sealed 特征层次结构可能不清晰或在复杂模式匹配中的情况。</p><h3 id="Zinc-作为默认编译器"><a href="#Zinc-作为默认编译器" class="headerlink" title="Zinc 作为默认编译器"></a>Zinc 作为默认编译器</h3><p>鉴于 Zinc 最近的性能改进，我们在 v2023.2 中将其设为默认增量编译器。 这确保了对 Scala 3 新功能（包括 <code>inline</code> 方法）的增量编译的全面支持。</p><h3 id="改进了源目录和目标目录的管理"><a href="#改进了源目录和目标目录的管理" class="headerlink" title="改进了源目录和目标目录的管理"></a>改进了源目录和目标目录的管理</h3><p>目标文件夹的子文件夹不再自动包含为源，除非它们被标记为托管。 这将加快在生成源代码的项目中进行搜索的速度。 此外，IDE 还为 <code>sbt-projectmatrix</code> 提供了更好的支持。 </p><h1 id="性能分析器"><a href="#性能分析器" class="headerlink" title="性能分析器"></a>性能分析器</h1><p>—– <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959514.png"> </p><h3 id="从-Run-（运行）工具窗口使用分析功能"><a href="#从-Run-（运行）工具窗口使用分析功能" class="headerlink" title="从 _Run_（运行）工具窗口使用分析功能"></a>从 _Run_（运行）工具窗口使用分析功能</h3><p>Ultimate 在 IntelliJ IDEA 2023.2 中，您可以直接从 _Run_（运行）工具窗口轻松访问 IntelliJ 分析器的功能。 使用新按钮，点击一下即可调用 _Attach IntelliJ Profiler_（附加 IntelliJ 分析器）和 _Capture Memory Snapshot_（捕获内存快照）操作，无需打开 _Profiler_（分析器）工具窗口或从头启动应用程序。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959496.png"> </p><h3 id="默认挂钟分析模式"><a href="#默认挂钟分析模式" class="headerlink" title="默认挂钟分析模式"></a>默认挂钟分析模式</h3><p>Ultimate 我们将挂钟分析模式设为默认选项，增强了 IntelliJ IDEA 2023.2 中的分析体验。 此分析方法会考虑在方法中花费的总时间，包括等待时间。 它以毫秒为测量单位，是更强大、更直观的选项。</p><h1 id="运行-调试"><a href="#运行-调试" class="headerlink" title="运行&#x2F;调试"></a>运行&#x2F;调试</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959539.png"> </p><h3 id="Reactor-Mono-和-Flux-值求算"><a href="#Reactor-Mono-和-Flux-值求算" class="headerlink" title="Reactor Mono 和 Flux 值求算"></a>Reactor <code>Mono</code> 和 <code>Flux</code> 值求算</h3><p>Ultimate 调试反应式应用程序时，您现在可以轻松求算 <code>Mono</code> 和 <code>Flux</code> 类型的监视和局部变量的值。 IDE 现在会在调试会话期间进行检测，并在 _Variables_（变量）视图中提供相应的 <code>get</code> 或 <code>collectList</code> 链接，点击即可立即计算 Reactive Streams 条目。 默认情况下，调试器会获取 <code>Flux</code> 的前 100 个条目。 您可以在 _File | Settings | Languages &amp; Frameworks | Reactive Streams_（文件 | 设置 | 语言和框架 | Reactive Streams）中配置此数量。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959545.png"> </p><h3 id="Gradle、Maven-和-JPS-项目的持续测试"><a href="#Gradle、Maven-和-JPS-项目的持续测试" class="headerlink" title="Gradle、Maven 和 JPS 项目的持续测试"></a>Gradle、Maven 和 JPS 项目的持续测试</h3><p>我们扩展了自动测试功能，使其与 Maven、Gradle 和 JPS 构建系统完全兼容。 我们还使持续测试模式更易激活。 要启用该模式，请使用 _Run&#x2F;Debug_（运行&#x2F;调试）工具窗口中新增的 _Rerun Automatically_（自动重新运行）按钮。 每当更改保存时，测试都会自动运行，对代码更新提供即时反馈。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959903.png"> </p><h3 id="return-语句的内联断点"><a href="#return-语句的内联断点" class="headerlink" title="return 语句的内联断点"></a>return 语句的内联断点</h3><p>IntelliJ IDEA 提供了对直接在 return 语句处设置断点的改进支持，类似于已在 lambda 表达式中实现的设置方式。 这一改进将为开发者提供更高的调试精度和更深入的代码分析，带来更有价值的代码行为和返回值洞察。 要设置内联断点，只需右键点击语句旁边的装订区域并选择 <em>return</em> 选项即可。</p><h1 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959958.png"> </p><h3 id="提交特定代码行的选项"><a href="#提交特定代码行的选项" class="headerlink" title="提交特定代码行的选项"></a>提交特定代码行的选项</h3><p>IntelliJ IDEA 2023.2 引入了一项备受期待的功能，可供有选择地提交代码区块的特定部分。 要执行部分提交，请选择区块中的行，然后从上下文菜单中调用 _Include these lines into commit_（将所选行包含到提交中）。 区块将被分为单独的行，所选行将被高亮显示。 您可以使用复选框或上下文菜单在选区中添加或排除行。 </p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959046.png"> </p><h3 id="轻松生成共享索引的新工具"><a href="#轻松生成共享索引的新工具" class="headerlink" title="轻松生成共享索引的新工具"></a>轻松生成共享索引的新工具</h3><p>IntelliJ IDEA 2023.2 提供了新的命令行工具，用于快速构建和上传共享索引。 它旨在简化团队合作并消除本地索引大型项目花费的时间。 新工具将简化为团队生成共享索引的过程，只需几下点击，无需多个脚本和服务。 <a href="https://blog.jetbrains.com/idea/2023/05/intellij-idea-2023-2-eap/#Newtoolforeasilygeneratingsharedindexes">了解详情</a>。 </p><h1 id="框架和技术"><a href="#框架和技术" class="headerlink" title="框架和技术"></a>框架和技术</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959036.png"> </p><h3 id="在-WSL-上运行和调试"><a href="#在-WSL-上运行和调试" class="headerlink" title="在 WSL 上运行和调试"></a>在 WSL 上运行和调试</h3><p>Tomcat Ultimate 从 IntelliJ IDEA 2023.2 开始，您可以在适用于 Linux 的 Windows 子系统 (WSL) 上运行和调试部署到 Tomcat 的应用程序。 要在 WSL 上使用基于 Tomcat 的应用程序，您需要在 <code>/etc/environment</code> 或 <code>~/.bashrc</code> 文件中声明 <code>JAVA_HOME</code> 环境变量。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959971.png"> </p><h3 id="在-HTTP-客户端中使用-TLS-发送-gRPC-请求"><a href="#在-HTTP-客户端中使用-TLS-发送-gRPC-请求" class="headerlink" title="在 HTTP 客户端中使用 TLS 发送 gRPC 请求"></a>在 HTTP 客户端中使用 TLS 发送 gRPC 请求</h3><p>Ultimate 您现在可以在 HTTP 客户端中通过传输层安全 (TLS) 发送 gRPC 请求。 TLS 提供加密和身份验证，确保数据传输的保密性和完整性。 请求语法支持 <code>https://</code> 和 <code>grpcs://</code> 架构。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959025.png"> </p><h3 id="针对-Swagger-Codegen-的改进"><a href="#针对-Swagger-Codegen-的改进" class="headerlink" title="针对 Swagger Codegen 的改进"></a>针对 Swagger Codegen 的改进</h3><p>Ultimate 设置 Swagger Codegen 配置时，IDE 现在将提供更好的用户体验。 我们重做了 _Edit Swagger Codegen Configuration_（编辑 Swagger Codegen 配置）对话框，让您可以更轻松地根据需求定制运行配置。 另外，您现在还可以直接从装订区域访问 Swagger Codegen 运行配置，无需指定额外设置。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959353.png"></p><h3 id="HTTP-客户端中对-Swagger-和-OpenAPI-架构的支持"><a href="#HTTP-客户端中对-Swagger-和-OpenAPI-架构的支持" class="headerlink" title="HTTP 客户端中对 Swagger 和 OpenAPI 架构的支持"></a>HTTP 客户端中对 Swagger 和 OpenAPI 架构的支持</h3><p>Ultimate HTTP 客户端现在能够理解 Swagger 和 OpenAPI 规范，并为 JSON 请求正文提供相应的代码补全选项。 <a href="https://www.jetbrains.com.cn/idea/whatsnew/2023-2/img/Redoc_UI_previews_for_OpenAPI_and_Swagger_files.png"><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959537.png"> </a> </p><h3 id="OpenAPI-和-Swagger-文件的-Redoc-UI-预览"><a href="#OpenAPI-和-Swagger-文件的-Redoc-UI-预览" class="headerlink" title="OpenAPI 和 Swagger 文件的 Redoc UI 预览"></a>OpenAPI 和 Swagger 文件的 Redoc UI 预览</h3><p>Ultimate IntelliJ IDEA 现已支持 OpenAPI 和 Swagger 规范文件（包括 YAML 和 JSON 文件）的 <a href="https://redocly.com/">Redoc UI</a> 预览，允许您在 IDE 内的 Redoc 和 Swagger UI 之间切换。 通过 Redocly 集成，您可以从 IntelliJ IDEA 中访问 <em>Try it</em> 控制台，使用它设置参数并向 API 发送请求。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959485.png"></p><h3 id="JavaScript-中的-JSON-正文补全"><a href="#JavaScript-中的-JSON-正文补全" class="headerlink" title="JavaScript 中的 JSON 正文补全"></a>JavaScript 中的 JSON 正文补全</h3><p>Ultimate IDE 现在为 JavaScript 代码中的 JSON 对象键提供补全，例如使用 <code>fetch()</code> 调用或引用 Axios 库的代码。 Spring MVC 服务器端点现已得到支持，未来将有更多服务器框架加入支持列表。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959552.png"> ###  HTTP 客户端中对 JavaScript 导入的支持 Ultimate 在 IntelliJ IDEA 2023.2 中，现在可以通过导入的模块共享 HTTP 客户端请求处理程序的通用 JavaScript 代码。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959618.png"> </p><h3 id="HTTP-客户端中响应的-PDF-和-HTML-预览"><a href="#HTTP-客户端中响应的-PDF-和-HTML-预览" class="headerlink" title="HTTP 客户端中响应的 PDF 和 HTML 预览"></a>HTTP 客户端中响应的 PDF 和 HTML 预览</h3><p>Ultimate IntelliJ IDEA 现在能够在 HTTP 客户端的请求结果中显示 PDF 和 HTML 文件的预览。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959614.png"> </p><h3 id="HTTP-客户端-CLI-中对-GraphQL-和-WebSocket-的支持"><a href="#HTTP-客户端-CLI-中对-GraphQL-和-WebSocket-的支持" class="headerlink" title="HTTP 客户端 CLI 中对 GraphQL 和 WebSocket 的支持"></a>HTTP 客户端 CLI 中对 GraphQL 和 WebSocket 的支持</h3><p>Ultimate 您现在可以在 IntelliJ IDEA 中使用 <a href="https://blog.jetbrains.com/idea/2022/12/http-client-cli-run-requests-and-tests-on-ci/">HTTP 客户端 CLI</a> 与 GraphQL API 交互，并与服务建立 WebSocket 连接，用于测试或自动化脚本。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959658.png"> </p><h3 id="VM-options-（虚拟机选项）中-Spring-Boot-配置键的自动补全"><a href="#VM-options-（虚拟机选项）中-Spring-Boot-配置键的自动补全" class="headerlink" title="_VM options_（虚拟机选项）中 Spring Boot 配置键的自动补全"></a>_VM options_（虚拟机选项）中 Spring Boot 配置键的自动补全</h3><p>Ultimate 设置新的 Spring Boot 运行配置时，_VM options_（虚拟机选项）字段为 <code>-D</code> 标志后面出现的键提供自动补全选项。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959859.png"> </p><h3 id="Spring-配置-Bean-不再需要注解处理器"><a href="#Spring-配置-Bean-不再需要注解处理器" class="headerlink" title="Spring 配置 Bean 不再需要注解处理器"></a>Spring 配置 Bean 不再需要注解处理器</h3><p>Ultimate 我们简化了在 IntelliJ IDEA 中使用 Spring 的自定义配置 Bean 时的用户体验。 IDE 现在会在属性和 YAML 配置文件中提供代码补全和验证，无需设置 Spring Boot 配置注解处理器。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959914.png"></p><h3 id="Kotlin-中对-Spring-AOP-的支持"><a href="#Kotlin-中对-Spring-AOP-的支持" class="headerlink" title="Kotlin 中对 Spring AOP 的支持"></a>Kotlin 中对 Spring AOP 的支持</h3><p>Ultimate 我们扩展了 IntelliJ IDEA 对在 Spring 应用程序中使用 AspectJ 的支持。 IDE 现在可为 Kotlin 代码提供分析和补全，此前已经为 Java 代码提供。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959945.png"> </p><h3 id="针对检测-YAML-文件中不匹配值类型的新检查"><a href="#针对检测-YAML-文件中不匹配值类型的新检查" class="headerlink" title="针对检测 YAML 文件中不匹配值类型的新检查"></a>针对检测 YAML 文件中不匹配值类型的新检查</h3><p>Ultimate 在 IntelliJ IDEA 2023.2 中，我们引入了一项新检查，旨在消除 <a href="https://hitchdev.com/strictyaml/why/implicit-typing-removed/">Norway Problem</a> 并防止对 YAML 文件中布尔值的意外误解。 当列表主要由字符串组成但包含布尔式文字时，IntelliJ IDEA 将高亮显示此文字，指示潜在的不一致，并建议为其添加引号。 如果列表主要由布尔式文字（例如 <code>true</code>、<code>false</code>、<code>off</code>、<code>on</code>、<code>yes</code> 或 <code>no</code>）组成，则偏离此模式的任何文字都将被高亮显示为可能的错误，不过，在这种情况下不会建议具体的快速修复。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959056.png"> </p><h3 id="对编辑-AsyncAPI-文件的支持"><a href="#对编辑-AsyncAPI-文件的支持" class="headerlink" title="对编辑 AsyncAPI 文件的支持"></a>对编辑 AsyncAPI 文件的支持</h3><p>Ultimate 现在，在 IntelliJ IDEA 中使用 AsyncAPI 规范格式更加简单。 IDE 支持架构验证功能，并为引用、_Endpoints_（端点）视图和 _Editor Preview_（编辑器预览）窗格提供了代码补全。 </p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959064.png"> </p><h3 id="在-Docker-镜像层内预览文件"><a href="#在-Docker-镜像层内预览文件" class="headerlink" title="在 Docker 镜像层内预览文件"></a>在 Docker 镜像层内预览文件</h3><p>现在可以在 _Services_（服务）工具窗口中轻松访问和预览 Docker 镜像层的内容。 从列表选择镜像，选择 _Show layers_（显示层），然后点击 _Analyze image for more information_（分析镜像以获得更多信息）。 这将打开层中存储的文件列表，您可以右键点击文件，然后点击 _Open File_（打开文件）（对于二进制文件，则为 _Download File_（下载文件）），在编辑器中轻松打开所选文件。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959981.png"></p><h3 id="将-Docker-容器设为作为运行配置的-Before-Launch-（启动前）任务运行"><a href="#将-Docker-容器设为作为运行配置的-Before-Launch-（启动前）任务运行" class="headerlink" title="将 Docker 容器设为作为运行配置的 _Before Launch_（启动前）任务运行"></a>将 Docker 容器设为作为运行配置的 _Before Launch_（启动前）任务运行</h3><p>现在，可以将 Docker 运行配置指定为 _Before Launch_（启动前）任务，从而在另一个配置之前运行。 IDE 将等待当前运行的容器恢复正常，然后再启动下一个运行配置。 要将 Docker 运行配置放入队列中，首先创建配置，然后通过 _Modify options | Add before launch task | Run configuration_（修改选项 | 添加启动前任务 | 运行配置）将其添加到相关容器中。 </p><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959225.png"></p><h3 id="对单个项目中多个-kubeconfig-文件的支持"><a href="#对单个项目中多个-kubeconfig-文件的支持" class="headerlink" title="对单个项目中多个 kubeconfig 文件的支持"></a>对单个项目中多个 kubeconfig 文件的支持</h3><p>Ultimate 这项新引入的功能允许您在单个项目中设置多个 kubeconfig 文件。 这简化了处理多个集群或在同一项目中的不同集群上使用环境的体验。 转到 _File | Settings | Build, Execution, Deployment | Kubernetes_（文件 | 设置 | 构建、执行、部署 | Kubernetes）即可设置文件。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959309.png"></p><h3 id="查看部署日志"><a href="#查看部署日志" class="headerlink" title="查看部署日志"></a>查看部署日志</h3><p>Ultimate 现在，您可以在 _Services_（服务）工具窗口中查看 Kubernetes 集群中的部署日志。 右键点击树中的 _Deployment_（部署），然后从上下文菜单中选择 _Follow Log_（关注日志）或 _Download Log_（下载日志）。 </p><h1 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959321.png"> </p><h3 id="针对-JavaScript-和-TypeScript-改进了错误格式设置"><a href="#针对-JavaScript-和-TypeScript-改进了错误格式设置" class="headerlink" title="针对 JavaScript 和 TypeScript 改进了错误格式设置"></a>针对 JavaScript 和 TypeScript 改进了错误格式设置</h3><p>Ultimate 我们在 IntelliJ IDEA 2023.2 中关注如何改进呈现 JavaScript 和 TypeScript 中类型错误的方式。 现在，您的错误和警告将以可读性更高的方式格式化，使代码中的问题更易发现。 这适用于所有 TypeScript 和一些最常见的 JavaScript 错误，甚至包括本地化后的错误。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959371.png"> </p><h3 id="CSS-嵌套支持"><a href="#CSS-嵌套支持" class="headerlink" title="CSS 嵌套支持"></a>CSS 嵌套支持</h3><p>Ultimate IntelliJ IDEA 2023.2 现在支持 <a href="https://www.w3.org/TR/css-nesting-1/">CSS 嵌套</a>。 我们实现了语法支持和检查，新检查会在嵌套选择器以标识符或函数符号开头时发出提醒。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959418.png"> </p><h3 id="Vue-语言服务器支持"><a href="#Vue-语言服务器支持" class="headerlink" title="Vue 语言服务器支持"></a>Vue 语言服务器支持</h3><p>Ultimate Vue 语言服务器（VLS，又称 Volar）支持可在快速导航和文档弹出窗口中提供更准确的错误检测和更好的类型信息。 VLS 默认将用于 TypeScript v5.0 及更高版本，TypeScript 服务的包装器将用于更低版本的 TypeScript。 在 _Settings | Languages &amp; Frameworks | TypeScript | Vue_（设置 | 语言和框架 | TypeScript | Vue）下，您可以将 Vue 服务设置为在所有 TypeScript 版本上使用 VLS 集成。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959448.png"> </p><h3 id="适用于-React-挂钩的新实时模板"><a href="#适用于-React-挂钩的新实时模板" class="headerlink" title="适用于 React 挂钩的新实时模板"></a>适用于 React 挂钩的新实时模板</h3><p>Ultimate 我们在 _Settings | Editor | Live Templates | React hooks_（设置 | 编辑器 | 实时模板 | React 挂钩）下为 React 挂钩添加了一组新的实时模板。 要使用实时模板，首先在编辑器中输入缩写，然后按 <em>Tab</em> 将其展开。 </p><h1 id="代码质量工作流"><a href="#代码质量工作流" class="headerlink" title="代码质量工作流"></a>代码质量工作流</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959591.png"> </p><h3 id="捆绑了-Qodana-代码质量平台"><a href="#捆绑了-Qodana-代码质量平台" class="headerlink" title="捆绑了 Qodana 代码质量平台"></a>捆绑了 Qodana 代码质量平台</h3><p>通过完全集成我们旨在适应任何 CI&#x2F;CD 管道的智能静态分析引擎 <a href="https://www.jetbrains.com.cn/qodana/?utm_campaign=idea_x_qodana&utm_medium=referral&utm_source=whatsnew">JetBrains Qodana</a>，IntelliJ IDEA 2023.2 简化了静态分析工具的配置。 这一集成具备两大重要优势。 首先，简单的配置让您只需点击几下即可触发分析、查看项目级问题，以及在首选 CI&#x2F;CD 系统中设置质量门。 其次，您现在无需离开 IDE 即可直接查看服务器端分析结果。 在这篇<a href="https://blog.jetbrains.com/qodana/2023/07/qodana-is-out-of-preview-with-first-class-jetbrains-ide-integration/">博文</a>中详细了解 Qodana 及其最新版本。 </p><h1 id="数据库工具"><a href="#数据库工具" class="headerlink" title="数据库工具"></a>数据库工具</h1><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959039.png"> </p><h3 id="Redis-Cluster-支持"><a href="#Redis-Cluster-支持" class="headerlink" title="Redis Cluster 支持"></a>Redis Cluster 支持</h3><p>Ultimate 您现在可以连接到 Redis Cluster 并拥有与独立 Redis 相同的功能集。 连接到集群时，必须在所需 URL 之前输入 <code>jdbc:redis:cluster:</code>。 为此，您需要选择适当的连接类型。 如果连接到集群需要 SSH 隧道，应在 URL 中指明集群中所有节点的主机和端口。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959076.png"> </p><h3 id="架构迁移对话框的新-UI"><a href="#架构迁移对话框的新-UI" class="headerlink" title="架构迁移对话框的新 UI"></a>架构迁移对话框的新 UI</h3><p>Ultimate 在 v2023.2 中，我们重做了架构迁移功能。 主要区别在于，同一个对象现在位于对话框两个部分的同一行上，从而更清晰地显示将在目标架构中添加、移除或更改的对象。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959109.png"> </p><h3 id="数据编辑器的-Time-zone-（时区）设置"><a href="#数据编辑器的-Time-zone-（时区）设置" class="headerlink" title="数据编辑器的 _Time zone_（时区）设置"></a>数据编辑器的 _Time zone_（时区）设置</h3><p>Ultimate _Data Editor and Viewer_（数据编辑器和查看器）设置页面新增了 _Time zone_（时区）字段，用于设置显示 <code>datetime</code> 值的时区。 <img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308051959129.png"> </p><h3 id="对-Redshift-中外部数据库和数据共享的支持"><a href="#对-Redshift-中外部数据库和数据共享的支持" class="headerlink" title="对 Redshift 中外部数据库和数据共享的支持"></a>对 Redshift 中外部数据库和数据共享的支持</h3><p>Ultimate 现在，共享数据库及其内容均会内省。 创建这些数据库的数据共享也会内省。 </p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>在这个版本中，我们为想要在 IDE 中使用特定 LSP 服务器提供编码辅助的插件开发者引入了 LSP API。 如果您已经创建了自己的编程语言或框架，则可以创建 LSP 服务器和插件以在 IDE 中获得支持。 请注意，此功能仅在 IDE 的付费版本中可用。 <a href="https://blog.jetbrains.com/platform/2023/07/lsp-for-plugin-developers/">了解详情</a>。 </li><li>我们分解了 <a href="https://plugins.jetbrains.com/plugin/12494-big-data-tools">Big Data Tools</a> 插件，允许单独使用其各个部分。 这让 IntelliJ IDEA 得到六个新插件：<a href="https://plugins.jetbrains.com/plugin/21704-kafka">Kafka</a>、<a href="https://plugins.jetbrains.com/plugin/21700-spark">Spark</a>、<a href="https://plugins.jetbrains.com/plugin/21702-flink">Flink</a>、<a href="https://plugins.jetbrains.com/plugin/21706-remote-file-systems">Remote File Systems</a>、<a href="https://plugins.jetbrains.com/plugin/21701-big-data-file-viewer">Big Data File Viewer</a> 和 <a href="https://plugins.jetbrains.com/plugin/21673-zeppelin">Zeppelin</a>。 如果您需要全部六个插件，仍然可以一键安装 Big Data Tools 插件。 </li><li><pre><code> IntelliJ IDEA 捆绑的 Android 插件现在提供 Android Studio Giraffe Beta 2 的所有功能，包括对 Android Gradle Plugin (AGP) 8.0.0 的支持。 请注意，此支持不包括需要登录 Firebase 帐号的功能。 </code></pre></li><li><pre><code>    从 2023.2 开始，最大堆大小 (-Xmx) 的默认值已更改为 2 GB。</code></pre></li></ul><p>�值已更改为 2 GB。</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 更新日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages自定义域名</title>
      <link href="/eef35e86.html"/>
      <url>/eef35e86.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="Github-Pages自定义域名"><a href="#Github-Pages自定义域名" class="headerlink" title="Github Pages自定义域名"></a>Github Pages自定义域名</h1><p>当你想在网上发布内容时，配置Github Pages是一个很好的选择。如果你想要在自己的域名上发布，你可以使用Github Pages来创建自己的网站。本文将介绍如何使用Github Pages自定义域名。</p><p>这里呢先列出前置条件：</p><ul><li>您的Github Pages能正常访问</li><li>拥有自己的域名并备案成功</li></ul><p>关于如何创建Github Pages可以参考我之前的博客<a href="https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig" title="https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig">https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig</a></p><p>下面详细介绍如何配置</p><h2 id="一、配置CName"><a href="#一、配置CName" class="headerlink" title="一、配置CName"></a>一、配置CName</h2><p>这里需要注意的是，记录值就是你的Github Pages地址，记录类型填写CName，主机记录就是你的二级域名地址</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309959.png"></p><h2 id="二、添加CNAME文件"><a href="#二、添加CNAME文件" class="headerlink" title="二、添加CNAME文件"></a>二、添加CNAME文件</h2><p>首先找到你的主分支，这个分支要和Setting里面配置的分支一致。然后创建一个NAME文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309973.png"></p><p>文件内容是<code>二级域名.自己的域名</code></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309943.png"></p><h2 id="三、访问配置的CNAME"><a href="#三、访问配置的CNAME" class="headerlink" title="三、访问配置的CNAME"></a>三、访问配置的CNAME</h2><p>这里等待几分钟，我这里几秒钟就刷出来了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309952.png"><br>com&#x2F;202308012309952.png)</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> githubpages </tag>
            
            <tag> github pages自定义域名 </tag>
            
            <tag> cname文件 </tag>
            
            <tag> 访问配置的cname </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GithubPages免费搭建个人博客网站</title>
      <link href="/90bfb7d6.html"/>
      <url>/90bfb7d6.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="Hexo-GithubPages免费搭建个人博客网站"><a href="#Hexo-GithubPages免费搭建个人博客网站" class="headerlink" title="Hexo+GithubPages免费搭建个人博客网站"></a>Hexo+GithubPages免费搭建个人博客网站</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80%E5%89%8D%E8%A8%80">一、前言</a></li><li><a href="#%E4%BA%8CGithub%E9%85%8D%E7%BD%AE">二、Github配置</a><ul><li><a href="#%E6%96%B0%E5%BB%BA%E5%90%8C%E5%90%8D%E4%BB%93%E5%BA%93">新建同名仓库</a></li><li><a href="#%E9%85%8D%E7%BD%AEPages">配置Pages</a></li></ul></li><li><a href="#%E4%B8%89%E5%AE%89%E8%A3%85Hexo">三、安装Hexo</a></li><li><a href="#%E5%9B%9B%E9%85%8D%E7%BD%AEhexo-deployer-git">四、配置hexo-deployer-git</a></li><li><a href="#%E4%BA%94%E8%AE%BF%E9%97%AE">五、访问</a></li><li><a href="#%E5%85%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0">六、发布文章</a></li><li><a href="#%E4%B8%83%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">七、安装主题</a></li></ul><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我之前开了好几年的云服务器了，实际上使用场景并不是很多，感觉有点浪费。前两个月都给关掉了，现在呢琢磨着弄一个免费的云服务搭建个人博客。暂时先弄Github的，Gitee的那个要身份证，暂时弄不了，等等吧。</p><p>需要准备的环境：</p><p>windows的话需要准备node环境，可以关注某绿色软件回复：1009 不限速下载软件安装</p><p>这里列一下清单</p><ol><li>node环境</li><li>能访问github并准备好github账号</li></ol><h2 id="二、Github配置"><a href="#二、Github配置" class="headerlink" title="二、Github配置"></a>二、Github配置</h2><h3 id="新建同名仓库"><a href="#新建同名仓库" class="headerlink" title="新建同名仓库"></a>新建同名仓库</h3><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021025.png"></p><p>这里需要注意的有两点</p><ol><li>仓库名格式： username.github.io</li><li>仓库需要设置public，不能设置为private</li></ol><h3 id="配置Pages"><a href="#配置Pages" class="headerlink" title="配置Pages"></a>配置Pages</h3><p>在仓库主页点击Setting</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021979.png"></p><p>这里的配置按照以下方式配置即可</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021001.png"></p><p>OK，那么这里需要配置的完成了。</p><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>这里需要注意的是，需要先确认安装好了node环境，并配置了环境变量，可以通过cmd输入 <code>npm -v</code> 命令确认</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021887.png"></p><p>halo官网地址：<a href="https://hexo.io/zh-cn/" title="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>安装很简单，直接在cmd中输入 <code>npm install hexo-cli -g</code> 即可</p><p>此时，需要在本地建立一个仓库，这个仓库中的文件将来会同步到github上。</p><p>建立方式是在cmd中输入 <code>hexo init</code> ，需要说明的是，需要在指定目录执行该命令，我这里推荐一个简单的方式。</p><ol><li>进入需要初始化仓库的文件夹下</li><li>左上角输入cmd</li><li>回车</li></ol><p>这样打开的cmd窗口自动进入到当前目录了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021066.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021947.png"></p><p>这样就算是创建好了，可以看到生成了一堆文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021916.png"></p><h2 id="四、配置hexo-deployer-git"><a href="#四、配置hexo-deployer-git" class="headerlink" title="四、配置hexo-deployer-git"></a>四、配置hexo-deployer-git</h2><p>官方地址：<a href="https://github.com/hexojs/hexo-deployer-git" title="https://github.com/hexojs/hexo-deployer-git">https://github.com/hexojs/hexo-deployer-git</a></p><p>安装也很简单，直接在cmd中输入  <code>npm install hexo-deployer-git --save</code></p><p>需要注意的是，执行该命令，需要在上面hexo初始化的仓库目录下执行，否则是没有用的。</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021574.png"></p><p>执行完效果如上图</p><p>我们需要关注的是生成的_config.yml文件，这里我们打开这个文件，并对部分配置做修改。</p><ol><li><p>修改url</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021546.png"></p></li><li><p>修改deploy</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021633.png"></p></li><li><p>这个配置可改可不改</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021598.png"></p></li></ol><p>修改完毕保存后，我们在cmd中执行命令 <code>helo d</code> 即可部署我们的项目，稍等几分钟，就能访问到了。</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021587.png"></p><p>正常到这边就结束了，但是后续多上传几次后就会报错</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021533.png"></p><p>这个原因可能是被限制了，我们需要配置token</p><p>打开github的settings</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021254.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021142.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021941.png"></p><p>权限勾选第一个就行了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021896.png"></p><p>接下来我们需要在_config.yml中加上token</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021756.png"></p><h2 id="五、访问"><a href="#五、访问" class="headerlink" title="五、访问"></a>五、访问</h2><p>我的路由是：<a href="https://zysicyj.github.io/" title="https://zysicyj.github.io/">https://zysicyj.github.io/</a></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021678.png"></p><h2 id="六、发布文章"><a href="#六、发布文章" class="headerlink" title="六、发布文章"></a>六、发布文章</h2><p>官方文档：<a href="https://hexo.io/zh-cn/docs/commands" title="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p><p>执行<code>hexo -new</code> 可以创建文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021581.png"></p><p>执行上传命令 <code>helo g &amp;&amp; hexo d</code> ，然后等几分钟，能看到文件已经同步上去了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021450.png"></p><h2 id="七、安装主题"><a href="#七、安装主题" class="headerlink" title="七、安装主题"></a>七、安装主题</h2><p>我是用的主题是bufferfly <a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D" title="https://butterfly.js.org/posts/21cfbf15/#安裝">https://butterfly.js.org/posts/21cfbf15/#安裝</a></p><p>仓库根目录下拉取代码</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021441.png"></p><p>修改_config.yml</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021501.png"></p><p>安装插件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021568.png"></p><p>重新生成部署 <code>hexo -g &amp;&amp; hexo d</code></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021719.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021226.png"></p><p>后续的话还有不少可以优化的地方，比如hexo主题，分类和标签问题，图片显示问题等等，这个后续再写文章吧<br>个后续再写文章吧</p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> githubpages </tag>
            
            <tag> 个人博客 </tag>
            
            <tag> 搭建 </tag>
            
            <tag> 免费 </tag>
            
            <tag> 网站 </tag>
            
            <tag> github配置 </tag>
            
            <tag> 安装hexo </tag>
            
            <tag> 配置hexo-deployer-git </tag>
            
            <tag> 访问 </tag>
            
            <tag> 发布文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC学习笔记（上篇）</title>
      <link href="/1a50bc40.html"/>
      <url>/1a50bc40.html</url>
      
        <content type="html"><![CDATA[<div id="readmore-container"><h1 id="IOC学习笔记（上篇）"><a href="#IOC学习笔记（上篇）" class="headerlink" title="IOC学习笔记（上篇）"></a>IOC学习笔记（上篇）</h1><p>学习视频地址：<a href="https://time.geekbang.org/course/intro/100042601?tab=catalog">https://time.geekbang.org/course/detail/100042601-184049</a></p><h2 id="IOC容器的职责"><a href="#IOC容器的职责" class="headerlink" title="IOC容器的职责"></a>IOC容器的职责</h2><ul><li>依赖处理 <ul><li>依赖查找</li><li>依赖注入</li></ul></li><li>生命周期管理 <ul><li>容器</li><li>托管的资源（Java Beans 或其他资源<a href="#fn1">[1]</a>）</li></ul></li><li>配置 <ul><li>容器</li><li>外部化配置</li><li>托管的资源（Java Beans或其他资源<a href="#fn1">[1:1]</a>）</li></ul></li></ul><h2 id="Ioc容器的实现"><a href="#Ioc容器的实现" class="headerlink" title="Ioc容器的实现"></a>Ioc容器的实现</h2><ul><li>Java SE <ul><li>Java Beans</li><li>Java ServiceLoader SPI<a href="#fn2">[2]</a></li><li>JNDI（Java Naming and Directory Interface）</li></ul></li><li>Java EE <ul><li>EJB（Enterprise Java Beans）</li><li>Servlet</li></ul></li><li>开源 <ul><li>Apache Avalon（<a href="http://avalon.apache.org/closed.html%EF%BC%89">http://avalon.apache.org/closed.html）</a></li><li>PicoContainer（<a href="http://picocontainer.xn--com-c16s">http://picocontainer.com）</a></li><li>Google Guice（<a href="https://github.com/google/guice%EF%BC%89">https://github.com/google/guice）</a></li><li>Spring Framework（<a href="https://spring.io/projects/spring-framework%EF%BC%89">https://spring.io/projects/spring-framework）</a></li></ul></li></ul><h2 id="传统IoC容器的实现"><a href="#传统IoC容器的实现" class="headerlink" title="传统IoC容器的实现"></a>传统IoC容器的实现</h2><ul><li>Java Beans作为IoC容器</li><li>特性 <ul><li><a href="https://www.wolai.com/mRb4QGrHGR47QcZ7kJ1awQ">依赖查找</a></li><li>生命周期管理</li><li>配置元信息</li><li>事件</li><li>自定义</li><li>资源管理</li><li>持久化</li></ul></li><li>规范 <ul><li>JavaBeans：<a href="https://_www.oracle.com_technetwork_java_javase_tech_index-jsp-138795/">https://www.oracle.com/technetwork/java/javase/tech/index-jsp-138795.html</a></li><li>BeanContext：<a href="https://_docs.oracle.com_javase_8_docs_technotes_guides_beans_spec_beancontext/">https://docs.oracle.com/javase/8/docs/technotes/guides/beans/spec/beancontext.html</a></li></ul></li></ul><h2 id="依赖查找VS依赖注入"><a href="#依赖查找VS依赖注入" class="headerlink" title="依赖查找VS依赖注入"></a>依赖查找VS依赖注入</h2><ul><li>优劣对比</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/548519/1690289784867-c1b13ab7-3e36-48fe-84b0-5f23dccc0c3b.png#from=url&id=cgbg5&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="构造器注入VS-Setter注入"><a href="#构造器注入VS-Setter注入" class="headerlink" title="构造器注入VS Setter注入"></a>构造器注入VS Setter注入</h2><p>在选择构造器注入（Constructor Injection）和Setter注入（Setter Injection）之间，需要根据具体的情况来决定。<br>构造器注入是通过类的构造器来注入依赖对象，通常在创建对象的过程中完成注入。这种方式可以保证对象在创建完成后，其依赖关系已经完全被注入，使得对象在使用时具备完整的状态。构造器注入也可以使对象的依赖关系更加明确，减少了对于Setter方法的依赖。<br>Setter注入是通过类的Setter方法来注入依赖对象，通常在对象创建后通过调用Setter方法来完成注入。这种方式可以在对象创建后动态地修改其依赖关系，灵活性更高。Setter注入也可以支持可选的依赖，即某些依赖对象可以不注入而使用默认值。<br>选择构造器注入还是Setter注入，可以考虑以下几个方面：</p><ol><li>对象的依赖关系是否必须要在创建时注入，还是可以在对象创建后进行注入。如果依赖关系必须在创建时注入，那么构造器注入是更合适的选择；如果依赖关系可以在创建后动态修改，那么可以考虑使用Setter注入。</li><li>对象的依赖关系是否是必需的，还是可选的。如果某些依赖是必需的，而且没有合适的默认值，那么构造器注入可以确保这些依赖在创建时被注入；如果某些依赖是可选的，可以使用Setter注入，并提供默认值。</li><li>对象的可测试性。构造器注入可以使得对象的依赖关系更加明确，方便进行单元测试，因为可以通过构造器传入模拟对象。而Setter注入在单元测试中可能需要通过反射等方式来设置依赖对象。</li></ol><p>综上所述，选择构造器注入还是Setter注入取决于具体的情况。如果依赖关系必须在创建时注入，而且是必需的，那么构造器注入是更合适的选择；如果依赖关系可以在创建后动态修改，或者某些依赖是可选的，那么可以考虑使用Setter注入。同时，还需要考虑对象的可测试性和代码的可读性等因素。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-什么是IOC？"><a href="#1-什么是IOC？" class="headerlink" title="1. 什么是IOC？"></a>1. 什么是IOC？</h3><p>IOC，全称为Inversion of Control（控制反转），是一种软件设计原则和编程思想。它是面向对象编程（OOP）中的一种设计模式，用于解耦对象间的依赖关系。<br>在传统的程序设计中，对象之间的依赖关系由对象自身负责管理。例如，一个类在创建其他类的对象时，需要直接调用其他类的构造函数或方法来获取所需的对象。这种方式使得类之间紧密耦合，难以进行单元测试、代码复用和替换等操作。<br>而IOC是一种反转了对象创建和依赖关系管理的控制方式。在IOC中，对象的创建和依赖关系的管理由一个容器（Container）来负责。容器负责创建对象，并将依赖的对象注入到需要的地方。对象只需要定义自己所需的依赖，而不需要关心如何创建和管理这些依赖。这样可以实现对象间的解耦，提高代码的可维护性和可扩展性。<br>IOC的核心思想是通过依赖注入（Dependency Injection）来实现对象之间的解耦。依赖注入是指将需要的依赖对象通过构造器、Setter方法或其他方式注入到对象中，而不是由对象自己创建或获取依赖对象。依赖注入可以通过配置文件、注解或自动扫描等方式来实现。<br>IOC的好处包括：</p><ol><li>解耦：IOC通过将对象的创建和依赖关系的管理交给容器来处理，使得对象之间的关系更加松散，减少了耦合。</li><li>可测试性：由于对象的依赖关系由容器注入，可以方便地进行单元测试，通过替换依赖对象来进行测试或模拟。</li><li>可扩展性：在IOC中，可以通过配置文件或注解等方式来管理对象的依赖关系，使得系统更加灵活，能够方便地进行功能扩展或替换。</li></ol><p>常见的IOC框架包括Spring Framework、Google Guice等。这些框架提供了依赖注入的功能，可以帮助开发者实现IOC，并提供了其他的功能和工具来支持应用程序的开发。<br>总结来说，IOC（控制反转）是一种软件设计原则和编程思想，通过将对象的依赖关系的管理交给容器来处理，实现对象间的解耦。IOC的核心是依赖注入，将对象的依赖通过构造器、Setter方法或其他方式注入到对象中。IOC可以提高代码的可维护性、可测试性和可扩展性。</p><h3 id="2-依赖查找和依赖注入的区别"><a href="#2-依赖查找和依赖注入的区别" class="headerlink" title="2. 依赖查找和依赖注入的区别"></a>2. 依赖查找和依赖注入的区别</h3><p>依赖查找（Dependency Lookup）和依赖注入（Dependency Injection）是两种不同的依赖关系管理方式。<br>依赖查找是指通过容器或上下文来查找所需的依赖对象。在依赖查找中，对象自己负责获取它所依赖的对象，通常是通过容器提供的方法或API来获取。例如，通过容器的getBean()方法来获取所需的对象。<br>依赖注入是指将依赖对象通过构造器、Setter方法或其他方式注入到对象中。在依赖注入中，对象不需要关心如何获取依赖对象，而是通过注入的方式来获取。注入可以通过配置文件、注解或自动扫描等方式实现。<br>区别如下：</p><ol><li>控制方式不同：依赖查找是由对象自己控制获取依赖对象，而依赖注入是由容器控制将依赖对象注入到对象中。</li><li>依赖关系的表达方式不同：依赖查找需要在对象中显式调用容器提供的方法来获取依赖对象，而依赖注入是通过构造器、Setter方法或其他方式将依赖对象注入到对象中。</li><li>对象的可测试性不同：依赖查找在单元测试中可能需要使用模拟对象等技术来替代真实的依赖对象，而依赖注入可以通过注入不同的依赖对象来进行单元测试。</li><li>对象的依赖关系管理方式不同：依赖查找需要在每个对象中显式获取依赖对象，而依赖注入将依赖对象的管理交给容器来处理，对象只需要定义自己所需的依赖，不需要关心如何获取和管理这些依赖。</li></ol><p>综上所述，依赖查找和依赖注入是两种不同的依赖关系管理方式。依赖查找由对象自己负责获取依赖对象，而依赖注入是由容器负责将依赖对象注入到对象中。选择依赖查找还是依赖注入取决于具体的需求和设计风格。依赖注入通常被认为是更推荐的一种方式，因为它能够实现对象间的解耦，提高代码的可维护性和可测试性。</p><h3 id="3-Spring作为IOC容器有什么优势"><a href="#3-Spring作为IOC容器有什么优势" class="headerlink" title="3. Spring作为IOC容器有什么优势"></a>3. Spring作为IOC容器有什么优势</h3><p>Spring作为一个流行的IOC（控制反转）容器，具有以下优势：</p><ol><li>松耦合：Spring实现了依赖注入（DI）机制，通过将对象的依赖关系交由容器管理，实现了对象间的松耦合。这使得代码更容易理解、维护和扩展，提高了系统的灵活性。</li><li>可测试性：Spring的依赖注入机制使得对象的依赖关系通过构造器、Setter方法或其他方式注入，而不是直接在对象内部创建或获取依赖对象。这样，在进行单元测试时，可以更方便地替换依赖对象，进行集成测试和模块测试。</li><li>面向接口编程：Spring鼓励面向接口编程，通过接口来定义具体类的依赖关系。这种编程方式使得代码更具扩展性和可替换性，有利于实现多态和依赖倒置原则。</li><li>AOP支持：Spring提供了AOP（面向切面编程）的支持，通过配置和代理技术，可以实现横切关注点（例如事务管理、日志记录等）的集中管理和复用。这样，可以将业务逻辑与横切关注点分离，提高代码的重用性和可维护性。</li><li>生命周期管理：Spring容器管理对象的生命周期，可以在对象创建、初始化和销毁时执行相应的操作。例如，通过配置初始化方法和销毁方法，可以在对象创建和销毁时执行特定的逻辑。</li><li>配置灵活性：Spring采用基于XML、注解或Java配置的方式来进行配置，使得配置更加灵活和可扩展。可以根据具体需求选择合适的配置方式，方便地切换和修改配置，而不需要修改代码。</li><li>集成丰富：Spring提供了丰富的集成支持，可以与各种开源和商业框架进行集成，如Hibernate、MyBatis、Spring MVC等。这些集成支持简化了开发过程，提高了开发效率和系统的整合能力。</li></ol><p>总的来说，Spring作为一个IOC容器，通过依赖注入、面向接口编程、AOP支持、生命周期管理和灵活的配置等特性，提供了优秀的开发框架和工具，使得开发者能够更加专注于业务逻辑的实现，提高了系统的可维护性、可测试性和可扩展性。</p><hr><ol><li>比如监听器可以通过外部引入 <a href="#fnref1">↩︎</a><a href="">↩︎</a></li><li>从JDK1.6版本开始引入 <a href="#fnref2">↩︎</a><br>引入 <a href="#fnref2">↩︎</a></li></ol></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);var isEncrypt = document.getElementById('hexo-blog-encrypt');var allowMobile = false;if (!isEncrypt && (!isMobile || (isMobile && allowMobile))) {try {var plugin = new ReadmorePlugin();plugin.init({"type": "hexo","id": "readmore-container","name": "程序员朱永胜","blogId": "39259-6450029321246-893","qrcode": "https://blog-1253652709.cos.ap-guangzhou.myqcloud.com/blog/202308142242856.jpg","keyword": "1","random": "1","height": "auto","expires": "365","lockToc": "yes","interval": "60","baseUrl": ""});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> ioc </tag>
            
            <tag> 依赖处理 </tag>
            
            <tag> 依赖查找 </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> 生命周期管理 </tag>
            
            <tag> 容器 </tag>
            
            <tag> 托管的资源 </tag>
            
            <tag> 外部化配置 </tag>
            
            <tag> java beans </tag>
            
            <tag> java serviceloader spi </tag>
            
            <tag> jndi </tag>
            
            <tag> ejb </tag>
            
            <tag> servlet </tag>
            
            <tag> apache avalon </tag>
            
            <tag> picocontainer </tag>
            
            <tag> google guice </tag>
            
            <tag> spring framework </tag>
            
            <tag> 依赖查找vs依赖注入 </tag>
            
            <tag> 构造器注入vs setter注入 </tag>
            
            <tag> 什么是ioc </tag>
            
            <tag> 依赖查找和依赖注入的区别 </tag>
            
            <tag> spring作为ioc容器的优势 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
