<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github Pages自定义域名</title>
      <link href="/2023/08/01/Github%20Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
      <url>/2023/08/01/Github%20Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-Pages自定义域名"><a href="#Github-Pages自定义域名" class="headerlink" title="Github Pages自定义域名"></a>Github Pages自定义域名</h1><p>当你想在网上发布内容时，配置Github Pages是一个很好的选择。如果你想要在自己的域名上发布，你可以使用Github Pages来创建自己的网站。本文将介绍如何使用Github Pages自定义域名。</p><p>这里呢先列出前置条件：</p><ul><li>您的Github Pages能正常访问</li><li>拥有自己的域名并备案成功</li></ul><p>关于如何创建Github Pages可以参考我之前的博客<a href="https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig" title="https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig">https://mp.weixin.qq.com/s/onryCTQHSSoFcJWAjziqig</a></p><p>下面详细介绍如何配置</p><h2 id="一、配置CName"><a href="#一、配置CName" class="headerlink" title="一、配置CName"></a>一、配置CName</h2><p>这里需要注意的是，记录值就是你的Github Pages地址，记录类型填写CName，主机记录就是你的二级域名地址</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309959.png"></p><h2 id="二、添加CNAME文件"><a href="#二、添加CNAME文件" class="headerlink" title="二、添加CNAME文件"></a>二、添加CNAME文件</h2><p>首先找到你的主分支，这个分支要和Setting里面配置的分支一致。然后创建一个NAME文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309973.png"></p><p>文件内容是<code>二级域名.自己的域名</code></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309943.png"></p><h2 id="三、访问配置的CNAME"><a href="#三、访问配置的CNAME" class="headerlink" title="三、访问配置的CNAME"></a>三、访问配置的CNAME</h2><p>这里等待几分钟，我这里几秒钟就刷出来了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202308012309952.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GithubPages免费搭建个人博客网站</title>
      <link href="/2023/07/29/Hexo-GithubPages%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2023/07/29/Hexo-GithubPages%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-GithubPages免费搭建个人博客网站"><a href="#Hexo-GithubPages免费搭建个人博客网站" class="headerlink" title="Hexo+GithubPages免费搭建个人博客网站"></a>Hexo+GithubPages免费搭建个人博客网站</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80%E5%89%8D%E8%A8%80">一、前言</a></li><li><a href="#%E4%BA%8CGithub%E9%85%8D%E7%BD%AE">二、Github配置</a><ul><li><a href="#%E6%96%B0%E5%BB%BA%E5%90%8C%E5%90%8D%E4%BB%93%E5%BA%93">新建同名仓库</a></li><li><a href="#%E9%85%8D%E7%BD%AEPages">配置Pages</a></li></ul></li><li><a href="#%E4%B8%89%E5%AE%89%E8%A3%85Hexo">三、安装Hexo</a></li><li><a href="#%E5%9B%9B%E9%85%8D%E7%BD%AEhexo-deployer-git">四、配置hexo-deployer-git</a></li><li><a href="#%E4%BA%94%E8%AE%BF%E9%97%AE">五、访问</a></li><li><a href="#%E5%85%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0">六、发布文章</a></li><li><a href="#%E4%B8%83%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">七、安装主题</a></li></ul><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我之前开了好几年的云服务器了，实际上使用场景并不是很多，感觉有点浪费。前两个月都给关掉了，现在呢琢磨着弄一个免费的云服务搭建个人博客。暂时先弄Github的，Gitee的那个要身份证，暂时弄不了，等等吧。</p><p>需要准备的环境：</p><p>windows的话需要准备node环境，可以关注某绿色软件回复：1009 不限速下载软件安装</p><p>这里列一下清单</p><ol><li>node环境</li><li>能访问github并准备好github账号</li></ol><h2 id="二、Github配置"><a href="#二、Github配置" class="headerlink" title="二、Github配置"></a>二、Github配置</h2><h3 id="新建同名仓库"><a href="#新建同名仓库" class="headerlink" title="新建同名仓库"></a>新建同名仓库</h3><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021025.png"></p><p>这里需要注意的有两点</p><ol><li>仓库名格式： username.github.io</li><li>仓库需要设置public，不能设置为private</li></ol><h3 id="配置Pages"><a href="#配置Pages" class="headerlink" title="配置Pages"></a>配置Pages</h3><p>在仓库主页点击Setting</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021979.png"></p><p>这里的配置按照以下方式配置即可</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021001.png"></p><p>OK，那么这里需要配置的完成了。</p><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>这里需要注意的是，需要先确认安装好了node环境，并配置了环境变量，可以通过cmd输入 <code>npm -v</code> 命令确认</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021887.png"></p><p>halo官网地址：<a href="https://hexo.io/zh-cn/" title="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>安装很简单，直接在cmd中输入 <code>npm install hexo-cli -g</code> 即可</p><p>此时，需要在本地建立一个仓库，这个仓库中的文件将来会同步到github上。</p><p>建立方式是在cmd中输入 <code>hexo init</code> ，需要说明的是，需要在指定目录执行该命令，我这里推荐一个简单的方式。</p><ol><li>进入需要初始化仓库的文件夹下</li><li>左上角输入cmd</li><li>回车</li></ol><p>这样打开的cmd窗口自动进入到当前目录了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021066.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021947.png"></p><p>这样就算是创建好了，可以看到生成了一堆文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021916.png"></p><h2 id="四、配置hexo-deployer-git"><a href="#四、配置hexo-deployer-git" class="headerlink" title="四、配置hexo-deployer-git"></a>四、配置hexo-deployer-git</h2><p>官方地址：<a href="https://github.com/hexojs/hexo-deployer-git" title="https://github.com/hexojs/hexo-deployer-git">https://github.com/hexojs/hexo-deployer-git</a></p><p>安装也很简单，直接在cmd中输入  <code>npm install hexo-deployer-git --save</code></p><p>需要注意的是，执行该命令，需要在上面hexo初始化的仓库目录下执行，否则是没有用的。</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021574.png"></p><p>执行完效果如上图</p><p>我们需要关注的是生成的_config.yml文件，这里我们打开这个文件，并对部分配置做修改。</p><ol><li><p>修改url</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021546.png"></p></li><li><p>修改deploy</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021633.png"></p></li><li><p>这个配置可改可不改</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021598.png"></p></li></ol><p>修改完毕保存后，我们在cmd中执行命令 <code>helo d</code> 即可部署我们的项目，稍等几分钟，就能访问到了。</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021587.png"></p><p>正常到这边就结束了，但是后续多上传几次后就会报错</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021533.png"></p><p>这个原因可能是被限制了，我们需要配置token</p><p>打开github的settings</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021254.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021142.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021941.png"></p><p>权限勾选第一个就行了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021896.png"></p><p>接下来我们需要在_config.yml中加上token</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021756.png"></p><h2 id="五、访问"><a href="#五、访问" class="headerlink" title="五、访问"></a>五、访问</h2><p>我的路由是：<a href="https://zysicyj.github.io/" title="https://zysicyj.github.io/">https://zysicyj.github.io/</a></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021678.png"></p><h2 id="六、发布文章"><a href="#六、发布文章" class="headerlink" title="六、发布文章"></a>六、发布文章</h2><p>官方文档：<a href="https://hexo.io/zh-cn/docs/commands" title="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p><p>执行<code>hexo -new</code> 可以创建文件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021581.png"></p><p>执行上传命令 <code>helo g &amp;&amp; hexo d</code> ，然后等几分钟，能看到文件已经同步上去了</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021450.png"></p><h2 id="七、安装主题"><a href="#七、安装主题" class="headerlink" title="七、安装主题"></a>七、安装主题</h2><p>我是用的主题是bufferfly <a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D" title="https://butterfly.js.org/posts/21cfbf15/#安裝">https://butterfly.js.org/posts/21cfbf15/#安裝</a></p><p>仓库根目录下拉取代码</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021441.png"></p><p>修改_config.yml</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021501.png"></p><p>安装插件</p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021568.png"></p><p>重新生成部署 <code>hexo -g &amp;&amp; hexo d</code></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021719.png"></p><p><img src="https://njpkhuan-blog.oss-cn-shanghai.aliyuncs.com/202307290021226.png"></p><p>后续的话还有不少可以优化的地方，比如hexo主题，分类和标签问题，图片显示问题等等，这个后续再写文章吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo Github 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docs/IOC学习笔记</title>
      <link href="/2023/07/28/docs-IOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/28/docs-IOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC学习笔记（上篇）"><a href="#IOC学习笔记（上篇）" class="headerlink" title="IOC学习笔记（上篇）"></a>IOC学习笔记（上篇）</h1><p>学习视频地址：<a href="https://time.geekbang.org/course/intro/100042601?tab=catalog">https://time.geekbang.org/course/detail/100042601-184049</a></p><h2 id="IOC容器的职责"><a href="#IOC容器的职责" class="headerlink" title="IOC容器的职责"></a>IOC容器的职责</h2><ul><li>依赖处理 <ul><li>依赖查找</li><li>依赖注入</li></ul></li><li>生命周期管理 <ul><li>容器</li><li>托管的资源（Java Beans 或其他资源<a href="#fn1">[1]</a>）</li></ul></li><li>配置 <ul><li>容器</li><li>外部化配置</li><li>托管的资源（Java Beans或其他资源<a href="#fn1">[1:1]</a>）</li></ul></li></ul><h2 id="Ioc容器的实现"><a href="#Ioc容器的实现" class="headerlink" title="Ioc容器的实现"></a>Ioc容器的实现</h2><ul><li>Java SE <ul><li>Java Beans</li><li>Java ServiceLoader SPI<a href="#fn2">[2]</a></li><li>JNDI（Java Naming and Directory Interface）</li></ul></li><li>Java EE <ul><li>EJB（Enterprise Java Beans）</li><li>Servlet</li></ul></li><li>开源 <ul><li>Apache Avalon（<a href="http://avalon.apache.org/closed.html%EF%BC%89">http://avalon.apache.org/closed.html）</a></li><li>PicoContainer（<a href="http://picocontainer.xn--com-c16s">http://picocontainer.com）</a></li><li>Google Guice（<a href="https://github.com/google/guice%EF%BC%89">https://github.com/google/guice）</a></li><li>Spring Framework（<a href="https://spring.io/projects/spring-framework%EF%BC%89">https://spring.io/projects/spring-framework）</a></li></ul></li></ul><h2 id="传统IoC容器的实现"><a href="#传统IoC容器的实现" class="headerlink" title="传统IoC容器的实现"></a>传统IoC容器的实现</h2><ul><li>Java Beans作为IoC容器</li><li>特性 <ul><li><a href="https://www.wolai.com/mRb4QGrHGR47QcZ7kJ1awQ">依赖查找</a></li><li>生命周期管理</li><li>配置元信息</li><li>事件</li><li>自定义</li><li>资源管理</li><li>持久化</li></ul></li><li>规范 <ul><li>JavaBeans：<a href="https://_www.oracle.com_technetwork_java_javase_tech_index-jsp-138795/">https://www.oracle.com/technetwork/java/javase/tech/index-jsp-138795.html</a></li><li>BeanContext：<a href="https://_docs.oracle.com_javase_8_docs_technotes_guides_beans_spec_beancontext/">https://docs.oracle.com/javase/8/docs/technotes/guides/beans/spec/beancontext.html</a></li></ul></li></ul><h2 id="依赖查找VS依赖注入"><a href="#依赖查找VS依赖注入" class="headerlink" title="依赖查找VS依赖注入"></a>依赖查找VS依赖注入</h2><ul><li>优劣对比</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/548519/1690289784867-c1b13ab7-3e36-48fe-84b0-5f23dccc0c3b.png#from=url&id=cgbg5&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="构造器注入VS-Setter注入"><a href="#构造器注入VS-Setter注入" class="headerlink" title="构造器注入VS Setter注入"></a>构造器注入VS Setter注入</h2><p>在选择构造器注入（Constructor Injection）和Setter注入（Setter Injection）之间，需要根据具体的情况来决定。<br>构造器注入是通过类的构造器来注入依赖对象，通常在创建对象的过程中完成注入。这种方式可以保证对象在创建完成后，其依赖关系已经完全被注入，使得对象在使用时具备完整的状态。构造器注入也可以使对象的依赖关系更加明确，减少了对于Setter方法的依赖。<br>Setter注入是通过类的Setter方法来注入依赖对象，通常在对象创建后通过调用Setter方法来完成注入。这种方式可以在对象创建后动态地修改其依赖关系，灵活性更高。Setter注入也可以支持可选的依赖，即某些依赖对象可以不注入而使用默认值。<br>选择构造器注入还是Setter注入，可以考虑以下几个方面：</p><ol><li>对象的依赖关系是否必须要在创建时注入，还是可以在对象创建后进行注入。如果依赖关系必须在创建时注入，那么构造器注入是更合适的选择；如果依赖关系可以在创建后动态修改，那么可以考虑使用Setter注入。</li><li>对象的依赖关系是否是必需的，还是可选的。如果某些依赖是必需的，而且没有合适的默认值，那么构造器注入可以确保这些依赖在创建时被注入；如果某些依赖是可选的，可以使用Setter注入，并提供默认值。</li><li>对象的可测试性。构造器注入可以使得对象的依赖关系更加明确，方便进行单元测试，因为可以通过构造器传入模拟对象。而Setter注入在单元测试中可能需要通过反射等方式来设置依赖对象。</li></ol><p>综上所述，选择构造器注入还是Setter注入取决于具体的情况。如果依赖关系必须在创建时注入，而且是必需的，那么构造器注入是更合适的选择；如果依赖关系可以在创建后动态修改，或者某些依赖是可选的，那么可以考虑使用Setter注入。同时，还需要考虑对象的可测试性和代码的可读性等因素。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-什么是IOC？"><a href="#1-什么是IOC？" class="headerlink" title="1. 什么是IOC？"></a>1. 什么是IOC？</h3><p>IOC，全称为Inversion of Control（控制反转），是一种软件设计原则和编程思想。它是面向对象编程（OOP）中的一种设计模式，用于解耦对象间的依赖关系。<br>在传统的程序设计中，对象之间的依赖关系由对象自身负责管理。例如，一个类在创建其他类的对象时，需要直接调用其他类的构造函数或方法来获取所需的对象。这种方式使得类之间紧密耦合，难以进行单元测试、代码复用和替换等操作。<br>而IOC是一种反转了对象创建和依赖关系管理的控制方式。在IOC中，对象的创建和依赖关系的管理由一个容器（Container）来负责。容器负责创建对象，并将依赖的对象注入到需要的地方。对象只需要定义自己所需的依赖，而不需要关心如何创建和管理这些依赖。这样可以实现对象间的解耦，提高代码的可维护性和可扩展性。<br>IOC的核心思想是通过依赖注入（Dependency Injection）来实现对象之间的解耦。依赖注入是指将需要的依赖对象通过构造器、Setter方法或其他方式注入到对象中，而不是由对象自己创建或获取依赖对象。依赖注入可以通过配置文件、注解或自动扫描等方式来实现。<br>IOC的好处包括：</p><ol><li>解耦：IOC通过将对象的创建和依赖关系的管理交给容器来处理，使得对象之间的关系更加松散，减少了耦合。</li><li>可测试性：由于对象的依赖关系由容器注入，可以方便地进行单元测试，通过替换依赖对象来进行测试或模拟。</li><li>可扩展性：在IOC中，可以通过配置文件或注解等方式来管理对象的依赖关系，使得系统更加灵活，能够方便地进行功能扩展或替换。</li></ol><p>常见的IOC框架包括Spring Framework、Google Guice等。这些框架提供了依赖注入的功能，可以帮助开发者实现IOC，并提供了其他的功能和工具来支持应用程序的开发。<br>总结来说，IOC（控制反转）是一种软件设计原则和编程思想，通过将对象的依赖关系的管理交给容器来处理，实现对象间的解耦。IOC的核心是依赖注入，将对象的依赖通过构造器、Setter方法或其他方式注入到对象中。IOC可以提高代码的可维护性、可测试性和可扩展性。</p><h3 id="2-依赖查找和依赖注入的区别"><a href="#2-依赖查找和依赖注入的区别" class="headerlink" title="2. 依赖查找和依赖注入的区别"></a>2. 依赖查找和依赖注入的区别</h3><p>依赖查找（Dependency Lookup）和依赖注入（Dependency Injection）是两种不同的依赖关系管理方式。<br>依赖查找是指通过容器或上下文来查找所需的依赖对象。在依赖查找中，对象自己负责获取它所依赖的对象，通常是通过容器提供的方法或API来获取。例如，通过容器的getBean()方法来获取所需的对象。<br>依赖注入是指将依赖对象通过构造器、Setter方法或其他方式注入到对象中。在依赖注入中，对象不需要关心如何获取依赖对象，而是通过注入的方式来获取。注入可以通过配置文件、注解或自动扫描等方式实现。<br>区别如下：</p><ol><li>控制方式不同：依赖查找是由对象自己控制获取依赖对象，而依赖注入是由容器控制将依赖对象注入到对象中。</li><li>依赖关系的表达方式不同：依赖查找需要在对象中显式调用容器提供的方法来获取依赖对象，而依赖注入是通过构造器、Setter方法或其他方式将依赖对象注入到对象中。</li><li>对象的可测试性不同：依赖查找在单元测试中可能需要使用模拟对象等技术来替代真实的依赖对象，而依赖注入可以通过注入不同的依赖对象来进行单元测试。</li><li>对象的依赖关系管理方式不同：依赖查找需要在每个对象中显式获取依赖对象，而依赖注入将依赖对象的管理交给容器来处理，对象只需要定义自己所需的依赖，不需要关心如何获取和管理这些依赖。</li></ol><p>综上所述，依赖查找和依赖注入是两种不同的依赖关系管理方式。依赖查找由对象自己负责获取依赖对象，而依赖注入是由容器负责将依赖对象注入到对象中。选择依赖查找还是依赖注入取决于具体的需求和设计风格。依赖注入通常被认为是更推荐的一种方式，因为它能够实现对象间的解耦，提高代码的可维护性和可测试性。</p><h3 id="3-Spring作为IOC容器有什么优势"><a href="#3-Spring作为IOC容器有什么优势" class="headerlink" title="3. Spring作为IOC容器有什么优势"></a>3. Spring作为IOC容器有什么优势</h3><p>Spring作为一个流行的IOC（控制反转）容器，具有以下优势：</p><ol><li>松耦合：Spring实现了依赖注入（DI）机制，通过将对象的依赖关系交由容器管理，实现了对象间的松耦合。这使得代码更容易理解、维护和扩展，提高了系统的灵活性。</li><li>可测试性：Spring的依赖注入机制使得对象的依赖关系通过构造器、Setter方法或其他方式注入，而不是直接在对象内部创建或获取依赖对象。这样，在进行单元测试时，可以更方便地替换依赖对象，进行集成测试和模块测试。</li><li>面向接口编程：Spring鼓励面向接口编程，通过接口来定义具体类的依赖关系。这种编程方式使得代码更具扩展性和可替换性，有利于实现多态和依赖倒置原则。</li><li>AOP支持：Spring提供了AOP（面向切面编程）的支持，通过配置和代理技术，可以实现横切关注点（例如事务管理、日志记录等）的集中管理和复用。这样，可以将业务逻辑与横切关注点分离，提高代码的重用性和可维护性。</li><li>生命周期管理：Spring容器管理对象的生命周期，可以在对象创建、初始化和销毁时执行相应的操作。例如，通过配置初始化方法和销毁方法，可以在对象创建和销毁时执行特定的逻辑。</li><li>配置灵活性：Spring采用基于XML、注解或Java配置的方式来进行配置，使得配置更加灵活和可扩展。可以根据具体需求选择合适的配置方式，方便地切换和修改配置，而不需要修改代码。</li><li>集成丰富：Spring提供了丰富的集成支持，可以与各种开源和商业框架进行集成，如Hibernate、MyBatis、Spring MVC等。这些集成支持简化了开发过程，提高了开发效率和系统的整合能力。</li></ol><p>总的来说，Spring作为一个IOC容器，通过依赖注入、面向接口编程、AOP支持、生命周期管理和灵活的配置等特性，提供了优秀的开发框架和工具，使得开发者能够更加专注于业务逻辑的实现，提高了系统的可维护性、可测试性和可扩展性。</p><hr><ol><li>比如监听器可以通过外部引入 <a href="#fnref1">↩︎</a><a href="">↩︎</a></li><li>从JDK1.6版本开始引入 <a href="#fnref2">↩︎</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docs/IOC学习笔记（上篇）.md</title>
      <link href="/2023/07/28/%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/07/28/%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/28/hello-world/"/>
      <url>/2023/07/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
