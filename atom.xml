<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  <icon>https://blog.zysicyj.top/icon.png</icon>
  
  <link href="https://blog.zysicyj.top/atom.xml" rel="self"/>
  
  <link href="https://blog.zysicyj.top/"/>
  <updated>2025-01-22T15:03:59.000Z</updated>
  <id>https://blog.zysicyj.top/</id>
  
  <author>
    <name>程序员朱永胜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nacos 2.4 安全实践指南：开启权限认证、配置默认账号密码与 MySQL 集成</title>
    <link href="https://blog.zysicyj.top/post/nacos-24-guide-to-security-practice-open-permission-certification-configure-the-default-account-password-and-mysql-integration-1fwsrh.html"/>
    <id>https://blog.zysicyj.top/post/nacos-24-guide-to-security-practice-open-permission-certification-configure-the-default-account-password-and-mysql-integration-1fwsrh.html</id>
    <published>2025-01-22T14:49:31.000Z</published>
    <updated>2025-01-22T15:03:59.000Z</updated>
    
    
    <summary type="html">引言
在微服务架构中，配置中心和注册中心的安全性至关重要。Nacos 作为阿里巴巴开源的动态服务发现与配置管理平台，其默认安装未启用权限认证，存在安全风险。本文将详细介绍 Nacos 2.4 版本如何通过配置文件直接启用权限认证、配置默认管理员账号密码，并集成MySQL数据源，同时结合安全实践建议，为生产环境提供可靠保障。




一、环境准备
 1. Nacos 2.4 安装包
    下载地址：Nacos GitHub Release，解压至目标目录。
 2. MySQL 5.7+
    创建专用数据库（如 nacos_config​），确保账号具备读写权限。




二、配置MySQL</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis 集群节点间通信机制：Gossip 协议与故障检测</title>
    <link href="https://blog.zysicyj.top/post/the-communication-method-between-nodes-in-redis-cluster-ajssy.html"/>
    <id>https://blog.zysicyj.top/post/the-communication-method-between-nodes-in-redis-cluster-ajssy.html</id>
    <published>2025-01-14T17:58:35.000Z</published>
    <updated>2025-01-15T09:07:15.000Z</updated>
    
    
    <summary type="html">Redis 集群中节点之间的通信方式
Redis 集群中节点之间的通信方式
Redis 集群是一种分布式的键值存储解决方案，它通过多个节点协作来提供高可用性和高性能的服务。在 Redis 集群中，节点之间需要进行通信以实现数据分片、复制和故障检测等功能。下面我们详细解析 Redis 集群中节点之间的通信方式。




1. 通信协议：Gossip 协议
Redis 集群中节点之间使用了一种轻量级的通信协议 Gossip 协议。这种协议的特点是：

 * 每个节点都定期向其他随机选择的节点发送自己的状态信息。
 * 节点之间通过多次传播，最终所有节点都能获知整个集群的状态。

这种机制的好处是：</summary>
    
    
    
    
    <category term="Redis集群" scheme="https://blog.zysicyj.top/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
    <category term="节点通信" scheme="https://blog.zysicyj.top/tags/%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1/"/>
    
    <category term="gossip协议" scheme="https://blog.zysicyj.top/tags/gossip%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="槽分配" scheme="https://blog.zysicyj.top/tags/%E6%A7%BD%E5%88%86%E9%85%8D/"/>
    
    <category term="数据同步" scheme="https://blog.zysicyj.top/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 超时配置</title>
    <link href="https://blog.zysicyj.top/post/nginx-timeout-configuration-1wisuh.html"/>
    <id>https://blog.zysicyj.top/post/nginx-timeout-configuration-1wisuh.html</id>
    <published>2025-01-14T10:53:08.000Z</published>
    <updated>2025-01-22T15:12:46.000Z</updated>
    
    
    <summary type="html">Nginx超时配置
在使用 Nginx 作为 Web 服务器或反向代理时，超时时间的设置可以帮助我们处理长时间的请求或避免连接占用资源过久导致的问题。Nginx 提供了多种超时相关的配置项，下面是详细的说明和配置方法。




1. client_header_timeout​ (客户端请求头超时时间)
这个配置项用于设置 Nginx 等待客户端发送完整请求头的超时时间。如果客户端在指定时间内没有发送完整的请求头，Nginx 会返回 408 Request Time-out​ 错误。

配置示例：

1
2
3


http {
    client_header_timeout 10s; #</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>redis 内存淘汰策略</title>
    <link href="https://blog.zysicyj.top/post/redis-memory-elimination-strategy-onnlh.html"/>
    <id>https://blog.zysicyj.top/post/redis-memory-elimination-strategy-onnlh.html</id>
    <published>2024-12-30T06:11:55.000Z</published>
    <updated>2025-01-22T15:08:58.000Z</updated>
    
    
    <summary type="html">redis内存淘汰策略
Redis 内存淘汰策略详解
Redis 是一个基于内存的高性能键值存储数据库，内存是其最重要的资源之一。当数据量不断增长，超出了 Redis 配置的最大内存限制时，就需要使用 内存淘汰策略 来决定如何处理超出部分的数据。

Redis 提供了多种内存淘汰策略，本文将详细介绍这些策略的工作原理、适用场景，以及如何配置内存淘汰策略。




1. 配置最大内存
在 Redis 中，可以通过配置 maxmemory​ 参数来限制 Redis 使用的最大内存：

1


maxmemory &lt;bytes&gt;


例如，设置最大内存为 512 MB：

1


maxmemory</summary>
    
    
    
    
    <category term="知名项目/Redis" scheme="https://blog.zysicyj.top/tags/%E7%9F%A5%E5%90%8D%E9%A1%B9%E7%9B%AE-Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 高性能原因解析</title>
    <link href="https://blog.zysicyj.top/post/why-is-redis-so-fast-z1obijl.html"/>
    <id>https://blog.zysicyj.top/post/why-is-redis-so-fast-z1obijl.html</id>
    <published>2024-12-30T06:11:40.000Z</published>
    <updated>2025-01-15T15:05:03.000Z</updated>
    
    
    <summary type="html">Redis 为什么这么快？
Redis 是一个高性能的内存数据库，其卓越的性能主要归功于以下几个关键技术点。下面我们从多个角度详细分析 Redis 的性能优势。




1. 完全基于内存
Redis 的所有数据都存储在内存中，这使得它可以直接操作内存，而不需要像传统数据库那样频繁地访问磁盘。内存的访问速度通常比磁盘快几个数量级（内存的访问延迟通常是纳秒级，而磁盘是毫秒级）。

此外，Redis 使用了高效的数据结构来优化内存使用，例如字符串、哈希表、列表、集合、排序集合等。每种数据结构都经过精心设计，能够以最小的内存占用支持高效的操作。




2. 单线程模型
Redis 使用单线程事件驱</summary>
    
    
    
    
    <category term="知名项目/Redis" scheme="https://blog.zysicyj.top/tags/%E7%9F%A5%E5%90%8D%E9%A1%B9%E7%9B%AE-Redis/"/>
    
    <category term="高性能" scheme="https://blog.zysicyj.top/tags/%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    
    <category term="内存数据库" scheme="https://blog.zysicyj.top/tags/%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="单线程" scheme="https://blog.zysicyj.top/tags/%E5%8D%95%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="多路复用" scheme="https://blog.zysicyj.top/tags/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
    <category term="集群分片" scheme="https://blog.zysicyj.top/tags/%E9%9B%86%E7%BE%A4%E5%88%86%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>解决 java 中 Post 请求，在拦截器取 requestBody 数据后，controller 层接收的数据为空问题.md</title>
    <link href="https://blog.zysicyj.top/20240925152848.html"/>
    <id>https://blog.zysicyj.top/20240925152848.html</id>
    <published>2024-09-25T15:28:00.000Z</published>
    <updated>2025-01-22T07:17:22.530Z</updated>
    
    
    <summary type="html">原文地址：https://blog.csdn.net/weixin_43946446/article/details/121498068

解决方案如下：

 1. 创建一个类BodyReaderHttpServletRequestWrapper，继承HttpServletRequestWrapper，重写getInputStream和getReader方法，把request请求体继续往下传。

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
3</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker Desktop 启动不了.md</title>
    <link href="https://blog.zysicyj.top/20240913170908.html"/>
    <id>https://blog.zysicyj.top/20240913170908.html</id>
    <published>2024-09-13T17:09:00.000Z</published>
    <updated>2025-01-22T07:17:22.527Z</updated>
    
    
    <summary type="html">修改镜像地址
https://mirror.ccs.tencentyun.com

1
2
3
4
5
6
7
8
9
10
11
12
13


{
  &quot;builder&quot;: {
    &quot;gc&quot;: {
      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,
      &quot;enabled&quot;: true
    }
  },
  &quot;experimental&quot;: false,
  &quot;registry-mirrors&quot;: [
    &quot;https://mirror.ccs.tencentyun.com&quot;,
    &quot;https://docker.1panel.live&quot;
  ]
}</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何离线安装 Docker-compose.md</title>
    <link href="https://blog.zysicyj.top/20240913141537.html"/>
    <id>https://blog.zysicyj.top/20240913141537.html</id>
    <published>2024-09-13T14:15:00.000Z</published>
    <updated>2025-01-22T07:17:22.530Z</updated>
    
    
    <summary type="html">离线安装 Docker Compose 可以通过以下步骤完成：

 1. 下载 Docker Compose 二进制文件：
    
     * 首先，你需要在有网络访问的环境中下载 Docker Compose 的二进制文件。可以从 Docker Compose 的 GitHub Releases 页面下载： * 访问 Docker Compose Releases。
        * 找到你要下载的版本，选择与你的操作系统和架构匹配的二进制文件。例如，Linux 系统可以下载 docker-compose-Linux-x86_64。
       
       
    
    
</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>xxl-job.md</title>
    <link href="https://blog.zysicyj.top/20240905093800.html"/>
    <id>https://blog.zysicyj.top/20240905093800.html</id>
    <published>2024-09-05T09:38:00.000Z</published>
    <updated>2025-01-22T07:17:22.530Z</updated>
    
    
    <summary type="html">《分布式任务调度平台XXL-JOB》








一、简介
1.1 概述
XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。

1.2 社区交流
 * 社区交流

1.3 特性
 * 1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；
 * 2、动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；
 * 3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；
 * 4、执行器HA（分布式）：任务分布式</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows 更新 wsl.md</title>
    <link href="https://blog.zysicyj.top/20240829090332.html"/>
    <id>https://blog.zysicyj.top/20240829090332.html</id>
    <published>2024-08-29T09:03:00.000Z</published>
    <updated>2025-01-22T07:17:22.528Z</updated>
    
    
    <summary type="html">要更新 Windows Subsystem for Linux (WSL)，可以按照以下步骤进行。WSL 是一个 Windows 10 和 Windows 11 的功能，允许用户在 Windows 上运行 Linux 二进制可执行文件。更新 WSL 可以确保你拥有最新的功能和修复。

1. 什么是 WSL？为什么需要更新 WSL？
WSL 是一个在 Windows 上运行 Linux 环境的兼容层。它允许用户在 Windows 上运行 Linux 命令行工具和应用程序，而无需使用虚拟机或双启动系统。WSL 的主要优点包括：

 * 无缝集成：在 Windows 和 Linux 之间无缝共享文件</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>接口文档管理解决方案调研及 Torna+Smart-doc 的使用 .md</title>
    <link href="https://blog.zysicyj.top/20240823163819.html"/>
    <id>https://blog.zysicyj.top/20240823163819.html</id>
    <published>2024-08-23T16:38:00.000Z</published>
    <updated>2025-01-22T07:17:22.530Z</updated>
    
    
    <summary type="html">原文地址



一、现状
目前是通过 swagger + knife4j 的方式集成到微服务项目中，后端同学在开发或修改接口后，需要手动同步维护至公司内部的wiki中供前端和测试同学们查阅。

目前来说，这种现有方式存在如下的几个问题：

 1. 接口调试和在线文档依赖服务的启动。
 2. 现有服务基于k8s，服务是无状态的，无固定IP，文档查看需要配置映射。
 3. 一般开发同学比较习惯使用Markdown语言（.md）撰写文档，但是公司wiki平台不支持导入md文件，因此需要开发同学手动添加wiki，效率过低。
 4. Api更新不及时或未更新。主要由于接口文档依赖于注解的更新，wiki也</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker 让更新 wsl.md</title>
    <link href="https://blog.zysicyj.top/20240823153250.html"/>
    <id>https://blog.zysicyj.top/20240823153250.html</id>
    <published>2024-08-23T15:32:00.000Z</published>
    <updated>2025-01-22T07:17:22.528Z</updated>
    
    
    <summary type="html">在 Windows 上使用 Docker 时，Docker Desktop 通常依赖于 WSL 2（Windows Subsystem for Linux 2）来提供一个轻量级的 Linux 内核环境。因此，保持 WSL 2 的更新对于确保 Docker 的最佳性能和兼容性是很重要的。以下是更新 WSL 的步骤：

1. 确保 Windows 已更新
首先，确保你的 Windows 10 或 Windows 11 版本是最新的，因为 WSL 2 的更新可能依赖于 Windows 的功能更新。

 * 打开“设置” -&gt; “更新和安全” -&gt; “Windows 更新”。
 * 点击“检查更新”并</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>maven 打包遇到 Aggregator projects require &#39;pom&#39; as packaging 问题解决.md</title>
    <link href="https://blog.zysicyj.top/20240822162936.html"/>
    <id>https://blog.zysicyj.top/20240822162936.html</id>
    <published>2024-08-22T16:29:00.000Z</published>
    <updated>2025-01-22T07:17:22.528Z</updated>
    
    
    <summary type="html">保证依赖的模块和父模块都是 pom 格式，自己是jar 格式</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>minio 自愈策略.md</title>
    <link href="https://blog.zysicyj.top/20240821172554.html"/>
    <id>https://blog.zysicyj.top/20240821172554.html</id>
    <published>2024-08-21T17:25:00.000Z</published>
    <updated>2025-01-22T07:17:22.528Z</updated>
    
    
    <summary type="html">你所提到的 MinIO 的自愈机制正在从多个独立的模式转换为一个统一的模型。这种变化旨在提高系统的可靠性和数据一致性，同时减少对用户手动干预的需求。以下是对这些自愈机制的详细解释：

当前的自愈机制
 1. 整个命名空间的定期自愈：
    
     * 每30天，MinIO 会自动对整个命名空间进行一次自愈。这是为了确保所有数据块和奇偶校验块在长时间内保持一致。
    
    
 2. 新磁盘的自愈：
    
     * 当检测到磁盘替换时，系统将在大约10分钟内开始对新磁盘进行自愈。这确保了新加入的磁盘能够迅速与集群中的其他磁盘同步。
    
    
 3. 位腐蚀自愈：
 </summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>miniowatch 命令和 replacation 名命令区别.md</title>
    <link href="https://blog.zysicyj.top/20240821172425.html"/>
    <id>https://blog.zysicyj.top/20240821172425.html</id>
    <published>2024-08-21T17:24:00.000Z</published>
    <updated>2025-01-22T07:17:22.528Z</updated>
    
    
    <summary type="html">在 MinIO 中，watch 和 replication 是两个不同的功能，分别用于监控和数据复制。它们在功能和使用场景上有明显的区别。下面是对这两个命令的详细解释：

watch 命令
 * 功能：
   
    * watch 命令用于实时监控 MinIO 存储桶中的事件。例如，文件的上传、删除等操作。
    * 通过监控这些事件，用户可以及时响应存储桶内的变化。
   
   
 * 使用场景：
   
    * 开发者和运维人员可以使用 watch 来调试应用程序或监控存储桶的活动。
    * 可以用于触发自动化任务，比如在新文件上传后立即处理文件。
   
   
 * 实</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>minio 报错版本一致性问题.md</title>
    <link href="https://blog.zysicyj.top/20240821172454.html"/>
    <id>https://blog.zysicyj.top/20240821172454.html</id>
    <published>2024-08-21T17:24:00.000Z</published>
    <updated>2025-01-22T07:17:22.528Z</updated>
    
    
    <summary type="html">1
2
3
4
5


Error: http://192.168.137.1:9000-&gt;http://192.168.137.224:9000 has incorrect configuration: Expected MinIO binary checksum: dd726a40d050dbed4522db85019061ef, seen: 576bfa927fa682ff6104229835fbb3de (*fmt.wrapError)
       4: internal&#92;logger&#92;logonce.go:118:logger.(*logOnceType).logOnceIf()
</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何模拟磁盘损坏.md</title>
    <link href="https://blog.zysicyj.top/20240821172341.html"/>
    <id>https://blog.zysicyj.top/20240821172341.html</id>
    <published>2024-08-21T17:23:00.000Z</published>
    <updated>2025-01-22T07:17:22.530Z</updated>
    
    
    <summary type="html">在测试和开发环境中，模拟磁盘损坏可以帮助你了解和验证系统在故障情况下的行为和恢复能力。以下是在 Windows 和 Linux 环境下模拟磁盘损坏的方法。

在 Linux 环境中模拟磁盘损坏
 1. 使用 dd 命令清除磁盘数据：
    
     * 你可以使用 dd 命令将随机数据写入磁盘，模拟磁盘损坏。
     * 例如，假设你要模拟 /dev/sdb 磁盘的损坏：1
       
       
       sudo dd if=/dev/urandom of=/dev/sdb bs=1M count=100
       
       
       
     * 这会</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>minio_plus 接口文档.md</title>
    <link href="https://blog.zysicyj.top/20240819175049.html"/>
    <id>https://blog.zysicyj.top/20240819175049.html</id>
    <published>2024-08-19T17:50:00.000Z</published>
    <updated>2025-01-22T07:17:22.528Z</updated>
    
    
    <summary type="html">MinIO Plus API 文档
简介:MinIO Plus API 文档

HOST:mpdemo.liuxp.me

联系人:刘小平

Version:1.0.0

接口路径:/v2/api-docs

[TOC]

MinIO Plus Demo 接口
文件下载
接口地址:/storage/download/{fileKey}

请求方式:GET

请求数据类型:application/x-www-form-urlencoded

响应数据类型:*/*

接口描述:

请求参数:

参数名称参数说明请求类型是否必须数据类型schemafileKeyfileKeypathtruestri</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx.conf 和 conf.d.md</title>
    <link href="https://blog.zysicyj.top/20240819170822.html"/>
    <id>https://blog.zysicyj.top/20240819170822.html</id>
    <published>2024-08-19T17:08:00.000Z</published>
    <updated>2025-01-22T07:17:22.529Z</updated>
    
    
    <summary type="html">在Nginx中，nginx.conf 和 conf.d 目录都用于配置Nginx服务器，但它们的用途和使用方式有所不同。下面是对这两者的详细说明：

nginx.conf
nginx.conf 是Nginx的主配置文件，通常位于 /etc/nginx/nginx.conf 路径下。这个文件包含了Nginx服务器的全局配置和默认的服务器块配置。以下是一个典型的 nginx.conf 文件结构：

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>minio 配置 nginx.md</title>
    <link href="https://blog.zysicyj.top/20240819170705.html"/>
    <id>https://blog.zysicyj.top/20240819170705.html</id>
    <published>2024-08-19T17:07:00.000Z</published>
    <updated>2025-01-22T07:17:22.529Z</updated>
    
    
    <summary type="html">在生产环境中，使用Nginx作为反向代理来访问MinIO可以为你提供更好的安全性、负载均衡以及SSL/TLS支持。以下是配置Nginx来代理MinIO的详细步骤：

前提条件
 * 已经部署好MinIO，并且可以通过其内部地址访问。
 * Nginx已经安装在你的服务器上。

配置步骤
 1. 安装 Nginx
    
    如果还没有安装Nginx，可以使用以下命令进行安装：
    
    1
    
    
    sudo yum install nginx -y
    
    
    
 2. 生成SSL证书（可选）
    
    如果需要通过HTTPS访问Min</summary>
    
    
    
    
  </entry>
  
</feed>
